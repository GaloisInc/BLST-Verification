[
  {
    "status": "assumed",
    "method": "POINTonE1_in_G1",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:277:23",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_in_G1",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:286:24",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_in_G2",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:288:23",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_in_G2",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:297:24",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_pairing_init",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:301:20",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_aggregate_pk_in_g1",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:306:36",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_aggregate_pk_in_g1",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:307:40",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_aggregate_pk_in_g2",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:310:36",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_aggregate_pk_in_g2",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:311:40",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_commit",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:314:23",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_finalverify",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:316:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_finalverify",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:317:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_finalverify",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:318:27",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_finalverify",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:319:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_finalverify",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:320:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_finalverify",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:321:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_finalverify",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:322:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_finalverify",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:323:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_merge",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:325:18",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_pairing_merge",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:326:18",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_aggregated_in_g1",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:328:24",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_aggregated_in_g2",
    "specification": "unknown",
    "loc": "/workdir/proof/aggregate.saw:329:24",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "line_dbl",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:190:16",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "line_dbl",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:191:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "line_add",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:192:16",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "line_add",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:193:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "add_n_dbl_n",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:196:21",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "start_dbl_n",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:200:20",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "miller_loop_n",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:203:22",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "miller_loop_n",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:203:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_n_sqr",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:206:18",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "final_exp",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:208:17",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "final_exp",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:209:23",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "map_to_g2",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:211:17",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "map_to_g2",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:212:24",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_core_verify_pk_in_g1",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:215:33",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "map_to_g1",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:217:17",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "map_to_g1",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:218:24",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_core_verify_pk_in_g2",
    "specification": "unknown",
    "loc": "/workdir/proof/core_verify.saw:221:33",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_add",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:111:31",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_add_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:182:28",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_double",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:237:24",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_double",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:260:34",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:293:27",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:324:37",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:358:37",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:393:30",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_dadd_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:429:29",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_is_equal",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:460:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_affine_on_curve",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:508:33",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_b_onE1",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:536:4",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_on_curve",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:563:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_cneg",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:592:22",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_add",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations.saw:83:21",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_add_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:104:28",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_add_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:122:38",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_double",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:139:24",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_double",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:155:34",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:174:27",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:194:30",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_dadd_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:212:29",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_is_equal",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:232:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_affine_on_curve",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:270:33",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_b_onE2",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:288:3",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_b_onE2",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:290:3",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_on_curve",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:311:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_cneg",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:329:22",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_add",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:69:21",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_add",
    "specification": "unknown",
    "loc": "/workdir/proof/curve_operations_e2.saw:86:31",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "add_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:320:20",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sgn0x_pty_mont_384",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:322:25",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "limbs_from_be_bytes",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:324:30",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_p1_deserialize",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:326:31",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_Uncompress_BE",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:336:36",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_Uncompress_BE",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:379:36",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_Uncompress_BE",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:388:34",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_Uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:401:36",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_Uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:404:35",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_Uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:406:31",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_Uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:415:32",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_Uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:424:33",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_p1_uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:446:29",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_Deserialize_BE",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:459:37",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_Deserialize_BE",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p1.saw:471:38",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "add_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:329:20",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sgn0x_pty_mont_384x",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:331:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "limbs_from_be_bytes",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:333:30",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_Uncompress_BE",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:349:36",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_Uncompress_BE",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:403:36",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_Uncompress_BE",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:416:34",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_Uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:433:36",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_Uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:436:35",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_Uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:438:31",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_Uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:447:32",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_Uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:456:33",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_p2_uncompress",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize-p2.saw:478:29",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_p1_deserialize",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize.saw:30:27",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_p2_deserialize",
    "specification": "unknown",
    "loc": "/workdir/proof/deserialize.saw:31:27",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_precompute_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult.saw:323:4",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_gather_booth_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult.saw:449:4",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult.saw:596:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult.saw:597:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult.saw:598:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult.saw:600:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult.saw:601:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult.saw:603:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_precompute_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult2.saw:193:4",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_gather_booth_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult2.saw:319:4",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult2.saw:466:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult2.saw:467:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult2.saw:468:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult2.saw:470:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult2.saw:471:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE2_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_mult2.saw:473:1",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:262:26",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:263:31",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:264:37",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:265:41",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:267:32",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:268:27",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:269:33",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_dadd",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:270:38",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_dadd_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:271:33",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_dadd_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:272:39",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_dadd_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:273:34",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_dadd_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:274:40",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_add",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:275:21",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_add",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:276:27",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_add",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:277:31",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_add",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:278:21",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_add",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:279:27",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_add_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:280:28",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_add_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:281:34",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_add_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:282:28",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_add_affine",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:283:34",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_double",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:284:24",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_double",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:285:30",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_double",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:286:24",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_double",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:287:30",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_is_equal",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:288:26",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_is_equal",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:289:26",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:290:29",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE2_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:291:29",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "POINTonE1_mult_w5",
    "specification": "unknown",
    "loc": "/workdir/proof/ec_opts.saw:292:29",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqr_n_mul_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/exp.saw:112:20",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqr_n_mul_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/exp.saw:113:30",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "reciprocal_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/exp.saw:137:21",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "recip_sqrt_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/exp.saw:169:21",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "sqrt_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/exp.saw:210:15",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "sqrt_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/exp.saw:211:21",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrt_align_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/exp2.saw:472:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrt_align_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/exp2.saw:474:32",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "reciprocal_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/exp2.saw:517:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqr_n_mul_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/exp2.saw:529:21",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqr_n_mul_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/exp2.saw:530:31",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "recip_sqrt_fp2_9mod16",
    "specification": "unknown",
    "loc": "/workdir/proof/exp2.saw:532:29",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrt_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/exp2.saw:664:16",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrt_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/exp2.saw:665:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqr_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:106:16",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqr_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:107:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "cyclotomic_sqr_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:108:27",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "cyclotomic_sqr_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:109:33",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:110:16",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:111:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_xy00z0_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:112:26",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_xy00z0_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:113:32",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "conjugate_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:114:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "inverse_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:115:20",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "frobenius_map_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:117:27",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "frobenius_map_fp12",
    "specification": "unknown",
    "loc": "/workdir/proof/fp12_tower.saw:119:33",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "cneg_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/fp2_overrides.saw:109:26",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "add_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/fp2_overrides.saw:71:16",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sub_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/fp2_overrides.saw:72:16",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/fp2_overrides.saw:73:16",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqr_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/fp2_overrides.saw:77:15",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqr_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/fp2_overrides.saw:80:25",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_3_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/fp2_overrides.saw:84:30",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_8_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/fp2_overrides.saw:88:30",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "cneg_fp2",
    "specification": "unknown",
    "loc": "/workdir/proof/fp2_overrides.saw:99:16",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "add_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/fp_overrides.saw:237:15",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sub_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/fp_overrides.saw:238:15",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/fp_overrides.saw:239:15",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqr_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/fp_overrides.saw:246:14",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqr_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/fp_overrides.saw:251:24",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_3_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/fp_overrides.saw:256:29",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_8_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/fp_overrides.saw:261:29",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "cneg_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/fp_overrides.saw:275:15",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "cneg_fp",
    "specification": "unknown",
    "loc": "/workdir/proof/fp_overrides.saw:285:25",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_p1_affine_in_g1",
    "specification": "unknown",
    "loc": "/workdir/proof/group_test.saw:27:28",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_p2_affine_in_g2",
    "specification": "unknown",
    "loc": "/workdir/proof/group_test.saw:28:28",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sha256_block_data_order",
    "specification": "unknown",
    "loc": "/workdir/proof/hash_to_field.saw:45:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "expand_message_xmd",
    "specification": "unknown",
    "loc": "/workdir/proof/hash_to_field.saw:45:22",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "expand_message_xmd",
    "specification": "unknown",
    "loc": "/workdir/proof/hash_to_field.saw:45:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "hash_to_field",
    "specification": "unknown",
    "loc": "/workdir/proof/hash_to_field.saw:45:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mulx_mont_sparse_256",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:171:33",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "redcx_mont_256",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:173:21",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "redcx_mont_256",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:174:31",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "limbs_from_be_bytes",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:181:30",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "HKDF_Expand",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:310:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "HKDF_Extract",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:310:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_keygen",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:310:1",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sha256_block_data_order",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:310:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "HKDF_Expand",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:311:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "HKDF_Extract",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:311:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_keygen",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:311:1",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sha256_block_data_order",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:311:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "HKDF_Expand",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:312:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "HKDF_Extract",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:312:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_keygen",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:312:1",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sha256_block_data_order",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:312:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "HKDF_Expand",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:313:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "HKDF_Extract",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:313:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_keygen",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:313:1",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sha256_block_data_order",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:313:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "HKDF_Expand",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:314:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "HKDF_Extract",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:314:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "blst_keygen",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:314:1",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sha256_block_data_order",
    "specification": "unknown",
    "loc": "/workdir/proof/keygen.saw:314:1",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "POINTonE1_in_G1",
    "specification": "unknown",
    "loc": "/workdir/proof/map_to_g1.saw:257:23",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "sigma",
    "specification": "unknown",
    "loc": "/workdir/proof/map_to_g1.saw:32:13",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sha256_bcopy",
    "specification": "unknown",
    "loc": "/workdir/proof/sha_overrides.saw:82:14",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sha256_emit",
    "specification": "unknown",
    "loc": "/workdir/proof/sha_overrides.saw:88:24",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sha256_hcopy",
    "specification": "unknown",
    "loc": "/workdir/proof/sha_overrides.saw:89:25",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sign_pk_in_g2",
    "specification": "unknown",
    "loc": "/workdir/proof/sign.saw:33:21",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sign_pk_in_g1",
    "specification": "unknown",
    "loc": "/workdir/proof/sign.saw:34:21",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sk_to_pk_in_g1",
    "specification": "unknown",
    "loc": "/workdir/proof/sk_to_pk.saw:31:27",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "blst_sk_to_pk_in_g2",
    "specification": "unknown",
    "loc": "/workdir/proof/sk_to_pk.saw:32:26",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_is_zero",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:126:22",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_is_zero",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:127:23",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_is_zero",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:148:23",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_is_zero",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:149:24",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_is_equal",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:160:23",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_is_equal",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:169:27",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_is_equal",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:188:23",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_is_equal",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:189:24",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_is_equal",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:212:24",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_is_equal",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:213:25",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_copy",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:224:19",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_copy",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:225:26",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_copy",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:226:33",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:237:28",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:238:38",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:240:23",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:241:33",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:242:24",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:243:34",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_select_144",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:44:23",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_select_192",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:44:23",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_select_288",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:44:23",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_select_48",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:44:23",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_select_96",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:44:23",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:76:28",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:77:38",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:78:38",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:81:21",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:83:31",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:85:22",
    "type": "method"
  },
  {
    "status": "verified",
    "method": "vec_select",
    "specification": "unknown",
    "loc": "/workdir/proof/vect.saw:87:32",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "eucl_inverse_mod_384",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/inverse_mod_384.saw:39:28",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "eucl_inverse_mod_384",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/inverse_mod_384.saw:40:40",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrx_mont_384x",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:265:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrx_mont_384x",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:266:28",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mulx_mont_384",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:289:21",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mulx_mont_384",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:290:29",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mulx_mont_384",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:291:31",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrx_mont_384",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:296:21",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrx_mont_384",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:297:27",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrx_n_mul_mont_383",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:302:27",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrx_n_mul_mont_383",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:303:37",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrx_mont_382x",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:308:22",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrx_mont_382x",
    "specification": "unknown",
    "loc": "/workdir/proof/x86/mulx_mont_384.saw:309:28",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "add_mod_384",
    "specification": "unknown",
    "loc": "0x17980",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "add_mod_384x",
    "specification": "unknown",
    "loc": "0x17a60",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "lshift_mod_384",
    "specification": "unknown",
    "loc": "0x17ae0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_3_mod_384",
    "specification": "unknown",
    "loc": "0x17c20",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_8_mod_384",
    "specification": "unknown",
    "loc": "0x17c80",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_b_onE1",
    "specification": "unknown",
    "loc": "0x17d00",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_3_mod_384x",
    "specification": "unknown",
    "loc": "0x17e00",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_8_mod_384x",
    "specification": "unknown",
    "loc": "0x17ea0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_b_onE2",
    "specification": "unknown",
    "loc": "0x17f60",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "cneg_mod_384",
    "specification": "unknown",
    "loc": "0x180c0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sub_mod_384",
    "specification": "unknown",
    "loc": "0x181a0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sub_mod_384x",
    "specification": "unknown",
    "loc": "0x18280",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_1_plus_i_mod_384x",
    "specification": "unknown",
    "loc": "0x18300",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sgn0_pty_mod_384",
    "specification": "unknown",
    "loc": "0x184a0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sgn0_pty_mod_384x",
    "specification": "unknown",
    "loc": "0x18520",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_select_48",
    "specification": "unknown",
    "loc": "0x18640",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_select_96",
    "specification": "unknown",
    "loc": "0x186c0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_select_192",
    "specification": "unknown",
    "loc": "0x187a0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_select_144",
    "specification": "unknown",
    "loc": "0x18920",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "vec_select_288",
    "specification": "unknown",
    "loc": "0x18a40",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "add_mod_384x384",
    "specification": "unknown",
    "loc": "0x18e20",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sub_mod_384x384",
    "specification": "unknown",
    "loc": "0x18e60",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mulx_mont_384x",
    "specification": "unknown",
    "loc": "0x190c0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mulx_382x",
    "specification": "unknown",
    "loc": "0x19340",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrx_382x",
    "specification": "unknown",
    "loc": "0x194a0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "redcx_mont_384",
    "specification": "unknown",
    "loc": "0x19ba0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "fromx_mont_384",
    "specification": "unknown",
    "loc": "0x19c00",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sgn0x_pty_mont_384",
    "specification": "unknown",
    "loc": "0x1a040",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sgn0x_pty_mont_384x",
    "specification": "unknown",
    "loc": "0x1a0e0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mulx_mont_sparse_256",
    "specification": "unknown",
    "loc": "0x1b4e0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sqrx_mont_sparse_256",
    "specification": "unknown",
    "loc": "0x1b540",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "fromx_mont_256",
    "specification": "unknown",
    "loc": "0x1b940",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "redcx_mont_256",
    "specification": "unknown",
    "loc": "0x1b9c0",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "add_mod_256",
    "specification": "unknown",
    "loc": "0x1bc00",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "mul_by_3_mod_256",
    "specification": "unknown",
    "loc": "0x1bc80",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "lshift_mod_256",
    "specification": "unknown",
    "loc": "0x1bd20",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "rshift_mod_256",
    "specification": "unknown",
    "loc": "0x1bd80",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "cneg_mod_256",
    "specification": "unknown",
    "loc": "0x1be20",
    "type": "method"
  },
  {
    "status": "assumed",
    "method": "sub_mod_256",
    "specification": "unknown",
    "loc": "0x1bec0",
    "type": "method"
  },
  {
    "status": "verified",
    "term": "(a : Prelude.Bool)\n-> (b : Prelude.Bool)\n-> Prelude.EqTrue\n     (Prelude.eq Prelude.Bool (Prelude.ite Prelude.Bool a Prelude.True b)\n        (Prelude.or a b))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(a : Prelude.Bool)\n-> (b : Prelude.Bool)\n-> Prelude.EqTrue\n     (Prelude.eq Prelude.Bool (Prelude.ite Prelude.Bool a b Prelude.False)\n        (Prelude.and a b))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(a : Prelude.Bool)\n-> (b : Prelude.Bool)\n-> Prelude.EqTrue\n     (Prelude.eq Prelude.Bool (Prelude.not (Prelude.and a b))\n        (Prelude.or (Prelude.not a) (Prelude.not b)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(a : Prelude.Bool)\n-> (b : Prelude.Bool)\n-> Prelude.EqTrue\n     (Prelude.eq Prelude.Bool (Prelude.not (Prelude.or a b))\n        (Prelude.and (Prelude.not a) (Prelude.not b)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> (booth_index : Prelude.Vec 64 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE1_invariant\n           (cryptol:booth'#6163 (cryptol:precomputed_table#6152 p1)\n              booth_index))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n           cryptol:/Parameters/E\n           p1)\n        (cryptol:is_point_projective_E#6139 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE1_invariant\n           (cryptol:/implementation/CurveOperation/POINTonE1_rep p1))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(p1 : (Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer\n           cryptol:/Parameters/E\n           p1)\n        (cryptol:is_point_affine_E#6140 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Bool)\n-> (c : Prelude.Bool)\n-> (y : Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit x\n           (Prelude.ite Prelude.Bool c y x))\n        (cryptol:/Cryptol/==%3e c\n           (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit x y)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1 (cryptol:fp_exp#5552 x k,x))\n        (cryptol:fp_exp#5552 x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1 (x,cryptol:fp_exp#5552 x k))\n        (cryptol:fp_exp#5552 x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> (n : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1\n           (cryptol:fp_exp#5552 x n,cryptol:fp_exp#5552 x k))\n        (cryptol:fp_exp#5552 x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k n)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> (n : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:fp_exp#5552 (cryptol:fp_exp#5552 x n) k)\n        (cryptol:fp_exp#5552 x\n           (Cryptol.ecMul Prelude.Integer Cryptol.PRingInteger k n)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n        (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Field/fp2_abs\n           [ cryptol:/implementation/Field/fp_rep x\n           , cryptol:/implementation/Field/fp_rep y ])\n        [y, x])",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/BLSFieldExtras/is_square_fp x)\n        (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger x\n           (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.2.2.1\n              (cryptol:/BLSFieldExtras/sqrt_fp x))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant\n           (cryptol:/implementation/Field/fp_rep x))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/BLSFieldExtras/inverse_fp x)\n        (cryptol:fp_exp#5552 x\n           (Cryptol.ecMinus Prelude.Integer Cryptol.PRingInteger\n              (Cryptol.ecNumber\n                 (Cryptol.TCNum\n                    4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787)\n                 Prelude.Integer\n                 Cryptol.PLiteralInteger)\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/BLSFieldExtras/sqrt_fp x)\n        (cryptol:fp_exp#5552 x\n           (Cryptol.ecDiv Prelude.Integer Cryptol.PIntegralInteger\n              (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                 (Cryptol.ecNumber\n                    (Cryptol.TCNum\n                       4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787)\n                    Prelude.Integer\n                    Cryptol.PLiteralInteger)\n                 (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                    Cryptol.PLiteralInteger))\n              (Cryptol.ecNumber (Cryptol.TCNum 4) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1 (x,x))\n        (cryptol:fp_exp#5552 x\n           (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PLiteralInteger)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fp_abs\n           (cryptol:/implementation/Field/fp_rep x))\n        x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.1\n           (cryptol:/implementation/Field/fp2_abs x))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp2_invariant\n           (cryptol:/implementation/Field/fp2_rep x))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant\n           (Prelude.at 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n              (cryptol:/implementation/Field/fp2_rep x)\n              0))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant\n           (Prelude.at 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n              (cryptol:/implementation/Field/fp2_rep x)\n              1))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fp_abs\n           (Prelude.at 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n              (cryptol:/implementation/Field/fp2_rep x)\n              0))\n        (Prelude.at 2 Prelude.Integer x 1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fp_abs\n           (Prelude.at 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n              (cryptol:/implementation/Field/fp2_rep x)\n              1))\n        (Prelude.at 2 Prelude.Integer x 0))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "(x : Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.1\n           (cryptol:/implementation/Field/fp_abs x))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n     (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n     cryptol:/Parameters/Fp_2.2.2.1\n     cryptol:ef_unit_fp#6231)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n     (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n     cryptol:/Parameters/Fp_2.2.2.2.1\n     cryptol:ef_zero_fp#6232)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n     (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n     cryptol:/Parameters/u\n     [ Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n         Cryptol.PLiteralInteger\n     , Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n         Cryptol.PLiteralInteger ])",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n     (cryptol:/implementation/Field/fp_invariant\n        [ Prelude.bvNat 64 12260768510540316659\n        , Prelude.bvNat 64 6038201419376623626\n        , Prelude.bvNat 64 5156596810353639551\n        , Prelude.bvNat 64 12813724723179037911\n        , Prelude.bvNat 64 10288881524157229871\n        , Prelude.bvNat 64 708830206584151678 ])\n     Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n     (cryptol:/implementation/Field/fp_invariant\n        [ Prelude.bvNat 64 17644856173732828998\n        , Prelude.bvNat 64 754043588434789617\n        , Prelude.bvNat 64 10224657059481499349\n        , Prelude.bvNat 64 7488229067341005760\n        , Prelude.bvNat 64 11130996698012816685\n        , Prelude.bvNat 64 1267921511277847466 ])\n     Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n     (cryptol:/implementation/Field/fp_invariant\n        [ Prelude.bvNat 64 8505329371266088957\n        , Prelude.bvNat 64 17002214543764226050\n        , Prelude.bvNat 64 6865905132761471162\n        , Prelude.bvNat 64 8632934651105793861\n        , Prelude.bvNat 64 6631298214892334189\n        , Prelude.bvNat 64 1582556514881692819 ])\n     Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n     (cryptol:/implementation/Field/fp_abs\n        [ Prelude.bvNat 64 12260768510540316659\n        , Prelude.bvNat 64 6038201419376623626\n        , Prelude.bvNat 64 5156596810353639551\n        , Prelude.bvNat 64 12813724723179037911\n        , Prelude.bvNat 64 10288881524157229871\n        , Prelude.bvNat 64 708830206584151678 ])\n     (cryptol:/Parameters/to_Fp (Cryptol.TCNum 4) (Prelude.bvNat 4 4)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n     (cryptol:/implementation/Field/fp_abs\n        [ Prelude.bvNat 64 12260768510540316659\n        , Prelude.bvNat 64 6038201419376623626\n        , Prelude.bvNat 64 5156596810353639551\n        , Prelude.bvNat 64 12813724723179037911\n        , Prelude.bvNat 64 10288881524157229871\n        , Prelude.bvNat 64 708830206584151678 ])\n     cryptol:/Parameters/b)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n     (cryptol:/implementation/Field/fp_abs\n        [ Prelude.bvNat 64 17644856173732828998\n        , Prelude.bvNat 64 754043588434789617\n        , Prelude.bvNat 64 10224657059481499349\n        , Prelude.bvNat 64 7488229067341005760\n        , Prelude.bvNat 64 11130996698012816685\n        , Prelude.bvNat 64 1267921511277847466 ])\n     cryptol:/implementation/Field/montgomery_factor_p)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n     (cryptol:/implementation/Field/fp_abs\n        [ Prelude.bvNat 64 8505329371266088957\n        , Prelude.bvNat 64 17002214543764226050\n        , Prelude.bvNat 64 6865905132761471162\n        , Prelude.bvNat 64 8632934651105793861\n        , Prelude.bvNat 64 6631298214892334189\n        , Prelude.bvNat 64 1582556514881692819 ])\n     cryptol:/Parameters/Fp.2.2.1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n     (cryptol:bitInt#6087 Prelude.False)\n     (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n        Cryptol.PLiteralInteger))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Prelude.eq Prelude.Nat (Prelude.intToNat (Prelude.natToInt 0)) 0)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "Prelude.EqTrue\n  (Prelude.eq Prelude.Nat (Prelude.intToNat (Prelude.natToInt 1)) 1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Cryptol.TCNum 4\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n      x@6 = Cryptol.tcAdd x@2 x@1\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p : (Prelude.Integer * x@3))\n-> let { x@7 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@1\n               (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@5 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@5 x@6))\n                  (cryptol:booth_parts#6103 x@4 e))\n               (cryptol:e1_order#6130 x@7))\n            x@7)\n         (cryptol:mult_w5_result_term#6176 x@4 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Cryptol.TCNum 4\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n      x@6 = Cryptol.tcAdd x@2 x@1\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p : (Prelude.Integer * x@3))\n-> let { x@7 = cryptol:affinify_E#6142 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:mult_w5_result_term#6176 x@4 e p)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@1\n               (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@5 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@5 x@6))\n                  (cryptol:booth_parts#6103 x@4 e))\n               (cryptol:e1_order#6130 x@7))\n            x@7))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Cryptol.TCNum 4\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n      x@6 = Cryptol.tcAdd x@2 x@1\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p1 : x@3)\n-> let { x@7 = cryptol:e1_order#6130 p1\n         x@8 = cryptol:booth#6104 x@4 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131 x@8 p1)\n         (Prelude.ite x@3\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@7\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@4 e)\n                  cryptol:shift#6093))\n            (cryptol:e1_scalar_mult#6131\n               (cryptol:booth_with_add'#6187 x@1\n                  (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                     (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@5 x@6 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@5 x@6))\n                     (cryptol:booth_parts#6103 x@4 e))\n                  x@7)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@3\n                -> x@3)\n               cryptol:e1_scalar_mult#6131\n               x@8\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.TCNum 4\n      x@6 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@5) (Cryptol.TCNum 5)\n      x@8 = Cryptol.tcAdd x@2 x@1\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p : (x@3 * x@4))\n-> let { x@9 = cryptol:/ShortWeierstrassCurve/affinify x@3\n                 cryptol:/Parameters/E'\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@6 x@6)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@1\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@8 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@8))\n                  (cryptol:booth_parts#6103 x@5 e))\n               (cryptol:e2_order#6276 x@9))\n            x@9)\n         (cryptol:mult_w5_result_term#6318 x@5 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.TCNum 4\n      x@6 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@5) (Cryptol.TCNum 5)\n      x@8 = Cryptol.tcAdd x@2 x@1\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p : (x@3 * x@4))\n-> let { x@9 = cryptol:affinify_E'#6284 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@6 x@6)\n         (cryptol:mult_w5_result_term#6318 x@5 e p)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@1\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@8 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@8))\n                  (cryptol:booth_parts#6103 x@5 e))\n               (cryptol:e2_order#6276 x@9))\n            x@9))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.TCNum 4\n      x@6 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@5) (Cryptol.TCNum 5)\n      x@8 = Cryptol.tcAdd x@2 x@1\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p1 : x@4)\n-> let { x@9 = cryptol:booth#6104 x@5 e\n         x@10 = cryptol:e2_order#6276 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@6 x@6)\n         (cryptol:e2_scalar_mult#6277 x@9 p1)\n         (Prelude.ite x@4\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@10\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@5 e)\n                  cryptol:shift#6093))\n            (cryptol:e2_scalar_mult#6277\n               (cryptol:booth_with_add'#6329 x@1\n                  (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                     (Cryptol.seq x@8 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@7 x@8 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@7 x@8))\n                     (cryptol:booth_parts#6103 x@5 e))\n                  x@10)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@4\n                -> x@4)\n               cryptol:e2_scalar_mult#6277\n               x@9\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 100\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Cryptol.TCNum 20\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@2) (Cryptol.TCNum 5)\n      x@6 = Cryptol.tcAdd x@1 x@4\n    }\n in (e : Prelude.Vec 100 Prelude.Bool)\n-> (p : (Prelude.Integer * x@3))\n-> let { x@7 = cryptol:affinify_E#6142 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:mult_w5_result_term#6176 x@2 e p)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@4\n               (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@5 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@5 x@6))\n                  (cryptol:booth_parts#6103 x@2 e))\n               (cryptol:e1_order#6130 x@7))\n            x@7))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 100\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.TCNum 20\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@2) (Cryptol.TCNum 5)\n      x@8 = Cryptol.tcAdd x@1 x@6\n    }\n in (e : Prelude.Vec 100 Prelude.Bool)\n-> (p : (x@3 * x@4))\n-> let { x@9 = cryptol:affinify_E'#6284 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n         (cryptol:mult_w5_result_term#6318 x@2 e p)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@6\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@8 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@8))\n                  (cryptol:booth_parts#6103 x@2 e))\n               (cryptol:e2_order#6276 x@9))\n            x@9))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 16\n      x@3 = Cryptol.TCNum 15\n      x@4 = Cryptol.tcAdd x@1 x@3\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@3 e)\n        (cryptol:plain#6092 x@2\n           (Prelude.coerce (Cryptol.seq x@4 Prelude.Bool)\n              (Prelude.Vec 16 Prelude.Bool)\n              (Cryptol.seq_cong1 x@4 x@2 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@4 x@2))\n              (Cryptol.ecCat x@1 x@3 Prelude.Bool [Prelude.False] e))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 17\n      x@3 = Cryptol.TCNum 18\n      x@4 = Cryptol.tcAdd x@1 x@2\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@2 e)\n        (cryptol:plain#6092 x@3\n           (Prelude.coerce (Cryptol.seq x@4 Prelude.Bool)\n              (Prelude.Vec 18 Prelude.Bool)\n              (Cryptol.seq_cong1 x@4 x@3 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@4 x@3))\n              (Cryptol.ecCat x@1 x@2 Prelude.Bool [Prelude.False] e))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Cryptol.TCNum 12\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n      x@6 = Cryptol.tcAdd x@1 x@2\n    }\n in (e : Prelude.Vec 12 Prelude.Bool)\n-> (p : (Prelude.Integer * x@3))\n-> let { x@7 = cryptol:affinify_E#6142 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:mult_w5_result_term#6176 x@4 e p)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@2\n               (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@5 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@5 x@6))\n                  (cryptol:booth_parts#6103 x@4 e))\n               (cryptol:e1_order#6130 x@7))\n            x@7))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Cryptol.TCNum 14\n      x@5 = Cryptol.tcAdd x@1 x@2\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 14 Prelude.Bool)\n-> (p : (Prelude.Integer * x@3))\n-> let { x@7 = cryptol:affinify_E#6142 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:mult_w5_result_term#6176 x@4 e p)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@2\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@5 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@5))\n                  (cryptol:booth_parts#6103 x@4 e))\n               (cryptol:e1_order#6130 x@7))\n            x@7))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.TCNum 12\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@6) (Cryptol.TCNum 5)\n      x@8 = Cryptol.tcAdd x@1 x@2\n    }\n in (e : Prelude.Vec 12 Prelude.Bool)\n-> (p : (x@3 * x@4))\n-> let { x@9 = cryptol:affinify_E'#6284 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n         (cryptol:mult_w5_result_term#6318 x@6 e p)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@2\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@8 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@8))\n                  (cryptol:booth_parts#6103 x@6 e))\n               (cryptol:e2_order#6276 x@9))\n            x@9))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.TCNum 14\n      x@7 = Cryptol.tcAdd x@1 x@2\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@6) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 14 Prelude.Bool)\n-> (p : (x@3 * x@4))\n-> let { x@9 = cryptol:affinify_E'#6284 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n         (cryptol:mult_w5_result_term#6318 x@6 e p)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@2\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@7 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@7))\n                  (cryptol:booth_parts#6103 x@6 e))\n               (cryptol:e2_order#6276 x@9))\n            x@9))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 25\n      x@3 = Cryptol.TCNum 26\n      x@4 = Cryptol.tcAdd x@1 x@2\n    }\n in (e : Prelude.Vec 25 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@2 e)\n        (cryptol:plain#6092 x@3\n           (Prelude.coerce (Cryptol.seq x@4 Prelude.Bool)\n              (Prelude.Vec 26 Prelude.Bool)\n              (Cryptol.seq_cong1 x@4 x@3 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@4 x@3))\n              (Cryptol.ecCat x@1 x@2 Prelude.Bool [Prelude.False] e))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 3\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.TCNum 15\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@6) (Cryptol.TCNum 5)\n      x@8 = Cryptol.tcAdd x@1 x@2\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> (p : (x@3 * x@4))\n-> let { x@9 = cryptol:/ShortWeierstrassCurve/affinify x@3\n                 cryptol:/Parameters/E'\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@2\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@8 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@8))\n                  (cryptol:booth_parts#6103 x@6 e))\n               (cryptol:e2_order#6276 x@9))\n            x@9)\n         (cryptol:mult_w5_result_term#6318 x@6 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 3\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.TCNum 15\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@6) (Cryptol.TCNum 5)\n      x@8 = Cryptol.tcAdd x@1 x@2\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> (p1 : x@4)\n-> let { x@9 = cryptol:booth#6104 x@6 e\n         x@10 = cryptol:e2_order#6276 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n         (cryptol:e2_scalar_mult#6277 x@9 p1)\n         (Prelude.ite x@4\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@10\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@6 e)\n                  cryptol:shift#6093))\n            (cryptol:e2_scalar_mult#6277\n               (cryptol:booth_with_add'#6329 x@2\n                  (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                     (Cryptol.seq x@8 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@7 x@8 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@7 x@8))\n                     (cryptol:booth_parts#6103 x@6 e))\n                  x@10)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@4\n                -> x@4)\n               cryptol:e2_scalar_mult#6277\n               x@9\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 3\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.TCNum 17\n      x@7 = Cryptol.tcAdd x@1 x@2\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@6) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> (p : (x@3 * x@4))\n-> let { x@9 = cryptol:/ShortWeierstrassCurve/affinify x@3\n                 cryptol:/Parameters/E'\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@2\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@7 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@7))\n                  (cryptol:booth_parts#6103 x@6 e))\n               (cryptol:e2_order#6276 x@9))\n            x@9)\n         (cryptol:mult_w5_result_term#6318 x@6 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 3\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.TCNum 17\n      x@7 = Cryptol.tcAdd x@1 x@2\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@6) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> (p1 : x@4)\n-> let { x@9 = cryptol:booth#6104 x@6 e\n         x@10 = cryptol:e2_order#6276 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n         (cryptol:e2_scalar_mult#6277 x@9 p1)\n         (Prelude.ite x@4\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@10\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@6 e)\n                  cryptol:shift#6093))\n            (cryptol:e2_scalar_mult#6277\n               (cryptol:booth_with_add'#6329 x@2\n                  (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                     (Cryptol.seq x@7 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@8 x@7 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@8 x@7))\n                     (cryptol:booth_parts#6103 x@6 e))\n                  x@10)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@4\n                -> x@4)\n               cryptol:e2_scalar_mult#6277\n               x@9\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 32\n      x@3 = Cryptol.TCNum 31\n      x@4 = Cryptol.tcAdd x@1 x@3\n    }\n in (e : Prelude.Vec 31 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@3 e)\n        (cryptol:plain#6092 x@2\n           (Prelude.coerce (Cryptol.seq x@4 Prelude.Bool)\n              (Prelude.Vec 32 Prelude.Bool)\n              (Cryptol.seq_cong1 x@4 x@2 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@4 x@2))\n              (Cryptol.ecCat x@1 x@3 Prelude.Bool [Prelude.False] e))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 4\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcAdd x@1 x@2\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@2 e)\n        (cryptol:plain#6092 x@3\n           (Prelude.coerce (Cryptol.seq x@4 Prelude.Bool)\n              (Prelude.Vec 5 Prelude.Bool)\n              (Cryptol.seq_cong1 x@4 x@3 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@4 x@3))\n              (Cryptol.ecCat x@1 x@2 Prelude.Bool [Prelude.False] e))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 40\n      x@3 = Cryptol.TCNum 39\n      x@4 = Cryptol.tcAdd x@1 x@3\n    }\n in (e : Prelude.Vec 39 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@3 e)\n        (cryptol:plain#6092 x@2\n           (Prelude.coerce (Cryptol.seq x@4 Prelude.Bool)\n              (Prelude.Vec 40 Prelude.Bool)\n              (Cryptol.seq_cong1 x@4 x@2 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@4 x@2))\n              (Cryptol.ecCat x@1 x@3 Prelude.Bool [Prelude.False] e))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 6\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcAdd x@1 x@3\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@3 e)\n        (cryptol:plain#6092 x@2\n           (Prelude.coerce (Cryptol.seq x@4 Prelude.Bool)\n              (Prelude.Vec 6 Prelude.Bool)\n              (Cryptol.seq_cong1 x@4 x@2 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@4 x@2))\n              (Cryptol.ecCat x@1 x@3 Prelude.Bool [Prelude.False] e))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 6\n      x@3 = Cryptol.TCNum 7\n      x@4 = Cryptol.tcAdd x@1 x@2\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@2 e)\n        (cryptol:plain#6092 x@3\n           (Prelude.coerce (Cryptol.seq x@4 Prelude.Bool)\n              (Prelude.Vec 7 Prelude.Bool)\n              (Cryptol.seq_cong1 x@4 x@3 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@4 x@3))\n              (Cryptol.ecCat x@1 x@2 Prelude.Bool [Prelude.False] e))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 64\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.TCNum 12\n      x@7 = Cryptol.tcAdd x@1 x@6\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@2) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 64 Prelude.Bool)\n-> (p : (x@3 * x@4))\n-> let { x@9 = cryptol:affinify_E'#6284 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n         (cryptol:mult_w5_result_term#6318 x@2 e p)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@6\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@7 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@7))\n                  (cryptol:booth_parts#6103 x@2 e))\n               (cryptol:e2_order#6276 x@9))\n            x@9))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 9\n      x@3 = Cryptol.TCNum 10\n      x@4 = Cryptol.tcAdd x@1 x@2\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@2 e)\n        (cryptol:plain#6092 x@3\n           (Prelude.coerce (Cryptol.seq x@4 Prelude.Bool)\n              (Prelude.Vec 10 Prelude.Bool)\n              (Cryptol.seq_cong1 x@4 x@3 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@4 x@3))\n              (Cryptol.ecCat x@1 x@2 Prelude.Bool [Prelude.False] e))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 9\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@2) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> (p : (Prelude.Integer * x@3))\n-> let { x@6 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@1\n               (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@5 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@5 x@4))\n                  (cryptol:booth_parts#6103 x@2 e))\n               (cryptol:e1_order#6130 x@6))\n            x@6)\n         (cryptol:mult_w5_result_term#6176 x@2 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 9\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@2) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> (p1 : x@3)\n-> let { x@6 = cryptol:e1_order#6130 p1\n         x@7 = cryptol:booth#6104 x@2 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131 x@7 p1)\n         (Prelude.ite x@3\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@6\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@2 e)\n                  cryptol:shift#6093))\n            (cryptol:e1_scalar_mult#6131\n               (cryptol:booth_with_add'#6187 x@1\n                  (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                     (Cryptol.seq x@4 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@5 x@4 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@5 x@4))\n                     (cryptol:booth_parts#6103 x@2 e))\n                  x@6)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@3\n                -> x@3)\n               cryptol:e1_scalar_mult#6131\n               x@7\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 9\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.tcAdd x@1 x@1\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@2) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> (p : (x@3 * x@4))\n-> let { x@8 = cryptol:/ShortWeierstrassCurve/affinify x@3\n                 cryptol:/Parameters/E'\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@1\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@6))\n                  (cryptol:booth_parts#6103 x@2 e))\n               (cryptol:e2_order#6276 x@8))\n            x@8)\n         (cryptol:mult_w5_result_term#6318 x@2 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.TCNum 9\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.tcAdd x@1 x@1\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@2) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> (p1 : x@4)\n-> let { x@8 = cryptol:booth#6104 x@2 e\n         x@9 = cryptol:e2_order#6276 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n         (cryptol:e2_scalar_mult#6277 x@8 p1)\n         (Prelude.ite x@4\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@9\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@2 e)\n                  cryptol:shift#6093))\n            (cryptol:e2_scalar_mult#6277\n               (cryptol:booth_with_add'#6329 x@1\n                  (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                     (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@7 x@6 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@7 x@6))\n                     (cryptol:booth_parts#6103 x@2 e))\n                  x@9)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@4\n                -> x@4)\n               cryptol:e2_scalar_mult#6277\n               x@8\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 15\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n      x@6 = Cryptol.tcAdd x@1 x@3\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> (p : (Prelude.Integer * x@2))\n-> let { x@7 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@3\n               (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@5 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@5 x@6))\n                  (cryptol:booth_parts#6103 x@4 e))\n               (cryptol:e1_order#6130 x@7))\n            x@7)\n         (cryptol:mult_w5_result_term#6176 x@4 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 15\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n      x@6 = Cryptol.tcAdd x@1 x@3\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> (p1 : x@2)\n-> let { x@7 = cryptol:e1_order#6130 p1\n         x@8 = cryptol:booth#6104 x@4 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131 x@8 p1)\n         (Prelude.ite x@2\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@7\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@4 e)\n                  cryptol:shift#6093))\n            (cryptol:e1_scalar_mult#6131\n               (cryptol:booth_with_add'#6187 x@3\n                  (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                     (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@5 x@6 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@5 x@6))\n                     (cryptol:booth_parts#6103 x@4 e))\n                  x@7)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@2\n                -> x@2)\n               cryptol:e1_scalar_mult#6131\n               x@8\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 17\n      x@5 = Cryptol.tcAdd x@1 x@3\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> (p : (Prelude.Integer * x@2))\n-> let { x@7 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@3\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@5 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@5))\n                  (cryptol:booth_parts#6103 x@4 e))\n               (cryptol:e1_order#6130 x@7))\n            x@7)\n         (cryptol:mult_w5_result_term#6176 x@4 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 17\n      x@5 = Cryptol.tcAdd x@1 x@3\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> (p1 : x@2)\n-> let { x@7 = cryptol:e1_order#6130 p1\n         x@8 = cryptol:booth#6104 x@4 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131 x@8 p1)\n         (Prelude.ite x@2\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@7\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@4 e)\n                  cryptol:shift#6093))\n            (cryptol:e1_scalar_mult#6131\n               (cryptol:booth_with_add'#6187 x@3\n                  (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq x@5 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@6 x@5 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@6 x@5))\n                     (cryptol:booth_parts#6103 x@4 e))\n                  x@7)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@2\n                -> x@2)\n               cryptol:e1_scalar_mult#6131\n               x@8\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) x@3\n      x@5 = Cryptol.tcAdd x@1 x@1\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p : (Prelude.Integer * x@2))\n-> let { x@6 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@1\n               (Prelude.coerce (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@4 x@5 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@4 x@5))\n                  (cryptol:booth_parts#6103 x@3 e))\n               (cryptol:e1_order#6130 x@6))\n            x@6)\n         (cryptol:mult_w5_result_term#6176 x@3 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) x@3\n      x@5 = Cryptol.tcAdd x@1 x@1\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p : (Prelude.Integer * x@2))\n-> let { x@6 = cryptol:affinify_E#6142 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:mult_w5_result_term#6176 x@3 e p)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@1\n               (Prelude.coerce (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@4 x@5 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@4 x@5))\n                  (cryptol:booth_parts#6103 x@3 e))\n               (cryptol:e1_order#6130 x@6))\n            x@6))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) x@3\n      x@5 = Cryptol.tcAdd x@1 x@1\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p1 : x@2)\n-> let { x@6 = cryptol:e1_order#6130 p1\n         x@7 = cryptol:booth#6104 x@3 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131 x@7 p1)\n         (Prelude.ite x@2\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@6\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@3 e)\n                  cryptol:shift#6093))\n            (cryptol:e1_scalar_mult#6131\n               (cryptol:booth_with_add'#6187 x@1\n                  (Prelude.coerce (Cryptol.seq x@4 Prelude.Integer)\n                     (Cryptol.seq x@5 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@4 x@5 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@4 x@5))\n                     (cryptol:booth_parts#6103 x@3 e))\n                  x@6)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@2\n                -> x@2)\n               cryptol:e1_scalar_mult#6131\n               x@7\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p : (Prelude.Integer * x@2))\n-> let { x@6 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@1\n               (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@5 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@5 x@4))\n                  (cryptol:booth_parts#6103 x@3 e))\n               (cryptol:e1_order#6130 x@6))\n            x@6)\n         (cryptol:mult_w5_result_term#6176 x@3 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p : (Prelude.Integer * x@2))\n-> let { x@6 = cryptol:affinify_E#6142 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:mult_w5_result_term#6176 x@3 e p)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@1\n               (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@5 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@5 x@4))\n                  (cryptol:booth_parts#6103 x@3 e))\n               (cryptol:e1_order#6130 x@6))\n            x@6))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p1 : x@2)\n-> let { x@6 = cryptol:e1_order#6130 p1\n         x@7 = cryptol:booth#6104 x@3 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:e1_scalar_mult#6131 x@7 p1)\n         (Prelude.ite x@2\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@6\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@3 e)\n                  cryptol:shift#6093))\n            (cryptol:e1_scalar_mult#6131\n               (cryptol:booth_with_add'#6187 x@1\n                  (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                     (Cryptol.seq x@4 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@5 x@4 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@5 x@4))\n                     (cryptol:booth_parts#6103 x@3 e))\n                  x@6)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@2\n                -> x@2)\n               cryptol:e1_scalar_mult#6131\n               x@7\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 64\n      x@4 = Cryptol.TCNum 12\n      x@5 = Cryptol.tcAdd x@1 x@4\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 64 Prelude.Bool)\n-> (p : (Prelude.Integer * x@2))\n-> let { x@7 = cryptol:affinify_E#6142 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:mult_w5_result_term#6176 x@3 e p)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@4\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@5 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@5))\n                  (cryptol:booth_parts#6103 x@3 e))\n               (cryptol:e1_order#6130 x@7))\n            x@7))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Cryptol.TCNum 7\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 7 Prelude.Bool)\n-> (p : (Prelude.Integer * x@2))\n-> let { x@6 = cryptol:affinify_E#6142 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:mult_w5_result_term#6176 x@3 e p)\n         (cryptol:e1_scalar_mult#6131\n            (cryptol:booth_with_add'#6187 x@1\n               (Prelude.coerce (Cryptol.seq x@5 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@5 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@5 x@4))\n                  (cryptol:booth_parts#6103 x@3 e))\n               (cryptol:e1_order#6130 x@6))\n            x@6))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@5 = Cryptol.TCNum 5\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@5) x@5\n      x@7 = Cryptol.tcAdd x@1 x@1\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p : (x@2 * x@3))\n-> let { x@8 = cryptol:/ShortWeierstrassCurve/affinify x@2\n                 cryptol:/Parameters/E'\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@1\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@7 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@7))\n                  (cryptol:booth_parts#6103 x@5 e))\n               (cryptol:e2_order#6276 x@8))\n            x@8)\n         (cryptol:mult_w5_result_term#6318 x@5 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@5 = Cryptol.TCNum 5\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@5) x@5\n      x@7 = Cryptol.tcAdd x@1 x@1\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p : (x@2 * x@3))\n-> let { x@8 = cryptol:affinify_E'#6284 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n         (cryptol:mult_w5_result_term#6318 x@5 e p)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@1\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@7 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@7))\n                  (cryptol:booth_parts#6103 x@5 e))\n               (cryptol:e2_order#6276 x@8))\n            x@8))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@5 = Cryptol.TCNum 5\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@5) x@5\n      x@7 = Cryptol.tcAdd x@1 x@1\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p1 : x@3)\n-> let { x@8 = cryptol:booth#6104 x@5 e\n         x@9 = cryptol:e2_order#6276 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n         (cryptol:e2_scalar_mult#6277 x@8 p1)\n         (Prelude.ite x@3\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@9\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@5 e)\n                  cryptol:shift#6093))\n            (cryptol:e2_scalar_mult#6277\n               (cryptol:booth_with_add'#6329 x@1\n                  (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq x@7 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@6 x@7 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@6 x@7))\n                     (cryptol:booth_parts#6103 x@5 e))\n                  x@9)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@3\n                -> x@3)\n               cryptol:e2_scalar_mult#6277\n               x@8\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@5 = Cryptol.TCNum 7\n      x@6 = Cryptol.tcAdd x@1 x@1\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@5) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 7 Prelude.Bool)\n-> (p : (x@2 * x@3))\n-> let { x@8 = cryptol:affinify_E'#6284 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n         (cryptol:mult_w5_result_term#6318 x@5 e p)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@1\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@6))\n                  (cryptol:booth_parts#6103 x@5 e))\n               (cryptol:e2_order#6276 x@8))\n            x@8))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.TCNum 6\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.tcAdd x@1 x@1\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p : (x@2 * x@3))\n-> let { x@8 = cryptol:/ShortWeierstrassCurve/affinify x@2\n                 cryptol:/Parameters/E'\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@5 x@5)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@1\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@6))\n                  (cryptol:booth_parts#6103 x@4 e))\n               (cryptol:e2_order#6276 x@8))\n            x@8)\n         (cryptol:mult_w5_result_term#6318 x@4 e p))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.TCNum 6\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.tcAdd x@1 x@1\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p : (x@2 * x@3))\n-> let { x@8 = cryptol:affinify_E'#6284 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@5 x@5)\n         (cryptol:mult_w5_result_term#6318 x@4 e p)\n         (cryptol:e2_scalar_mult#6277\n            (cryptol:booth_with_add'#6329 x@1\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@6))\n                  (cryptol:booth_parts#6103 x@4 e))\n               (cryptol:e2_order#6276 x@8))\n            x@8))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.TCNum 6\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.tcAdd x@1 x@1\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p1 : x@3)\n-> let { x@8 = cryptol:booth#6104 x@4 e\n         x@9 = cryptol:e2_order#6276 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@5 x@5)\n         (cryptol:e2_scalar_mult#6277 x@8 p1)\n         (Prelude.ite x@3\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@9\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6086 x@4 e)\n                  cryptol:shift#6093))\n            (cryptol:e2_scalar_mult#6277\n               (cryptol:booth_with_add'#6329 x@1\n                  (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                     (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@7 x@6 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@7 x@6))\n                     (cryptol:booth_parts#6103 x@4 e))\n                  x@9)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@3\n                -> x@3)\n               cryptol:e2_scalar_mult#6277\n               x@8\n               p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 11\n    }\n in (e : Prelude.Vec 11 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6104 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 15\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6104 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 15\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@1 e)\n        (cryptol:booth#6104 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 16\n    }\n in (e : Prelude.Vec 16 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:plain#6092 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 17\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6104 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 17\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@1 e)\n        (cryptol:booth#6104 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 2\n      x@2 = Cryptol.ecNumber x@1 Prelude.Integer Cryptol.PLiteralInteger\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq x@1 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@2 p1))\n            (cryptol:e2_scalar_mult#6277 x@2 x@6)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 2\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq x@1 Prelude.Integer Cryptol.PEqInteger\n      x@5 = Cryptol.PZeroSeq x@1 Prelude.Integer Cryptol.PZeroInteger\n      x@6 = Prelude.Bool * x@3\n      x@7 = cryptol:/Maybe/nothing x@3 (x@5,x@5)\n      x@8 = Cryptol.PEqPair Prelude.Bool x@3 Cryptol.PEqBit\n              (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n    }\n in (s : Prelude.Vec 96 (Prelude.Vec 8 Prelude.Bool))\n-> Prelude.EqTrue\n     (cryptol:/Cryptol/==%3e\n        (Cryptol.ecEq x@6 x@8 (cryptol:uncompress_E2#6574 s) x@7)\n        (Cryptol.ecEq x@6 x@8\n           (cryptol:/implementation/SerializationP2/uncompress_E2_imp s)\n           x@7))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 2\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqSeq x@1 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 (x,x))\n        (cryptol:fp2_exp#6233 x\n           (Cryptol.ecNumber x@1 Prelude.Integer Cryptol.PLiteralInteger)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 2\n      x@2 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : Prelude.Vec 2 x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp2_invariant x)\n        (cryptol:/Cryptol/%2f%5c\n           (cryptol:/implementation/Field/fp_invariant\n              (Cryptol.ecAt x@1 x@2 Prelude.Integer Cryptol.PIntegralInteger x\n                 (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n                    Cryptol.PLiteralInteger)))\n           (cryptol:/implementation/Field/fp_invariant\n              (Cryptol.ecAt x@1 x@2 Prelude.Integer Cryptol.PIntegralInteger x\n                 (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                    Cryptol.PLiteralInteger)))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 2\n      x@2 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqSeq x@1 Prelude.Integer Cryptol.PEqInteger)\n        (x@4.1 (x@4.2.2.2.1 cryptol:/BLSFieldExtras/sqrt_fp2_c2,x))\n        [ x@2.2.1\n            (Cryptol.ecAt x@1 Prelude.Integer Prelude.Integer\n               Cryptol.PIntegralInteger\n               x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                  Cryptol.PLiteralInteger))\n        , x@2.1\n            (Cryptol.ecAt x@1 Prelude.Integer Prelude.Integer\n               Cryptol.PIntegralInteger\n               x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n                  Cryptol.PLiteralInteger)) ])",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 2\n      x@2 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqSeq x@1 Prelude.Integer Cryptol.PEqInteger)\n        (x@4.1 (x@4.2.2.2.1 cryptol:/BLSFieldExtras/sqrt_fp2_c3,x))\n        [ x@2.1\n            (Cryptol.ecAt x@1 Prelude.Integer Prelude.Integer\n               Cryptol.PIntegralInteger\n               x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                  Cryptol.PLiteralInteger))\n        , x@2.2.1\n            (Cryptol.ecAt x@1 Prelude.Integer Prelude.Integer\n               Cryptol.PIntegralInteger\n               x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n                  Cryptol.PLiteralInteger)) ])",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 2\n      x@2 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqSeq x@1 Prelude.Integer Cryptol.PEqInteger)\n        (x@4.1 (x@4.2.2.2.1 cryptol:/Parameters/u,x))\n        [ x@2.1\n            (Cryptol.ecAt x@1 Prelude.Integer Prelude.Integer\n               Cryptol.PIntegralInteger\n               x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n                  Cryptol.PLiteralInteger))\n        , x@2.1\n            (Cryptol.ecAt x@1 Prelude.Integer Prelude.Integer\n               Cryptol.PIntegralInteger\n               x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                  Cryptol.PLiteralInteger)) ])",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 24\n    }\n in (e : Prelude.Vec 24 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:plain#6092 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 25\n    }\n in (e : Prelude.Vec 25 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6104 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 31\n    }\n in (e : Prelude.Vec 31 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6104 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 381\n    }\n in (e : Prelude.Vec 381 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:plain#6092 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 39\n    }\n in (e : Prelude.Vec 39 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6104 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 4\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@1 e)\n        (cryptol:booth#6104 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 40\n    }\n in (e : Prelude.Vec 40 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:plain#6092 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 5\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@1 e)\n        (cryptol:booth#6104 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 512\n      x@2 = Prelude.Vec 512 Prelude.Bool\n      x@3 = Cryptol.TCNum 256\n      x@4 = Cryptol.tcAdd x@3 x@3\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool) (Cryptol.PEqSeqBool x@3)\n        (cryptol:/Main/mul_mont_r_bv (cryptol:/Main/redc_r_bv x)\n           (cryptol:/Main/vec256_abs cryptol:/Main/RR_rep))\n        (cryptol:/Cryptol/drop x@3 x@3 Prelude.Bool\n           (Prelude.coerce x@2 (Cryptol.seq x@4 Prelude.Bool)\n              (Cryptol.seq_cong1 x@1 x@4 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@1 x@4))\n              (Cryptol.ecMod x@2 (Cryptol.PIntegralSeqBool x@1) x\n                 (cryptol:/Cryptol/zext x@1 x@3 cryptol:/Main/bv_r)))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 6\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@1 e)\n        (cryptol:booth#6104 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 9\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6104 x@1 e)\n        (cryptol:toInt#6086 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.TCNum 9\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6086 x@1 e)\n        (cryptol:booth#6104 x@1 e))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/Parameters/Fp\n    }\n in (p1 : x@3)\n-> (p2 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@4 p1\n           p2)\n        (Prelude.ite x@3\n           (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger p1.2.2 x@1)\n           p2\n           (Prelude.ite x@3\n              (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger p2.2.2 x@1)\n              p1\n              (cryptol:/implementation/CurveOperation/p_add_bl Prelude.Integer\n                 x@4\n                 p1\n                 p2))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_add Prelude.Integer\n           cryptol:/Parameters/Fp\n           (x@1,x@1,x@1)\n           p1)\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : (Prelude.Integer * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n           (cryptol:small_mult#6154 x@1 p1))\n        (cryptol:e1_scalar_mult#6131 x@1\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3 p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = x@1,x@1,x@1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Integer * x@2)\n         (Cryptol.PEqPair Prelude.Integer x@2 Cryptol.PEqInteger\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger))\n         (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n            cryptol:/Parameters/Fp\n            x@3)\n         x@3)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@1 p1))\n        (cryptol:e1_scalar_mult#6131 x@1 (cryptol:affinify_E#6142 p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@2 * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n        (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@1 p1))\n        (cryptol:e2_scalar_mult#6277 x@1 (cryptol:affinify_E'#6284 p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = cryptol:/Parameters/E'\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@2 * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@5 x@5)\n        (cryptol:/ShortWeierstrassCurve/affinify x@2 x@4\n           (cryptol:small_mult#6296 x@1 p1))\n        (cryptol:e2_scalar_mult#6277 x@1\n           (cryptol:/ShortWeierstrassCurve/affinify x@2 x@4 p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@1 p1))\n        (cryptol:e1_scalar_mult#6131 x@1 (cryptol:affinify_E#6142 p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@2 * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n        (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@1 p1))\n        (cryptol:e2_scalar_mult#6277 x@1 (cryptol:affinify_E'#6284 p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@2))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@1 p1))\n            (cryptol:e1_scalar_mult#6131 x@1 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = x@2\n      -> Prelude.Integer\n      x@5 = cryptol:/Parameters/E\n    }\n in (P : x@3)\n-> (Q : x@2)\n-> let { x@6 = cryptol:/implementation/CurveOperation/point_dadd_affine\n                 Prelude.Integer\n                 cryptol:/Parameters/Fp\n                 P\n                 Q\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer\n                  x@5\n                  P)\n               (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer\n                  x@5\n                  Q))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@4 * x@1 * x@1 * x@1 * x@4)\n               (x@3\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@5\n               x@6)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = x@2\n      -> Prelude.Integer\n      x@5 = cryptol:/Parameters/E\n    }\n in (P : x@3)\n-> (Q : x@3)\n-> (a4 : Prelude.Integer)\n-> let { x@6 = cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer\n                 cryptol:/Parameters/Fp\n                 P\n                 Q\n                 a4\n                 Prelude.True\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer\n                  x@5\n                  P)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer\n                  x@5\n                  Q))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@4 * x@1 * x@1 * x@1 * x@4)\n               (x@3\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@5\n               x@6)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = x@2\n      -> Prelude.Integer\n      x@5 = cryptol:/Parameters/E\n    }\n in (P : x@3)\n-> let { x@6 = cryptol:/implementation/CurveOperation/point_double\n                 Prelude.Integer\n                 cryptol:/Parameters/Fp\n                 P\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n               x@5\n               P)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@4 * x@1 * x@1 * x@1 * x@4)\n               (x@3\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@5\n               x@6)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = x@2\n      -> Prelude.Integer\n      x@5 = cryptol:/Parameters/E\n    }\n in (P : x@3)\n-> let { x@6 = cryptol:/implementation/CurveOperation/point_neg Prelude.Integer\n                 cryptol:/Parameters/Fp\n                 P\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n               x@5\n               P)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@4 * x@1 * x@1 * x@1 * x@4)\n               (x@3\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@5\n               x@6)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = x@2\n      -> Prelude.Integer\n      x@4 = cryptol:/Parameters/E\n      x@5 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p : (x@5 * x@5 * x@5))\n-> let { x@6 = cryptol:/implementation/CurveOperation/POINTonE1_abs\n                 (llvm:/POINTonE1_times_c p)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@4\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n               x@4\n               (cryptol:/implementation/CurveOperation/POINTonE1_abs p))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@3 * x@3 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@3 * x@1 * x@1 * x@1 * x@3)\n               ((Prelude.Integer * x@2)\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@4\n               x@6)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = x@2\n      -> Prelude.Integer\n      x@4 = cryptol:/Parameters/E\n    }\n in (P : x@2)\n-> let { x@5 = cryptol:/ShortWeierstrassCurve/projectify Prelude.Integer x@4 P\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@4\n            x@5)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer\n                  x@4\n                  P)\n               (Cryptol.ecCompl Prelude.Bool Cryptol.PLogicBit\n                  (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@4\n                     P)))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@3 * x@3 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@3 * x@1 * x@1 * x@1 * x@3)\n               ((Prelude.Integer * x@2)\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@4\n               x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = x@2\n      -> Prelude.Integer\n      x@4 = x@2\n      -> Prelude.Bool\n      x@5 = cryptol:/Parameters/E\n      x@6 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (P : (x@6 * x@6))\n-> let { x@7 = cryptol:/implementation/CurveOperation/POINTonE1_affine_abs P\n         x@8 = cryptol:sigma#6200 (cryptol:sigma#6200 x@7)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@5 x@8)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/CurveOperation/POINTonE1_affine_invariant\n               P)\n            (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@5 x@7)\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@3 * x@3 * Prelude.Integer * Prelude.Integer * x@1 * x@4 * (Prelude.Integer\n                                                                                                                 -> Prelude.Bool) * x@3 * x@1 * x@1 * x@1 * x@3)\n               x@4\n               (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer)\n               x@5\n               x@8)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = x@2\n      -> Prelude.Integer\n      x@4 = x@2\n      -> Prelude.Bool\n      x@5 = cryptol:/Parameters/E\n      x@6 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (P : (x@6 * x@6))\n-> let { x@7 = cryptol:/implementation/CurveOperation/POINTonE1_affine_abs P\n         x@8 = cryptol:sigma#6200 x@7\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@5 x@8)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/CurveOperation/POINTonE1_affine_invariant\n               P)\n            (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@5 x@7)\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@3 * x@3 * Prelude.Integer * Prelude.Integer * x@1 * x@4 * (Prelude.Integer\n                                                                                                                 -> Prelude.Bool) * x@3 * x@1 * x@1 * x@1 * x@3)\n               x@4\n               (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer)\n               x@5\n               x@8)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = x@2\n      -> Prelude.Integer\n      x@4 = x@2\n      -> Prelude.Bool\n      x@5 = cryptol:/Parameters/E\n    }\n in (P : x@2)\n-> let { x@6 = cryptol:sigma#6200 P\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer x@5\n               P)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@3 * x@3 * Prelude.Integer * Prelude.Integer * x@1 * x@4 * (Prelude.Integer\n                                                                                                                 -> Prelude.Bool) * x@3 * x@1 * x@1 * x@1 * x@3)\n               x@4\n               (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer)\n               x@5\n               x@6)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 10) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 11) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 12) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 13) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 14) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 15) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 16) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 3) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 4) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 5) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 6) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 7) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 8) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 9) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:affinify_E#6142 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6130 x@3)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger)\n            (cryptol:affinify_E#6142 (cryptol:small_mult#6154 x@2 p1))\n            (cryptol:e1_scalar_mult#6131 x@2 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Bool * x@1\n      x@3 = cryptol:/Maybe/nothing x@1\n              (Cryptol.PZeroInteger,Cryptol.PZeroInteger)\n      x@4 = Cryptol.PEqPair Prelude.Bool x@1 Cryptol.PEqBit\n              (Cryptol.PEqPair Prelude.Integer Prelude.Integer\n                 Cryptol.PEqInteger\n                 Cryptol.PEqInteger)\n    }\n in (s : Prelude.Vec 48 (Prelude.Vec 8 Prelude.Bool))\n-> Prelude.EqTrue\n     (cryptol:/Cryptol/==%3e\n        (Cryptol.ecEq x@2 x@4 (cryptol:/Serialization/uncompress_E1 s) x@3)\n        (Cryptol.ecEq x@2 x@4\n           (cryptol:/implementation/serialization/uncompress_E1_imp s)\n           x@3))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n      x@3 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n      x@4 = x@3 * x@3 * x@3\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/POINTonE1_abs\n           (Prelude.ite x@4 c p1 p2))\n        (Prelude.ite x@2 c\n           (cryptol:/implementation/CurveOperation/POINTonE1_abs p1)\n           (cryptol:/implementation/CurveOperation/POINTonE1_abs p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : x@2)\n-> (p2 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_add_affine Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1\n           p2)\n        (Prelude.ite x@2\n           (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger p1.2.2\n              (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n                 Cryptol.PLiteralInteger))\n           (cryptol:/ShortWeierstrassCurve/projectify Prelude.Integer x@3 p2)\n           (cryptol:/implementation/CurveOperation/p_add_madd_2007_bl\n              Prelude.Integer\n              x@3\n              p1\n              p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> (a4 : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n           (cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1\n              p2\n              a4\n              Prelude.True))\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@3\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3 p1)\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3 p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n           (cryptol:/implementation/CurveOperation/point_add Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1\n              p2))\n        (cryptol:add'#6082 Prelude.Integer Cryptol.PEqInteger x@3\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3 p1)\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3 p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n      x@3 = cryptol:/Parameters/Fp\n    }\n in (c : Prelude.Bool)\n-> (P : x@2)\n-> (Q1 : x@2)\n-> (Q2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@3 P\n           (Prelude.ite x@2 c Q1 Q2))\n        (Prelude.ite x@2 c\n           (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@3\n              P\n              Q1)\n           (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@3\n              P\n              Q2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n      x@3 = cryptol:/Parameters/Fp\n    }\n in (c : Prelude.Bool)\n-> (P1 : x@2)\n-> (P2 : x@2)\n-> (Q : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@3\n           (Prelude.ite x@2 c P1 P2)\n           Q)\n        (Prelude.ite x@2 c\n           (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@3\n              P1\n              Q)\n           (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@3\n              P2\n              Q)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n      x@3 = cryptol:/Parameters/Fp\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_neg Prelude.Integer x@3\n           (Prelude.ite x@2 c p1 p2))\n        (Prelude.ite x@2 c\n           (cryptol:/implementation/CurveOperation/point_neg Prelude.Integer x@3\n              p1)\n           (cryptol:/implementation/CurveOperation/point_neg Prelude.Integer x@3\n              p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n      x@3 = cryptol:/Parameters/Fp\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_double Prelude.Integer x@3\n           p1)\n        (cryptol:/implementation/CurveOperation/p_double_a0_l Prelude.Integer\n           x@3\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:point_neg_fp#6145 (Prelude.ite x@2 c p1 p2))\n        (Prelude.ite x@2 c (cryptol:point_neg_fp#6145 p1)\n           (cryptol:point_neg_fp#6145 p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (p : x@2)\n-> let { x@3 = cryptol:small_nonnegative_mult#6153 (Prelude.natToInt 0) p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n               Cryptol.PEqInteger))\n         (cryptol:point_neg_fp#6145 x@3)\n         x@3)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (p1 : x@2)\n-> (booth_index : Prelude.Vec 64 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/POINTonE1_abs\n           (cryptol:booth'#6163 (cryptol:precomputed_table#6152 p1)\n              booth_index))\n        (cryptol:small_mult#6154 (cryptol:booth_exponent#6172 booth_index) p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (p1 : x@2)\n-> (p2 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_add_affine Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1\n           p2)\n        (cryptol:point_add_affine_fp#6149 p1 p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (p1 : x@2)\n-> (p2 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_dadd_affine\n           Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1\n           p2)\n        (cryptol:point_dadd_affine_fp#6147 p1 p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> (a4 : Prelude.Integer)\n-> (c : Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1\n           p2\n           a4\n           c)\n        (cryptol:point_dadd_fp#6148 p1 p2 a4 c))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_add Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1\n           p2)\n        (cryptol:point_add_fp#6150 p1 p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/POINTonE1_abs\n           (cryptol:/implementation/CurveOperation/POINTonE1_rep p1))\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1)\n        (cryptol:point_double_fp#6146 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/CurveOperation/point_neg Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1)\n        (cryptol:point_neg_fp#6145 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = Prelude.Integer * x@1\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:small_nonnegative_mult#6153 (Prelude.natToInt 1) p1)\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = cryptol:/Parameters/E\n    }\n in (P : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@2\n           (cryptol:/ShortWeierstrassCurve/projectify Prelude.Integer x@2 P))\n        P)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = cryptol:/Parameters/E\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> (p2 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@2\n           (cryptol:/implementation/CurveOperation/point_add_affine\n              Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1\n              p2))\n        (cryptol:add'#6082 Prelude.Integer Cryptol.PEqInteger x@2\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@2 p1)\n           p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = cryptol:/Parameters/E\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> (p2 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@2\n           (cryptol:/implementation/CurveOperation/point_dadd_affine\n              Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1\n              p2))\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@2\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@2 p1)\n           p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = cryptol:/Parameters/E\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@2\n           (cryptol:/implementation/CurveOperation/point_neg Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1))\n        (cryptol:/ShortWeierstrassCurve/neg Prelude.Integer x@2\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@2 p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = cryptol:/Parameters/E\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> let { x@3 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@2 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@2\n            (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n               cryptol:/Parameters/Fp\n               p1))\n         (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@2 x@3 x@3))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = cryptol:/Parameters/E\n    }\n in (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@2\n           (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer x@2)\n           p1)\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = cryptol:/Parameters/E\n    }\n in (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@2 p1\n           (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer x@2))\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n      x@2 = cryptol:/Parameters/E\n    }\n in (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:e1_scalar_mult#6131\n           (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n              Cryptol.PLiteralInteger)\n           p1)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@2 p1\n           (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer x@2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (P : x@1)\n-> let { x@2 = cryptol:/implementation/CurveOperation/POINTonE1_rep\n                 (cryptol:/ShortWeierstrassCurve/projectify Prelude.Integer\n                    cryptol:/Parameters/E\n                    P)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n            Cryptol.PEqInteger)\n         (cryptol:/implementation/CurveOperation/POINTonE1_affine_abs\n            (x@2.1,x@2.2.1))\n         P)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (c : Prelude.Bool)\n-> (P : x@1)\n-> (Q : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:e1_scalar_mult#6131 k (Prelude.ite x@1 c P Q))\n        (Prelude.ite x@1 c (cryptol:e1_scalar_mult#6131 k P)\n           (cryptol:e1_scalar_mult#6131 k Q)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer\n           cryptol:/Parameters/E\n           (cryptol:e1_scalar_mult#6131 k p1)\n           (cryptol:e1_scalar_mult#6131 k' p1))\n        (cryptol:e1_scalar_mult#6131\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k k')\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:add'#6082 Prelude.Integer Cryptol.PEqInteger\n           cryptol:/Parameters/E\n           (cryptol:e1_scalar_mult#6131 k p1)\n           (cryptol:e1_scalar_mult#6131 k' p1))\n        (cryptol:e1_scalar_mult#6131\n           (cryptol:add_exponents'#6135 k k' (cryptol:e1_order#6130 p1))\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:e1_scalar_mult#6131 k (cryptol:e1_scalar_mult#6131 k' p1))\n        (cryptol:e1_scalar_mult#6131\n           (Cryptol.ecMul Prelude.Integer Cryptol.PRingInteger k k')\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer\n           cryptol:/Parameters/E\n           (cryptol:e1_scalar_mult#6131 k p1)\n           p1)\n        (cryptol:e1_scalar_mult#6131\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer\n           cryptol:/Parameters/E\n           p1\n           (cryptol:e1_scalar_mult#6131 k p1))\n        (cryptol:e1_scalar_mult#6131\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/neg Prelude.Integer\n           cryptol:/Parameters/E\n           (cryptol:e1_scalar_mult#6131 k p1))\n        (cryptol:e1_scalar_mult#6131\n           (Cryptol.ecNeg Prelude.Integer Cryptol.PRingInteger k)\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:add'#6082 Prelude.Integer Cryptol.PEqInteger\n           cryptol:/Parameters/E\n           (cryptol:e1_scalar_mult#6131 k p1)\n           p1)\n        (cryptol:e1_scalar_mult#6131\n           (cryptol:add_exponents'#6135 k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger)\n              (cryptol:e1_order#6130 p1))\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:add'#6082 Prelude.Integer Cryptol.PEqInteger\n           cryptol:/Parameters/E\n           p1\n           (cryptol:e1_scalar_mult#6131 k p1))\n        (cryptol:e1_scalar_mult#6131\n           (cryptol:add_exponents'#6135 k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger)\n              (cryptol:e1_order#6130 p1))\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> (i : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:affinify_E#6142 (cryptol:small_mult#6154 i p1))\n        (cryptol:e1_scalar_mult#6131 i (cryptol:affinify_E#6142 p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n           cryptol:/Parameters/E\n           p1)\n        (cryptol:affinify_E#6142 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@1)\n-> (p2 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer\n           cryptol:/Parameters/E\n           p1\n           p2)\n        (cryptol:add_E#6144 p1 p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@1)\n-> (p2 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:add'#6082 Prelude.Integer Cryptol.PEqInteger\n           cryptol:/Parameters/E\n           p1\n           p2)\n        (cryptol:add'_E#6143 p1 p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Integer * x@1)\n        (Cryptol.PEqPair Prelude.Integer x@1 Cryptol.PEqInteger\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n              Cryptol.PEqInteger))\n        (cryptol:/ShortWeierstrassCurve/projectify Prelude.Integer\n           cryptol:/Parameters/E\n           p1)\n        (cryptol:projectify_E#6141 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer\n           cryptol:/Parameters/E\n           p1\n           p1)\n        (cryptol:e1_scalar_mult#6131\n           (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PLiteralInteger)\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:e1_scalar_mult#6131 (Prelude.natToInt 0) p1)\n        (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer\n           cryptol:/Parameters/E))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:e1_scalar_mult#6131 (Prelude.natToInt 1) p1)\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer * Prelude.Integer\n    }\n in (c : Prelude.Bool)\n-> (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Prelude.ite x@1 c x y).2.1\n        (Prelude.ite Prelude.Integer c x.2.1 y.2.1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer * Prelude.Integer\n    }\n in (c : Prelude.Bool)\n-> (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Prelude.ite x@1 c x y).2.2\n        (Prelude.ite Prelude.Integer c x.2.2 y.2.2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Integer * Prelude.Integer * Prelude.Integer\n    }\n in (c : Prelude.Bool)\n-> (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (Prelude.ite x@1 c x y).1\n        (Prelude.ite Prelude.Integer c x.1 y.1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n      x@2 = x@1 * x@1 * x@1\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE2_invariant\n           (Prelude.ite x@2 c p1 p2))\n        (Prelude.ite Prelude.Bool c\n           (cryptol:/implementation/CurveOperation/POINTonE2_invariant p1)\n           (cryptol:/implementation/CurveOperation/POINTonE2_invariant p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Bool)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp2_invariant (Prelude.ite x@1 x y z))\n        (Prelude.ite Prelude.Bool x\n           (cryptol:/implementation/Field/fp2_invariant y)\n           (cryptol:/implementation/Field/fp2_invariant z)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (p1 : (x@1 * x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Cryptol/all (Cryptol.TCNum 16) (x@2 * x@2 * x@2)\n           cryptol:/implementation/CurveOperation/POINTonE2_invariant\n           (cryptol:precomputed_table#6294 p1))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Bool)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Field/fp2_abs (Prelude.ite x@2 x y z))\n        (Prelude.ite x@1 x (cryptol:/implementation/Field/fp2_abs y)\n           (cryptol:/implementation/Field/fp2_abs z)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n      x@3 = x@2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x,x@3.1))\n        (x@3.2.2.2.2.2.2.1 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n      x@3 = x@2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x@3.1,x))\n        (x@3.2.2.2.2.2.2.1 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n      x@3 = x@2.2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (x@2.1 (x,y)))\n        (x@2.1 (x@3.1 x,x@3.1 y)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n      x@3 = x@2.2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.2.2.2 (x,y))\n        (x@2.1 (x,x@3.1 y)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x@2.1 (x,y),z))\n        (x@2.1 (x,x@2.1 (y,z))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2\n      x@3 = x@2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (e : Prelude.Integer)\n-> let { x@4 = cryptol:fp2_exp#6233 x e\n         x@5 = (x@2.1,x@4)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (x@3.1 x@5)\n         (Prelude.ite x@1\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger e\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                  Cryptol.PLiteralInteger))\n            x@4\n            (cryptol:/implementation/CryptolHelpers/apply (x@1 * x@1) x@1 x@3.1\n               x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2\n      x@3 = x@2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> let { x@4 = x@3.1 (x,y)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (x@3.1 (x@2.1,x@4))\n         x@4)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2\n      x@3 = x@2.2.2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (x,x@2.1))\n        (x@3.2.2.1 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2\n      x@3 = x@2.2.2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (x@2.1,x))\n        (x@3.2.2.1 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2\n      x@3 = x@2.1\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.2.2.2.2.1 (x,x@3))\n        x@3)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2\n      x@3 = x@2.1\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.2.2.2.2.1 (x@3,x))\n        x@3)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2\n      x@3 = x@2.2.2\n      x@4 = x@3.2\n    }\n in (p : (x@1 * x@1 * x@1))\n-> let { x@5 = p.2\n         x@6 = x@5.2\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecCompl Prelude.Bool Cryptol.PLogicBit (x@3.1 (x@6,x@2.1)))\n         (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n            (cryptol:/ShortWeierstrassCurve/is_point_projective x@1\n               cryptol:/Parameters/E'\n               p)\n            (cryptol:/Cryptol/%2f%5c (x@4.1 p.1)\n               (cryptol:/Cryptol/%2f%5c (x@4.1 x@5.1)\n                  (cryptol:/Cryptol/%2f%5c (x@4.1 x@6)\n                     (cryptol:/implementation/CurveOperation/POINTonE2_on_curve\n                        p))))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2\n    }\n in (p : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_affine x@1\n           cryptol:/Parameters/E'\n           p)\n        (cryptol:/Cryptol/%2f%5c (x@2.1 p.1)\n           (cryptol:/Cryptol/%2f%5c (x@2.1 p.2)\n              (cryptol:/implementation/CurveOperation/POINTonE2_affine_on_curve\n                 p))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n      x@3 = x@2.2.2.2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : x@1)\n-> (y : x@1)\n-> (C : x@1)\n-> let { x@5 = x@2.1 (cryptol:/BLSFieldExtras/sqrt_fp2_c3,x)\n         x@6 = x@2.1 (cryptol:/BLSFieldExtras/sqrt_fp2_c2,x)\n         x@7 = Cryptol.ecEq x@1 x@4 (x@3.1 x@5) y\n         x@8 = Cryptol.ecEq x@1 x@4 (x@3.1 x@6) y\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1 x@4\n         (Prelude.ite x@1 x@7 x@5 (Prelude.ite x@1 x@8 x@6 C))\n         (Prelude.ite x@1 x@8 x@6 (Prelude.ite x@1 x@7 x@5 C)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n      x@3 = x@2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (x@2.1 (x,y)))\n        (x@2.1 (x@3.1 x,x@3.1 y)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (c : Prelude.Bool)\n-> (x : x@1)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (Prelude.ite x@1 c x y,z))\n        (Prelude.ite x@1 c (x@2.1 (x,z)) (x@2.1 (y,z))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (c : Prelude.Bool)\n-> (x : x@1)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (z,Prelude.ite x@1 c x y))\n        (Prelude.ite x@1 c (x@2.1 (z,x)) (x@2.1 (z,y))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x@2.1 (x,y),z))\n        (x@2.1 (x,x@2.1 (y,z))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.2.2.2.1 x)\n        (x@2.1 (x,x)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x@2.1 x))\n        (x@2.2.1 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 10) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 11) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 12) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 13) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 14) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 15) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 16) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 3) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 5) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 6) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 7) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 8) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 9) Prelude.Integer\n              Cryptol.PLiteralInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@4 p1))\n            (cryptol:e2_scalar_mult#6277 x@4 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> (booth_index : Prelude.Vec 64 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/POINTonE2_abs\n           (cryptol:booth'#6305 (cryptol:precomputed_table#6294 p1)\n              booth_index))\n        (cryptol:small_mult#6296 (cryptol:booth_exponent#6314 booth_index) p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_add_affine x@1\n           cryptol:/Parameters/Fp_2\n           p1\n           p2)\n        (cryptol:point_add_affine_fp#6291 p1 p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_dadd_affine x@1\n           cryptol:/Parameters/Fp_2\n           p1\n           p2)\n        (cryptol:point_dadd_affine_fp#6289 p1 p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> (p2 : x@4)\n-> (a4 : x@1)\n-> (c : Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_dadd x@1\n           cryptol:/Parameters/Fp_2\n           p1\n           p2\n           a4\n           c)\n        (cryptol:point_dadd_fp#6290 p1 p2 a4 c))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_add x@1\n           cryptol:/Parameters/Fp_2\n           p1\n           p2)\n        (cryptol:point_add_fp#6292 p1 p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_double x@1\n           cryptol:/Parameters/Fp_2\n           p1)\n        (cryptol:point_double_fp#6288 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_neg x@1\n           cryptol:/Parameters/Fp_2\n           p1)\n        (cryptol:point_neg_fp#6287 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> (i : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 i p1))\n        (cryptol:e2_scalar_mult#6277 i (cryptol:affinify_E'#6284 p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 cryptol:/Parameters/E' p1)\n        (cryptol:affinify_E'#6284 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/add x@1 cryptol:/Parameters/E' p1 p2)\n        (cryptol:add_E'#6286 p1 p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add'#6082 x@1 x@3 cryptol:/Parameters/E' p1 p2)\n        (cryptol:add'_E'#6285 p1 p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (x@1 * x@2)\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/ShortWeierstrassCurve/projectify x@1 cryptol:/Parameters/E'\n           p1)\n        (cryptol:projectify_E'#6283 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (s : Prelude.Vec 96 (Prelude.Vec 8 Prelude.Bool))\n-> Prelude.EqTrue\n     (cryptol:/Maybe/maybe_cases x@2 Prelude.Bool\n        (cryptol:/implementation/SerializationP2/uncompress_E2_imp s)\n        Prelude.True\n        (\\(P : x@2) ->\n           cryptol:/Maybe/maybe_cases x@2 Prelude.Bool\n             (cryptol:uncompress_E2#6574 s)\n             Prelude.False\n             (\\(Q : x@2) ->\n                Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3) P Q)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (c : Prelude.Bool)\n-> (P : x@2)\n-> (Q : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:e2_scalar_mult#6277 k (Prelude.ite x@2 c P Q))\n        (Prelude.ite x@2 c (cryptol:e2_scalar_mult#6277 k P)\n           (cryptol:e2_scalar_mult#6277 k Q)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/add x@1 cryptol:/Parameters/E'\n           (cryptol:e2_scalar_mult#6277 k p1)\n           (cryptol:e2_scalar_mult#6277 k' p1))\n        (cryptol:e2_scalar_mult#6277 (Prelude.intAdd k k') p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add'#6082 x@1 x@3 cryptol:/Parameters/E'\n           (cryptol:e2_scalar_mult#6277 k p1)\n           (cryptol:e2_scalar_mult#6277 k' p1))\n        (cryptol:e2_scalar_mult#6277\n           (cryptol:add_exponents'#6135 k k' (cryptol:e2_order#6276 p1))\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:e2_scalar_mult#6277 k (cryptol:e2_scalar_mult#6277 k' p1))\n        (cryptol:e2_scalar_mult#6277 (Prelude.intMul k k') p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/add x@1 cryptol:/Parameters/E'\n           (cryptol:e2_scalar_mult#6277 k p1)\n           p1)\n        (cryptol:e2_scalar_mult#6277 (Prelude.intAdd k (Prelude.natToInt 1))\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/add x@1 cryptol:/Parameters/E' p1\n           (cryptol:e2_scalar_mult#6277 k p1))\n        (cryptol:e2_scalar_mult#6277 (Prelude.intAdd k (Prelude.natToInt 1))\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/neg x@1 cryptol:/Parameters/E'\n           (cryptol:e2_scalar_mult#6277 k p1))\n        (cryptol:e2_scalar_mult#6277 (Prelude.intNeg k) p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add'#6082 x@1 x@3 cryptol:/Parameters/E'\n           (cryptol:e2_scalar_mult#6277 k p1)\n           p1)\n        (cryptol:e2_scalar_mult#6277\n           (cryptol:add_exponents'#6135 k (Prelude.natToInt 1)\n              (cryptol:e2_order#6276 p1))\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add'#6082 x@1 x@3 cryptol:/Parameters/E' p1\n           (cryptol:e2_scalar_mult#6277 k p1))\n        (cryptol:e2_scalar_mult#6277\n           (cryptol:add_exponents'#6135 k (Prelude.natToInt 1)\n              (cryptol:e2_order#6276 p1))\n           p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/add x@1 cryptol:/Parameters/E' p1 p1)\n        (cryptol:e2_scalar_mult#6277 (Prelude.natToInt 2) p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:e2_scalar_mult#6277 (Prelude.natToInt 0) p1)\n        (cryptol:/ShortWeierstrassCurve/point_O x@1 cryptol:/Parameters/E'))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:e2_scalar_mult#6277 (Prelude.natToInt 1) p1)\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 4) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:affinify_E'#6284 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6276 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n               Cryptol.PLiteralInteger))\n         (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n            (cryptol:affinify_E'#6284 (cryptol:small_mult#6296 x@3 p1))\n            (cryptol:e2_scalar_mult#6277 x@3 x@5)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n      x@4 = x@3 * x@3 * x@3\n      x@5 = x@1 * x@2\n      x@6 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqPair x@1 x@2 x@6 (Cryptol.PEqPair x@1 x@1 x@6 x@6))\n        (cryptol:/implementation/CurveOperation/POINTonE2_abs\n           (Prelude.ite x@4 c p1 p2))\n        (Prelude.ite x@5 c\n           (cryptol:/implementation/CurveOperation/POINTonE2_abs p1)\n           (cryptol:/implementation/CurveOperation/POINTonE2_abs p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@5 = x@1 * x@2\n    }\n in (p1 : x@5)\n-> (p2 : x@5)\n-> (a4 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_dadd x@1\n              cryptol:/Parameters/Fp_2\n              p1\n              p2\n              a4\n              Prelude.True))\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1)\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@5 = x@1 * x@2\n    }\n in (p1 : x@5)\n-> (p2 : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_add x@1\n              cryptol:/Parameters/Fp_2\n              p1\n              p2))\n        (cryptol:add'#6082 x@1 x@4 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1)\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_add_affine x@1\n              cryptol:/Parameters/Fp_2\n              p1\n              p2))\n        (cryptol:add'#6082 x@1 x@4 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1)\n           p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_dadd_affine x@1\n              cryptol:/Parameters/Fp_2\n              p1\n              p2))\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1)\n           p2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_neg x@1\n              cryptol:/Parameters/Fp_2\n              p1))\n        (cryptol:/ShortWeierstrassCurve/neg x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n         (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n            (cryptol:/implementation/CurveOperation/point_double x@1\n               cryptol:/Parameters/Fp_2\n               p1))\n         (cryptol:/ShortWeierstrassCurve/add x@1 x@3 x@5 x@5))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:e2_scalar_mult#6277\n           (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n              Cryptol.PLiteralInteger)\n           p1)\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3 p1\n           (cryptol:/ShortWeierstrassCurve/point_O x@1 x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/point_O x@1 x@3)\n           p1)\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3 p1\n           (cryptol:/ShortWeierstrassCurve/point_O x@1 x@3))\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/Fp_2\n      x@4 = x@1 * x@2\n      x@5 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (c : Prelude.Bool)\n-> (P : x@4)\n-> (Q1 : x@4)\n-> (Q2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@5 (Cryptol.PEqPair x@1 x@1 x@5 x@5))\n        (cryptol:/implementation/CurveOperation/point_add x@1 x@3 P\n           (Prelude.ite x@4 c Q1 Q2))\n        (Prelude.ite x@4 c\n           (cryptol:/implementation/CurveOperation/point_add x@1 x@3 P Q1)\n           (cryptol:/implementation/CurveOperation/point_add x@1 x@3 P Q2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/Fp_2\n      x@4 = x@1 * x@2\n      x@5 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (c : Prelude.Bool)\n-> (P1 : x@4)\n-> (P2 : x@4)\n-> (Q : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@5 (Cryptol.PEqPair x@1 x@1 x@5 x@5))\n        (cryptol:/implementation/CurveOperation/point_add x@1 x@3\n           (Prelude.ite x@4 c P1 P2)\n           Q)\n        (Prelude.ite x@4 c\n           (cryptol:/implementation/CurveOperation/point_add x@1 x@3 P1 Q)\n           (cryptol:/implementation/CurveOperation/point_add x@1 x@3 P2 Q)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/Fp_2\n      x@4 = x@1 * x@2\n      x@5 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@5 (Cryptol.PEqPair x@1 x@1 x@5 x@5))\n        (cryptol:/implementation/CurveOperation/point_neg x@1 x@3\n           (Prelude.ite x@4 c p1 p2))\n        (Prelude.ite x@4 c\n           (cryptol:/implementation/CurveOperation/point_neg x@1 x@3 p1)\n           (cryptol:/implementation/CurveOperation/point_neg x@1 x@3 p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@1 * x@2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@3)\n-> (p2 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair x@1 x@2 x@4 (Cryptol.PEqPair x@1 x@1 x@4 x@4))\n        (cryptol:point_neg_fp#6287 (Prelude.ite x@3 c p1 p2))\n        (Prelude.ite x@3 c (cryptol:point_neg_fp#6287 p1)\n           (cryptol:point_neg_fp#6287 p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@1 * x@2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p : x@3)\n-> let { x@5 = cryptol:small_nonnegative_mult#6295 (Prelude.natToInt 0) p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair x@1 x@2 x@4 (Cryptol.PEqPair x@1 x@1 x@4 x@4))\n         (cryptol:point_neg_fp#6287 x@5)\n         x@5)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@1 * x@2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair x@1 x@2 x@4 (Cryptol.PEqPair x@1 x@1 x@4 x@4))\n        (cryptol:/implementation/CurveOperation/POINTonE2_abs\n           (cryptol:/implementation/CurveOperation/POINTonE2_rep p1))\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@1 * x@2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair x@1 x@2 x@4 (Cryptol.PEqPair x@1 x@1 x@4 x@4))\n        (cryptol:small_nonnegative_mult#6295 (Prelude.natToInt 1) p1)\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1 * x@1\n    }\n in (x : Prelude.Bool)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (Prelude.ite x@2 x y z).1\n        (Prelude.ite x@1 x y.1 z.1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1 * x@1\n    }\n in (x : Prelude.Bool)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (Prelude.ite x@2 x y z).2.1\n        (Prelude.ite x@1 x y.2.1 z.2.1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1 * x@1\n    }\n in (x : Prelude.Bool)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (Prelude.ite x@2 x y z).2.2\n        (Prelude.ite x@1 x y.2.2 z.2.2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (p1 : (x@1 * x@1 * x@1))\n-> (booth_index : Prelude.Vec 64 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE2_invariant\n           (cryptol:booth'#6305 (cryptol:precomputed_table#6294 p1)\n              booth_index))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (p1 : (x@1 * x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_projective x@1\n           cryptol:/Parameters/E'\n           p1)\n        (cryptol:is_point_projective_E'#6281 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (p1 : (x@1 * x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE2_invariant\n           (cryptol:/implementation/CurveOperation/POINTonE2_rep p1))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (p1 : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_affine x@1\n           cryptol:/Parameters/E'\n           p1)\n        (cryptol:is_point_affine_E'#6282 p1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (s : x@1)\n-> (inp : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:sqrt_align_fp2_coeff#6240 s inp)\n        (cryptol:sqrt_align_fp2_coeff'#6243 s inp))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.1 x)\n        (cryptol:ef_add_fp#6228 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 x)\n        (cryptol:ef_mul_fp#6230 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.2.2 x)\n        (cryptol:ef_sub_fp#6227 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 (cryptol:fp2_exp#6233 x k,x))\n        (cryptol:fp2_exp#6233 x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 (x,cryptol:fp2_exp#6233 x k))\n        (cryptol:fp2_exp#6233 x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (n : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1\n           (cryptol:fp2_exp#6233 x n,cryptol:fp2_exp#6233 x k))\n        (cryptol:fp2_exp#6233 x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k n)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (n : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_exp#6233 (cryptol:fp2_exp#6233 x n) k)\n        (cryptol:fp2_exp#6233 x\n           (Cryptol.ecMul Prelude.Integer Cryptol.PRingInteger k n)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.1 (x,y))\n        (Cryptol.ecEq x@1\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n           x\n           y))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.1 x)\n        (cryptol:ef_neg_fp#6226 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.2.1 x)\n        (cryptol:ef_sq_fp#6229 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Field/fp2_abs\n           (cryptol:/implementation/Field/fp2_rep x))\n        x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/FieldExtras/F_expt x@1 (Cryptol.TCNum 759)\n           cryptol:/Parameters/Fp_2\n           x\n           (Prelude.bvNat 759\n              1001205140483106588246484290269935788605945006208159541241399033561623546780709821462541004956387089373434649096260670658193992783731681621012512651314777238193313314641988297376025498093520728838658813979860931248214124593092836))\n        (cryptol:fp2_exp#6233 x\n           (Prelude.natToInt\n              1001205140483106588246484290269935788605945006208159541241399033561623546780709821462541004956387089373434649096260670658193992783731681621012512651314777238193313314641988297376025498093520728838658813979860931248214124593092836)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        [Prelude.at 2 Prelude.Integer x 0, Prelude.at 2 Prelude.Integer x 1]\n        x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 256 Prelude.Bool\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/Main/vec256_abs (cryptol:/Main/vec256_rep x))\n        x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n      x@2 = Prelude.Vec 2 x@1\n    }\n in (b : Prelude.Bool)\n-> (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Prelude.eq x@1 (Prelude.at 2 x@1 (Prelude.ite x@2 b x y) 0)\n        (Prelude.ite x@1 b (Prelude.at 2 x@1 x 0) (Prelude.at 2 x@1 y 0)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n      x@2 = Prelude.Vec 2 x@1\n    }\n in (b : Prelude.Bool)\n-> (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Prelude.eq x@1 (Prelude.at 2 x@1 (Prelude.ite x@2 b x y) 1)\n        (Prelude.ite x@1 b (Prelude.at 2 x@1 x 1) (Prelude.at 2 x@1 y 1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n      x@2 = x@1 * x@1\n    }\n in (q : (x@1 * x@2))\n-> let { x@3 = (q.1,q.2.1)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/CurveOperation/POINTonE1_affine_invariant x@3)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/CurveOperation/POINTonE1_invariant q)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool\n               cryptol:/implementation/CurveOperation/POINTonE1_affine_invariant\n               x@3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n      x@2 = x@1 * x@1 * x@1\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE1_invariant\n           (Prelude.ite x@2 c p1 p2))\n        (Prelude.ite Prelude.Bool c\n           (cryptol:/implementation/CurveOperation/POINTonE1_invariant p1)\n           (cryptol:/implementation/CurveOperation/POINTonE1_invariant p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p : (x@1 * x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE1_invariant\n           (llvm:/POINTonE1_times_c p))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p : (x@1 * x@1 * x@1))\n-> let { x@2 = p.2.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp_invariant x@2)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/CurveOperation/POINTonE1_invariant p)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@1 Prelude.Bool\n               cryptol:/implementation/Field/fp_invariant\n               x@2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Cryptol/all (Cryptol.TCNum 16) (x@1 * x@1 * x@1)\n           cryptol:/implementation/CurveOperation/POINTonE1_invariant\n           (cryptol:precomputed_table#6152 p1))\n        Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : Prelude.Bool)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant (Prelude.ite x@1 x y z))\n        (Prelude.ite Prelude.Bool x\n           (cryptol:/implementation/Field/fp_invariant y)\n           (cryptol:/implementation/Field/fp_invariant z)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : Prelude.Bool)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fp_abs (Prelude.ite x@1 x y z))\n        (Prelude.ite Prelude.Integer x (cryptol:/implementation/Field/fp_abs y)\n           (cryptol:/implementation/Field/fp_abs z)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp2_invariant [x, y])\n        (cryptol:/Cryptol/%2f%5c (cryptol:/implementation/Field/fp_invariant x)\n           (cryptol:/implementation/Field/fp_invariant y)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue (Prelude.eq x@1 x x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue (Prelude.eq x@1 y y)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Cryptol.TCNum 2\n      x@3 = Cryptol.TCNum 64\n      x@4 = Cryptol.TCNum 6\n      x@5 = Prelude.Vec 6 x@1\n      x@6 = Prelude.Vec 2 x@5\n      x@7 = Cryptol.PEqSeq x@2 x@5\n              (Cryptol.PEqSeq x@4 x@1 (Cryptol.PEqSeqBool x@3))\n      x@8 = x@6 * x@6\n      x@9 = Cryptol.PZeroSeq x@2 x@5\n              (Cryptol.PZeroSeq x@4 x@1 (Cryptol.PZeroSeqBool x@3))\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@8 (Cryptol.PEqPair x@6 x@6 x@7 x@7)\n         (cryptol:/implementation/CurveOperation/POINTonE2_affine_rep\n            (cryptol:/ShortWeierstrassCurve/point_O\n               (Prelude.Vec 2 Prelude.Integer)\n               cryptol:/Parameters/E'))\n         (Cryptol.ecZero x@8 (x@9,x@9)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Cryptol.TCNum 64\n      x@3 = Cryptol.TCNum 6\n      x@4 = Prelude.Vec 6 x@1\n      x@5 = Cryptol.PEqSeq x@3 x@1 (Cryptol.PEqSeqBool x@2)\n      x@6 = x@4 * x@4\n      x@7 = Cryptol.PZeroSeq x@3 x@1 (Cryptol.PZeroSeqBool x@2)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@4 x@4 x@5 x@5)\n         (cryptol:/implementation/CurveOperation/POINTonE1_affine_rep\n            (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer\n               cryptol:/Parameters/E))\n         (Cryptol.ecZero x@6 (x@7,x@7)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Vec 6 x@1\n      x@4 = Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)\n      x@5 = x@3 * x@3\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5 (Cryptol.PEqPair x@3 x@3 x@4 x@4)\n        (cryptol:/implementation/CurveOperation/POINTonE1_affine_rep\n           (Prelude.ite x@2 c p1 p2))\n        (Prelude.ite x@5 c\n           (cryptol:/implementation/CurveOperation/POINTonE1_affine_rep p1)\n           (cryptol:/implementation/CurveOperation/POINTonE1_affine_rep p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Integer * Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Vec 6 x@1\n      x@4 = Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)\n      x@5 = x@3 * x@3\n      x@6 = x@3 * x@5\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqPair x@3 x@5 x@4 (Cryptol.PEqPair x@3 x@3 x@4 x@4))\n        (cryptol:/implementation/CurveOperation/POINTonE1_rep\n           (Prelude.ite x@2 c p1 p2))\n        (Prelude.ite x@6 c\n           (cryptol:/implementation/CurveOperation/POINTonE1_rep p1)\n           (cryptol:/implementation/CurveOperation/POINTonE1_rep p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 6 x@1\n      x@4 = Prelude.Vec 2 x@3\n      x@5 = Cryptol.PEqVec 2 x@3 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n      x@6 = x@4 * x@4\n      x@7 = Prelude.replicate 2 x@3\n              (Prelude.replicate 6 x@1 (Prelude.bvNat 64 0))\n    }\n in (p1 : (x@2 * x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (x@4 * x@6)\n        (Cryptol.PEqPair x@4 x@6 x@5 (Cryptol.PEqPair x@4 x@4 x@5 x@5))\n        (cryptol:/implementation/CurveOperation/POINTonE2_rep\n           (cryptol:small_nonnegative_mult#6295 (Prelude.natToInt 0) p1))\n        (x@7,x@7,x@7))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 6 x@1\n      x@4 = Prelude.Vec 2 x@3\n      x@5 = Cryptol.PEqVec 2 x@3 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n      x@6 = x@4 * x@4\n      x@7 = x@4 * x@6\n      x@8 = Prelude.replicate 2 x@3\n              (Prelude.replicate 6 x@1 (Prelude.bvNat 64 0))\n    }\n in (p1 : (x@2 * x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 17 x@7)\n        (Cryptol.PEqVec 17 x@7\n           (Cryptol.PEqPair x@4 x@6 x@5 (Cryptol.PEqPair x@4 x@4 x@5 x@5)))\n        (Prelude.append 1 16 x@7 [x@8,x@8,x@8]\n           (cryptol:precomputed_table#6294 p1))\n        (Prelude.map Prelude.Integer x@7\n           (\\(i : Prelude.Integer) ->\n              cryptol:/implementation/CurveOperation/POINTonE2_rep\n                (cryptol:small_nonnegative_mult#6295 i p1))\n           17\n           (Prelude.gen 17 Prelude.Integer\n              (\\(i : Prelude.Nat) -> Prelude.natToInt (Prelude.addNat i 0)))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 6 x@1\n      x@4 = Prelude.Vec 2 x@3\n      x@5 = Cryptol.PEqVec 2 x@3 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n      x@6 = x@4 * x@4\n      x@7 = x@4 * x@6\n      x@8 = x@2 * x@2 * x@2\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@8)\n-> (p2 : x@8)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqPair x@4 x@6 x@5 (Cryptol.PEqPair x@4 x@4 x@5 x@5))\n        (cryptol:/implementation/CurveOperation/POINTonE2_rep\n           (Prelude.ite x@8 c p1 p2))\n        (Prelude.ite x@7 c\n           (cryptol:/implementation/CurveOperation/POINTonE2_rep p1)\n           (cryptol:/implementation/CurveOperation/POINTonE2_rep p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 6 x@1\n      x@4 = Prelude.Vec 2 x@3\n    }\n in (x : Prelude.Bool)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) x@3\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@1\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (cryptol:/implementation/Field/fp2_rep (Prelude.ite x@2 x y z))\n        (Prelude.ite x@4 x (cryptol:/implementation/Field/fp2_rep y)\n           (cryptol:/implementation/Field/fp2_rep z)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Prelude.Vec 6 x@1\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = Cryptol.PEqVec 2 x@4 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n      x@7 = x@5 * x@5\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@3)\n-> (p2 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7 (Cryptol.PEqPair x@5 x@5 x@6 x@6)\n        (cryptol:/implementation/CurveOperation/POINTonE2_affine_rep\n           (Prelude.ite x@3 c p1 p2))\n        (Prelude.ite x@7 c\n           (cryptol:/implementation/CurveOperation/POINTonE2_affine_rep p1)\n           (cryptol:/implementation/CurveOperation/POINTonE2_affine_rep p2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 4 x@1\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqSeq (Cryptol.TCNum 4) x@1\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/Main/vec256_rep (cryptol:/Main/vec256_abs x))\n        x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)\n      x@4 = x@2 * x@2\n      x@5 = Prelude.replicate 6 x@1 (Prelude.bvNat 64 0)\n    }\n in (p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (x@2 * x@4)\n        (Cryptol.PEqPair x@2 x@4 x@3 (Cryptol.PEqPair x@2 x@2 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/POINTonE1_rep\n           (cryptol:small_nonnegative_mult#6153 (Prelude.natToInt 0) p1))\n        (x@5,x@5,x@5))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)\n      x@4 = x@2 * x@2\n      x@5 = x@2 * x@4\n      x@6 = Prelude.replicate 6 x@1 (Prelude.bvNat 64 0)\n    }\n in (p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 17 x@5)\n        (Cryptol.PEqVec 17 x@5\n           (Cryptol.PEqPair x@2 x@4 x@3 (Cryptol.PEqPair x@2 x@2 x@3 x@3)))\n        (Prelude.append 1 16 x@5 [x@6,x@6,x@6]\n           (cryptol:precomputed_table#6152 p1))\n        (Prelude.map Prelude.Integer x@5\n           (\\(i : Prelude.Integer) ->\n              cryptol:/implementation/CurveOperation/POINTonE1_rep\n                (cryptol:small_nonnegative_mult#6153 i p1))\n           17\n           (Prelude.gen 17 Prelude.Integer\n              (\\(i : Prelude.Nat) -> Prelude.natToInt (Prelude.addNat i 0)))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)\n      x@4 = x@2 * x@2\n      x@5 = x@2 * x@4\n    }\n in (c : Prelude.Bool)\n-> (x1 : x@2)\n-> (x2 : x@2)\n-> (x3 : x@2)\n-> (y1 : x@2)\n-> (y2 : x@2)\n-> (y3 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqPair x@2 x@4 x@3 (Cryptol.PEqPair x@2 x@2 x@3 x@3))\n        (Prelude.ite x@2 c x1 y1,\n         Prelude.ite x@2 c x2 y2,Prelude.ite x@2 c x3 y3)\n        (Prelude.ite x@5 c (x1,x2,x3) (y1,y2,y3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)\n      x@4 = x@2 * x@2\n      x@5 = x@2 * x@4\n    }\n in (p1 : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqPair x@2 x@4 x@3 (Cryptol.PEqPair x@2 x@2 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/POINTonE1_rep\n           (cryptol:/implementation/CurveOperation/POINTonE1_abs p1))\n        (Prelude.ite x@5\n           (cryptol:/implementation/CurveOperation/POINTonE1_invariant p1)\n           p1\n           (cryptol:/implementation/CurveOperation/POINTonE1_normalize p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)\n      x@4 = x@2 * x@2\n      x@5 = x@2 * x@4\n    }\n in (x : x@5)\n-> let { x@6 = x.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair x@2 x@4 x@3 (Cryptol.PEqPair x@2 x@2 x@3 x@3))\n         (x.1,x@6.1,x@6.2)\n         x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)\n      x@4 = x@2 * x@2\n    }\n in (x : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqPair x@2 x@2 x@3 x@3) (x.1,x.2) x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n      x@4 = Cryptol.PEqVec 2 x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n      x@5 = x@3 * x@3\n      x@6 = x@3 * x@5\n    }\n in (c : Prelude.Bool)\n-> (x1 : x@3)\n-> (x2 : x@3)\n-> (x3 : x@3)\n-> (y1 : x@3)\n-> (y2 : x@3)\n-> (y3 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqPair x@3 x@5 x@4 (Cryptol.PEqPair x@3 x@3 x@4 x@4))\n        (Prelude.ite x@3 c x1 y1,\n         Prelude.ite x@3 c x2 y2,Prelude.ite x@3 c x3 y3)\n        (Prelude.ite x@6 c (x1,x2,x3) (y1,y2,y3)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n      x@4 = Cryptol.PEqVec 2 x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n      x@5 = x@3 * x@3\n      x@6 = x@3 * x@5\n    }\n in (p1 : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqPair x@3 x@5 x@4 (Cryptol.PEqPair x@3 x@3 x@4 x@4))\n        (cryptol:/implementation/CurveOperation/POINTonE2_rep\n           (cryptol:/implementation/CurveOperation/POINTonE2_abs p1))\n        (Prelude.ite x@6\n           (cryptol:/implementation/CurveOperation/POINTonE2_invariant p1)\n           p1\n           (cryptol:/implementation/CurveOperation/POINTonE2_normalize p1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n      x@4 = Cryptol.PEqVec 2 x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n      x@5 = x@3 * x@3\n      x@6 = x@3 * x@5\n    }\n in (x : x@6)\n-> let { x@7 = x.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6\n         (Cryptol.PEqPair x@3 x@5 x@4 (Cryptol.PEqPair x@3 x@3 x@4 x@4))\n         (x.1,x@7.1,x@7.2)\n         x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n      x@4 = Cryptol.PEqVec 2 x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n      x@5 = x@3 * x@3\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5 (Cryptol.PEqPair x@3 x@3 x@4 x@4) (x.1,x.2) x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n      x@4 = x@3 * x@3 * x@3\n    }\n in (x : Prelude.Bool)\n-> (y : x@4)\n-> (z : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqVec 2 x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)))\n        (Prelude.ite x@4 x y z).1\n        (Prelude.ite x@3 x y.1 z.1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n      x@4 = x@3 * x@3 * x@3\n    }\n in (x : Prelude.Bool)\n-> (y : x@4)\n-> (z : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqVec 2 x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)))\n        (Prelude.ite x@4 x y z).2.1\n        (Prelude.ite x@3 x y.2.1 z.2.1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n      x@4 = x@3 * x@3 * x@3\n    }\n in (x : Prelude.Bool)\n-> (y : x@4)\n-> (z : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqVec 2 x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)))\n        (Prelude.ite x@4 x y z).2.2\n        (Prelude.ite x@3 x y.2.2 z.2.2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n    }\n in (x : Prelude.Bool)\n-> (y0 : x@2)\n-> (y1 : x@2)\n-> (z0 : x@2)\n-> (z1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqVec 2 x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)))\n        [Prelude.ite x@2 x y0 z0, Prelude.ite x@2 x y1 z1]\n        (Prelude.ite x@3 x [y0, y1] [z0, z1]))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@1\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (cryptol:/implementation/Field/fp2_normalize x)\n        (Prelude.ite x@3 (cryptol:/implementation/Field/fp2_invariant x) x\n           (cryptol:/implementation/CryptolHelpers/apply x@3 x@3\n              cryptol:/implementation/Field/fp2_normalize\n              x)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@1\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (cryptol:/implementation/Field/fp2_rep\n           (cryptol:/implementation/Field/fp2_abs x))\n        (Prelude.ite x@3 (cryptol:/implementation/Field/fp2_invariant x) x\n           (cryptol:/implementation/Field/fp2_normalize x)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = Prelude.Vec 2 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqVec 2 x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)))\n        [Prelude.at 2 x@2 x 0, Prelude.at 2 x@2 x 1]\n        x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = x@2 * x@2 * x@2\n    }\n in (c : Prelude.Bool)\n-> (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n        (Prelude.ite x@3 c x y).1\n        (Prelude.ite x@2 c x.1 y.1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = x@2 * x@2 * x@2\n    }\n in (c : Prelude.Bool)\n-> (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n        (Prelude.ite x@3 c x y).2.1\n        (Prelude.ite x@2 c x.2.1 y.2.1))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n      x@3 = x@2 * x@2 * x@2\n    }\n in (c : Prelude.Bool)\n-> (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n        (Prelude.ite x@3 c x y).2.2\n        (Prelude.ite x@2 c x.2.2 y.2.2))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n    }\n in (x : Prelude.Bool)\n-> (y : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqSeq (Cryptol.TCNum 6) x@1\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fp_rep\n           (Prelude.ite Prelude.Integer x y z))\n        (Prelude.ite x@2 x (cryptol:/implementation/Field/fp_rep y)\n           (cryptol:/implementation/Field/fp_rep z)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n    }\n in (x : Prelude.Bool)\n-> (y0 : x@1)\n-> (y1 : x@1)\n-> (y2 : x@1)\n-> (y3 : x@1)\n-> (y4 : x@1)\n-> (y5 : x@1)\n-> (z0 : x@1)\n-> (z1 : x@1)\n-> (z2 : x@1)\n-> (z3 : x@1)\n-> (z4 : x@1)\n-> (z5 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n        [ Prelude.ite x@1 x y0 z0\n        , Prelude.ite x@1 x y1 z1\n        , Prelude.ite x@1 x y2 z2\n        , Prelude.ite x@1 x y3 z3\n        , Prelude.ite x@1 x y4 z4\n        , Prelude.ite x@1 x y5 z5 ]\n        (Prelude.ite x@2 x [y0, y1, y2, y3, y4, y5] [z0, z1, z2, z3, z4, z5]))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@2)\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@1\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (cryptol:/implementation/Field/fp2_rep [x, y])\n        [ cryptol:/implementation/Field/fp_rep y\n        , cryptol:/implementation/Field/fp_rep x ])",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant x)\n        (Cryptol.ecEq x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@1\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n           x\n           (cryptol:add_rep#6521 x)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant x)\n        (Cryptol.ecEq x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@1\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n           x\n           (cryptol:add_rep#6572 x)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqSeq (Cryptol.TCNum 6) x@1\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fp_normalize x)\n        (Prelude.ite x@2 (cryptol:/implementation/Field/fp_invariant x) x\n           (cryptol:/implementation/CryptolHelpers/apply x@2 x@2\n              cryptol:/implementation/Field/fp_normalize\n              x)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2\n        (Cryptol.PEqSeq (Cryptol.TCNum 6) x@1\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fp_rep\n           (cryptol:/implementation/Field/fp_abs x))\n        (Prelude.ite x@2 (cryptol:/implementation/Field/fp_invariant x) x\n           (cryptol:/implementation/Field/fp_normalize x)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.Vec 6 x@1\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n        [ Prelude.at 6 x@1 x 0\n        , Prelude.at 6 x@1 x 1\n        , Prelude.at 6 x@1 x 2\n        , Prelude.at 6 x@1 x 3\n        , Prelude.at 6 x@1 x 4\n        , Prelude.at 6 x@1 x 5 ]\n        x)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.bvNat 64 0\n      x@3 = Prelude.Vec 6 x@1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 x@3)\n         (Cryptol.PEqVec 2 x@3 (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64)))\n         (cryptol:/implementation/Field/fp2_rep cryptol:/Parameters/Fp_2.2.2.1)\n         [ [ Prelude.bvNat 64 8505329371266088957\n         , Prelude.bvNat 64 17002214543764226050\n         , Prelude.bvNat 64 6865905132761471162\n         , Prelude.bvNat 64 8632934651105793861\n         , Prelude.bvNat 64 6631298214892334189\n         , Prelude.bvNat 64 1582556514881692819 ]\n         , [x@2, x@2, x@2, x@2, x@2, x@2] ])",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 8505329371266088957\n            , Prelude.bvNat 64 17002214543764226050\n            , Prelude.bvNat 64 6865905132761471162\n            , Prelude.bvNat 64 8632934651105793861\n            , Prelude.bvNat 64 6631298214892334189\n            , Prelude.bvNat 64 1582556514881692819 ]\n            , [x@2, x@2, x@2, x@2, x@2, x@2] ])\n         cryptol:/Parameters/Fp_2.2.2.1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [x@2, x@2, x@2, x@2, x@2, x@2]\n            , [ Prelude.bvNat 64 8505329371266088957\n            , Prelude.bvNat 64 17002214543764226050\n            , Prelude.bvNat 64 6865905132761471162\n            , Prelude.bvNat 64 8632934651105793861\n            , Prelude.bvNat 64 6631298214892334189\n            , Prelude.bvNat 64 1582556514881692819 ] ])\n         cryptol:/Parameters/u)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = [ Prelude.bvNat 64 12260768510540316659\n      , Prelude.bvNat 64 6038201419376623626\n      , Prelude.bvNat 64 5156596810353639551\n      , Prelude.bvNat 64 12813724723179037911\n      , Prelude.bvNat 64 10288881524157229871\n      , Prelude.bvNat 64 708830206584151678 ]\n      x@3 = cryptol:/Parameters/to_Fp (Cryptol.TCNum 4) (Prelude.bvNat 4 4)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs [x@2, x@2])\n         [x@3, x@3])",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = [ Prelude.bvNat 64 12260768510540316659\n      , Prelude.bvNat 64 6038201419376623626\n      , Prelude.bvNat 64 5156596810353639551\n      , Prelude.bvNat 64 12813724723179037911\n      , Prelude.bvNat 64 10288881524157229871\n      , Prelude.bvNat 64 708830206584151678 ]\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs [x@2, x@2])\n         cryptol:/Parameters/b')",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = [ Prelude.bvNat 64 12260768510540316659\n      , Prelude.bvNat 64 6038201419376623626\n      , Prelude.bvNat 64 5156596810353639551\n      , Prelude.bvNat 64 12813724723179037911\n      , Prelude.bvNat 64 10288881524157229871\n      , Prelude.bvNat 64 708830206584151678 ]\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant [x@2, x@2])\n         Prelude.True)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n      x@2 = [ Prelude.bvNat 64 8921533702591418330\n      , Prelude.bvNat 64 15859389534032789116\n      , Prelude.bvNat 64 3389114680249073393\n      , Prelude.bvNat 64 15116930867080254631\n      , Prelude.bvNat 64 3288288975085550621\n      , Prelude.bvNat 64 1021049300055853010 ]\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs [x@2, x@2])\n         cryptol:/BLSFieldExtras/sqrt_fp2_c3)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 4480897313486445265\n            , Prelude.bvNat 64 4797496051193971075\n            , Prelude.bvNat 64 4046559893315008306\n            , Prelude.bvNat 64 10569151167044009496\n            , Prelude.bvNat 64 2123814803385151673\n            , Prelude.bvNat 64 852749317591686856 ]\n            , [ Prelude.bvNat 64 8921533702591418330\n            , Prelude.bvNat 64 15859389534032789116\n            , Prelude.bvNat 64 3389114680249073393\n            , Prelude.bvNat 64 15116930867080254631\n            , Prelude.bvNat 64 3288288975085550621\n            , Prelude.bvNat 64 1021049300055853010 ] ])\n         cryptol:/BLSFieldExtras/sqrt_fp2_c2)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 6 x@1)\n         (Cryptol.PEqVec 6 x@1 (Cryptol.PEqWord 64))\n         (cryptol:/implementation/Field/fp_rep cryptol:/Parameters/Fp.2.2.1)\n         [ Prelude.bvNat 64 8505329371266088957\n         , Prelude.bvNat 64 17002214543764226050\n         , Prelude.bvNat 64 6865905132761471162\n         , Prelude.bvNat 64 8632934651105793861\n         , Prelude.bvNat 64 6631298214892334189\n         , Prelude.bvNat 64 1582556514881692819 ])",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Cryptol.TCNum 0\n      x@3 = Cryptol.TCNum 16\n      x@4 = Prelude.Vec 256 Prelude.Bool\n    }\n in (salt : x@4)\n-> (IKM : Prelude.Vec 16 x@1)\n-> (info : Prelude.Vec 0 x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/KeyGen/KeyGenStep x@3 x@2 salt IKM info)\n        (cryptol:/Main/vec256_abs\n           (cryptol:/Main/KeyGenStep_rep x@3 x@2 salt IKM info)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Cryptol.TCNum 0\n      x@3 = Cryptol.TCNum 16\n    }\n in (IKM : Prelude.Vec 16 x@1)\n-> (info : Prelude.Vec 0 x@1)\n-> let { x@4 = (IKM,info)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool)\n         (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n         (cryptol:/Main/pow256_abs (cryptol:/Main/KeyGen_rep x@3 x@2 x@4))\n         (cryptol:/KeyGen/KeyGen x@3 x@2 x@4))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Cryptol.TCNum 0\n      x@3 = Cryptol.TCNum 32\n      x@4 = Prelude.Vec 256 Prelude.Bool\n    }\n in (salt : x@4)\n-> (IKM : Prelude.Vec 32 x@1)\n-> (info : Prelude.Vec 0 x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/KeyGen/KeyGenStep x@3 x@2 salt IKM info)\n        (cryptol:/Main/vec256_abs\n           (cryptol:/Main/KeyGenStep_rep x@3 x@2 salt IKM info)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Cryptol.TCNum 0\n      x@3 = Cryptol.TCNum 32\n    }\n in (IKM : Prelude.Vec 32 x@1)\n-> (info : Prelude.Vec 0 x@1)\n-> let { x@4 = (IKM,info)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool)\n         (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n         (cryptol:/Main/pow256_abs (cryptol:/Main/KeyGen_rep x@3 x@2 x@4))\n         (cryptol:/KeyGen/KeyGen x@3 x@2 x@4))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Cryptol.TCNum 16\n      x@3 = Cryptol.TCNum 80\n    }\n in (IKM : Prelude.Vec 80 x@1)\n-> (info : Prelude.Vec 16 x@1)\n-> let { x@4 = (IKM,info)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool)\n         (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n         (cryptol:/Main/pow256_abs (cryptol:/Main/KeyGen_rep x@3 x@2 x@4))\n         (cryptol:/KeyGen/KeyGen x@3 x@2 x@4))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Cryptol.TCNum 16\n      x@3 = Prelude.Vec 256 Prelude.Bool\n      x@4 = Cryptol.TCNum 80\n    }\n in (salt : x@3)\n-> (IKM : Prelude.Vec 80 x@1)\n-> (info : Prelude.Vec 16 x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/KeyGen/KeyGenStep x@4 x@2 salt IKM info)\n        (cryptol:/Main/vec256_abs\n           (cryptol:/Main/KeyGenStep_rep x@4 x@2 salt IKM info)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Cryptol.TCNum 32\n      x@3 = Cryptol.TCNum 4\n      x@4 = Prelude.Vec 256 Prelude.Bool\n    }\n in (salt : x@4)\n-> (IKM : Prelude.Vec 32 x@1)\n-> (info : Prelude.Vec 4 x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/KeyGen/KeyGenStep x@2 x@3 salt IKM info)\n        (cryptol:/Main/vec256_abs\n           (cryptol:/Main/KeyGenStep_rep x@2 x@3 salt IKM info)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Cryptol.TCNum 32\n      x@3 = Cryptol.TCNum 4\n    }\n in (IKM : Prelude.Vec 32 x@1)\n-> (info : Prelude.Vec 4 x@1)\n-> let { x@4 = (IKM,info)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool)\n         (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n         (cryptol:/Main/pow256_abs (cryptol:/Main/KeyGen_rep x@2 x@3 x@4))\n         (cryptol:/KeyGen/KeyGen x@2 x@3 x@4))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Cryptol.TCNum 7\n      x@3 = Cryptol.TCNum 33\n    }\n in (IKM : Prelude.Vec 33 x@1)\n-> (info : Prelude.Vec 7 x@1)\n-> let { x@4 = (IKM,info)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool)\n         (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n         (cryptol:/Main/pow256_abs (cryptol:/Main/KeyGen_rep x@3 x@2 x@4))\n         (cryptol:/KeyGen/KeyGen x@3 x@2 x@4))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Cryptol.TCNum 7\n      x@3 = Prelude.Vec 256 Prelude.Bool\n      x@4 = Cryptol.TCNum 33\n    }\n in (salt : x@3)\n-> (IKM : Prelude.Vec 33 x@1)\n-> (info : Prelude.Vec 7 x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/KeyGen/KeyGenStep x@4 x@2 salt IKM info)\n        (cryptol:/Main/vec256_abs\n           (cryptol:/Main/KeyGenStep_rep x@4 x@2 salt IKM info)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (s : Prelude.Vec 48 x@1)\n-> Prelude.EqTrue\n     (cryptol:/Cryptol/%5c%2f\n        (Cryptol.ecAt (Cryptol.TCNum 8) Prelude.Bool Prelude.Integer\n           Cryptol.PIntegralInteger\n           (Cryptol.ecAt (Cryptol.TCNum 48) x@1 Prelude.Integer\n              Cryptol.PIntegralInteger\n              s\n              (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n                 Cryptol.PLiteralInteger))\n           (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n              Cryptol.PLiteralInteger))\n        (cryptol:/Maybe/maybe_cases x@2 Prelude.Bool\n           (cryptol:/implementation/serialization/uncompress_E1_imp s)\n           Prelude.True\n           (\\(p : x@2) ->\n              Cryptol.ecEq x@2\n                (Cryptol.PEqPair Prelude.Integer Prelude.Integer\n                   Cryptol.PEqInteger\n                   Cryptol.PEqInteger)\n                p\n                (cryptol:/implementation/serialization/uncompress_E1_OK s))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.Vec 8 Prelude.Bool\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (s : Prelude.Vec 96 x@1)\n-> Prelude.EqTrue\n     (cryptol:/Cryptol/%5c%2f\n        (Cryptol.ecAt (Cryptol.TCNum 8) Prelude.Bool Prelude.Integer\n           Cryptol.PIntegralInteger\n           (Cryptol.ecAt (Cryptol.TCNum 96) x@1 Prelude.Integer\n              Cryptol.PIntegralInteger\n              s\n              (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n                 Cryptol.PLiteralInteger))\n           (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n              Cryptol.PLiteralInteger))\n        (cryptol:/Maybe/maybe_cases x@3 Prelude.Bool\n           (cryptol:/implementation/SerializationP2/uncompress_E2_imp s)\n           Prelude.True\n           (\\(p : x@3) ->\n              Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4) p\n                (cryptol:/implementation/SerializationP2/uncompress_E2_OK s))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.natToInt 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n      x@5 = [x@1, x@1]\n      x@6 = x@5,x@5,x@5\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (x@2 * x@3)\n         (Cryptol.PEqPair x@2 x@3 x@4 (Cryptol.PEqPair x@2 x@2 x@4 x@4))\n         (cryptol:/implementation/CurveOperation/point_double x@2\n            cryptol:/Parameters/Fp_2\n            x@6)\n         x@6)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = Prelude.natToInt 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = x@2 * x@3\n      x@5 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n      x@6 = [x@1, x@1]\n    }\n in (p1 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@2 x@3 x@5 (Cryptol.PEqPair x@2 x@2 x@5 x@5))\n        (cryptol:/implementation/CurveOperation/point_add x@2\n           cryptol:/Parameters/Fp_2\n           (x@6,x@6,x@6)\n           p1)\n        p1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/E\n      x@2 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p : (x@2 * x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Integer * Prelude.Integer)\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer Cryptol.PEqInteger\n           Cryptol.PEqInteger)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@1\n           (cryptol:/implementation/CurveOperation/POINTonE1_abs\n              (llvm:/POINTonE1_times_c p)))\n        (cryptol:e1_scalar_mult#6131 cryptol:zz_minus_1_div_by_3#6208\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@1\n              (cryptol:/implementation/CurveOperation/POINTonE1_abs p))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n      x@2 = x@1.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x,x@2.1))\n        (x@2.2.2.2.2.2.2.1 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n      x@2 = x@1.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@2.1,x))\n        (x@2.2.2.2.2.2.2.1 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n      x@2 = x@1.2.2.2.2.2.2.2.2\n      x@3 = cryptol:/Parameters/Fp_2.2.2.2\n      x@4 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (s : Prelude.Vec 2 Prelude.Integer)\n-> (i : Prelude.Vec 2 x@4)\n-> let { x@5 = cryptol:/implementation/Field/fp2_abs i\n         x@6 = x@3.2.2.2.2.2.2.2.1 s\n         x@7 = Prelude.at 2 Prelude.Integer x@6 0\n         x@8 = Prelude.at 2 Prelude.Integer x@6 1\n    }\n in Prelude.EqTrue\n      (Prelude.boolEq\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq\n            [ x@1.1 (x@7,Prelude.at 2 Prelude.Integer x@5 1)\n            , x@2.2.2.2\n                (x@8,\n                 cryptol:/implementation/Field/fp_abs (Prelude.at 2 x@4 i 0)) ]\n            x@3.1)\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq [x@8, x@2.1 x@7] x@5))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n      x@2 = x@1.2.2.2.2.2.2.2.2\n      x@3 = cryptol:/Parameters/Fp_2.2.2.2\n      x@4 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (s : Prelude.Vec 2 Prelude.Integer)\n-> (i : Prelude.Vec 2 x@4)\n-> let { x@5 = cryptol:/implementation/Field/fp2_abs i\n         x@6 = x@3.2.2.2.2.2.2.2.1 s\n         x@7 = Prelude.at 2 Prelude.Integer x@6 0\n         x@8 = Prelude.at 2 Prelude.Integer x@6 1\n    }\n in Prelude.EqTrue\n      (Prelude.boolEq\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq\n            [ x@2.2.2.2 (x@7,Prelude.at 2 Prelude.Integer x@5 1)\n            , x@1.1\n                (x@8,\n                 cryptol:/implementation/Field/fp_abs (Prelude.at 2 x@4 i 1)) ]\n            x@3.1)\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq [x@2.1 x@8, x@7] x@5))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n      x@2 = x@1.2.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@2.1 (x@1.1 (x,y)))\n        (x@1.1 (x@2.1 x,x@2.1 y)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n      x@2 = x@1.2.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@2.2.2.2 (x,y))\n        (x@1.1 (x,x@2.1 y)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@1.1 (x,y),z))\n        (x@1.1 (x,x@1.1 (y,z))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x,y))\n        (cryptol:/implementation/CryptolHelpers/apply\n           (Prelude.Integer * Prelude.Integer)\n           Prelude.Integer\n           x@1.1\n           (y,x)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2\n      x@2 = x@1.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@2.1 x,y))\n        (x@2.1 (x@1.1 (x,y))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2\n    }\n in (x : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (x@1.2.2.2.2.2.2.1 (x,cryptol:/BLSFieldExtras/inverse_fp z))\n        (x@1.1 (x,z)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (x@1.1 (x@1.2.1,cryptol:/BLSFieldExtras/sqrt_fp x))\n        (cryptol:fp_exp#5552 x\n           (Cryptol.ecDiv Prelude.Integer Cryptol.PIntegralInteger\n              (Cryptol.ecMinus Prelude.Integer Cryptol.PRingInteger\n                 (Cryptol.ecNumber\n                    (Cryptol.TCNum\n                       4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787)\n                    Prelude.Integer\n                    Cryptol.PLiteralInteger)\n                 (Cryptol.ecNumber (Cryptol.TCNum 3) Prelude.Integer\n                    Cryptol.PLiteralInteger))\n              (Cryptol.ecNumber (Cryptol.TCNum 4) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2\n      x@2 = x@1.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@2.1 (x,x@1.1))\n        (x@2.2.2.1 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2\n      x@2 = x@1.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@2.1 (x@1.1,x))\n        (x@2.2.2.1 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.1\n    }\n in (n : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:fp_exp#5552 x@1 n)\n        x@1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2\n      x@2 = x@1.1\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.2.2.2.2.1 (x,x@2))\n        x@2)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2\n      x@2 = x@1.1\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.2.2.2.2.1 (x@2,x))\n        x@2)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2\n      x@2 = x@1.1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.2.2.2.2.2.1 x@2)\n         x@2)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.1\n      x@2 = cryptol:/Parameters/E\n    }\n in (p : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> let { x@3 = cryptol:/implementation/Field/fp_abs\n                 (cryptol:/implementation/CurveOperation/POINTonE1_rep p).2.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (Prelude.intEq x@3 x@1)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n               x@2\n               p)\n            (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@2\n               (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@2 p))\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (Prelude.Integer\n                -> Prelude.Bool)\n               Prelude.intEq\n               x@3\n               x@1)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2\n    }\n in (p : (Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer\n           cryptol:/Parameters/E\n           p)\n        (cryptol:/Cryptol/%2f%5c (x@1.1 p.1)\n           (cryptol:/Cryptol/%2f%5c (x@1.1 p.2)\n              (cryptol:/implementation/CurveOperation/POINTonE1_affine_on_curve\n                 p))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@1.1 (x,y),z))\n        (x@1.1 (x,x@1.1 (y,z))))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.2.2.2.1 x)\n        (x@1.1 (x,x)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n-> let { x@2 = (cryptol:/implementation/Field/fp_abs x,\n                cryptol:/implementation/Field/montgomery_factor_p)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 x@2)\n         (Prelude.ite Prelude.Integer\n            (cryptol:/implementation/Field/fp_invariant x)\n            (cryptol:/Parameters/to_Fp (Cryptol.TCNum 384)\n               (cryptol:/implementation/Types/vec384_abs x))\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer)\n               Prelude.Integer\n               x@1.1\n               x@2)))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@1.1 x))\n        (x@1.2.1 x))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp_2\n      x@2 = x@1.2.2.2\n      x@3 = x@2.2.2.2.2.2\n    }\n in (s : Prelude.Vec 2 Prelude.Integer)\n-> (i : Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))\n-> let { x@4 = cryptol:/implementation/Field/fp2_abs i\n         x@5 = x@3.2.2.1 s\n    }\n in Prelude.EqTrue\n      (Prelude.boolEq\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq (x@1.1 (x@5,x@4)) x@2.1)\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq (x@3.1 x@5) x@4))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp_2.2.2.1\n    }\n in (n : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_exp#6233 x@1 n)\n        x@1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp_2.2.2.2\n      x@2 = x@1.1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (x@1.2.2.2.2.2.1 x@2)\n         x@2)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/Fp_2.2.2.2\n      x@2 = x@1.2.2.2.2.2.2.2\n    }\n in (s : Prelude.Vec 2 Prelude.Integer)\n-> (i : Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))\n-> let { x@3 = cryptol:/implementation/Field/fp2_abs i\n         x@4 = x@2.1 s\n    }\n in Prelude.EqTrue\n      (Prelude.boolEq\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq (x@2.2 (x@4,x@3)) x@1.1)\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq x@4 x@3))",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/b\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.2.1 x@1)\n         x@1)",
    "loc": "unknown",
    "type": "property"
  },
  {
    "status": "verified",
    "term": "let { x@1 = cryptol:/Parameters/b'\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.1 x@1)\n         x@1)",
    "loc": "unknown",
    "type": "property"
  }
]
