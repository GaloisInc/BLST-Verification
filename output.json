[
  {
    "status": "assumed",
    "loc": "/workdir/proof/384x384_ops.saw:219:24",
    "method": "add_mod_384x384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/384x384_ops.saw:222:24",
    "method": "sub_mod_384x384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/384x384_ops.saw:225:16",
    "method": "mulx_382x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/384x384_ops.saw:226:16",
    "method": "sqrx_382x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/384x384_ops.saw:228:22",
    "method": "redcx_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/384x384_ops.saw:229:26",
    "method": "redcx_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/aggregate.saw:277:23",
    "method": "POINTonE1_in_G1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/aggregate.saw:286:24",
    "method": "POINTonE1_in_G1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/aggregate.saw:288:23",
    "method": "POINTonE2_in_G2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/aggregate.saw:297:24",
    "method": "POINTonE2_in_G2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/aggregate.saw:301:20",
    "method": "blst_pairing_init",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:306:36",
    "method": "blst_pairing_aggregate_pk_in_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:307:40",
    "method": "blst_pairing_aggregate_pk_in_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:310:36",
    "method": "blst_pairing_aggregate_pk_in_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:311:40",
    "method": "blst_pairing_aggregate_pk_in_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:314:23",
    "method": "blst_pairing_commit",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:316:26",
    "method": "blst_pairing_finalverify",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:317:26",
    "method": "blst_pairing_finalverify",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:318:27",
    "method": "blst_pairing_finalverify",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:319:26",
    "method": "blst_pairing_finalverify",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:320:26",
    "method": "blst_pairing_finalverify",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:321:26",
    "method": "blst_pairing_finalverify",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:322:26",
    "method": "blst_pairing_finalverify",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:323:26",
    "method": "blst_pairing_finalverify",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:325:18",
    "method": "blst_pairing_merge",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/aggregate.saw:326:18",
    "method": "blst_pairing_merge",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/aggregate.saw:328:24",
    "method": "blst_aggregated_in_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/aggregate.saw:329:24",
    "method": "blst_aggregated_in_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/api-extra-for-release-2.saw:100:27",
    "method": "blst_sk_to_pk_in_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/api-extra-for-release-2.saw:13:28",
    "method": "blst_p2_affine_in_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/api-extra-for-release-2.saw:20:28",
    "method": "POINTonE1_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/api-extra-for-release-2.saw:22:28",
    "method": "POINTonE2_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/api-extra-for-release-2.saw:6:28",
    "method": "blst_p1_affine_in_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/api-extra-for-release-2.saw:74:27",
    "method": "blst_sk_to_pk_in_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/clear_cofactor_p2.saw:111:28",
    "method": "POINTonE2_add_n_dbl",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/clear_cofactor_p2.saw:131:31",
    "method": "POINTonE2_times_minus_z",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/clear_cofactor_p2.saw:150:26",
    "method": "vec_copy",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/clear_cofactor_p2.saw:162:30",
    "method": "POINTonE2_cneg",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/clear_cofactor_p2.saw:174:22",
    "method": "clear_cofactor",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p1.saw:132:40",
    "method": "POINTonE1_Compress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p1.saw:136:36",
    "method": "POINTonE1_Compress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p1.saw:177:35",
    "method": "blst_p1_compress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p1.saw:193:31",
    "method": "blst_p1_compress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p1.saw:48:36",
    "method": "POINTonE1_affine_Compress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p1.saw:77:31",
    "method": "POINTonE1_from_Jacobian",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p2.saw:124:40",
    "method": "POINTonE2_Compress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p2.saw:150:36",
    "method": "POINTonE2_Compress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p2.saw:203:35",
    "method": "blst_p2_compress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p2.saw:221:31",
    "method": "blst_p2_compress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p2.saw:32:36",
    "method": "POINTonE2_affine_Compress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/compress-p2.saw:60:31",
    "method": "POINTonE2_from_Jacobian",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:190:16",
    "method": "line_dbl",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:191:22",
    "method": "line_dbl",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:192:16",
    "method": "line_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:193:22",
    "method": "line_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:196:21",
    "method": "add_n_dbl_n",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:200:20",
    "method": "start_dbl_n",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:203:22",
    "method": "miller_loop_n",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/core_verify.saw:203:22",
    "method": "miller_loop_n",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:206:18",
    "method": "mul_n_sqr",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:208:17",
    "method": "final_exp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:209:23",
    "method": "final_exp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:211:17",
    "method": "map_to_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:212:24",
    "method": "map_to_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/core_verify.saw:215:33",
    "method": "blst_core_verify_pk_in_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:217:17",
    "method": "map_to_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/core_verify.saw:218:24",
    "method": "map_to_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/core_verify.saw:221:33",
    "method": "blst_core_verify_pk_in_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:111:31",
    "method": "POINTonE1_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:182:28",
    "method": "POINTonE1_add_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:237:24",
    "method": "POINTonE1_double",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:260:34",
    "method": "POINTonE1_double",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:293:27",
    "method": "POINTonE1_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:324:37",
    "method": "POINTonE1_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:358:37",
    "method": "POINTonE1_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:393:30",
    "method": "POINTonE1_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:417:40",
    "method": "POINTonE1_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:452:29",
    "method": "POINTonE1_dadd_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:483:26",
    "method": "POINTonE1_is_equal",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:531:33",
    "method": "POINTonE1_affine_on_curve",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/curve_operations.saw:559:4",
    "method": "mul_by_b_onE1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:586:26",
    "method": "POINTonE1_on_curve",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:615:22",
    "method": "POINTonE1_cneg",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations.saw:83:21",
    "method": "POINTonE1_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:106:38",
    "method": "POINTonE2_add_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:123:24",
    "method": "POINTonE2_double",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:139:34",
    "method": "POINTonE2_double",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:158:27",
    "method": "POINTonE2_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:177:37",
    "method": "POINTonE2_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:197:30",
    "method": "POINTonE2_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:215:40",
    "method": "POINTonE2_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:233:29",
    "method": "POINTonE2_dadd_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:250:39",
    "method": "POINTonE2_dadd_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:270:26",
    "method": "POINTonE2_is_equal",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:308:33",
    "method": "POINTonE2_affine_on_curve",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/curve_operations_e2.saw:326:3",
    "method": "mul_by_b_onE2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/curve_operations_e2.saw:328:3",
    "method": "mul_by_b_onE2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:349:26",
    "method": "POINTonE2_on_curve",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:367:22",
    "method": "POINTonE2_cneg",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:53:21",
    "method": "POINTonE2_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:70:31",
    "method": "POINTonE2_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/curve_operations_e2.saw:88:28",
    "method": "POINTonE2_add_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/deserialize-p1.saw:336:20",
    "method": "add_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/deserialize-p1.saw:338:25",
    "method": "sgn0x_pty_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:340:30",
    "method": "limbs_from_be_bytes",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:342:31",
    "method": "blst_p1_deserialize",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:352:36",
    "method": "POINTonE1_Uncompress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:395:36",
    "method": "POINTonE1_Uncompress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:404:34",
    "method": "POINTonE1_Uncompress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:417:36",
    "method": "POINTonE1_Uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:420:35",
    "method": "POINTonE1_Uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:422:31",
    "method": "POINTonE1_Uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:431:32",
    "method": "POINTonE1_Uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:440:33",
    "method": "POINTonE1_Uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:462:29",
    "method": "blst_p1_uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:475:37",
    "method": "POINTonE1_Deserialize_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p1.saw:487:38",
    "method": "POINTonE1_Deserialize_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/deserialize-p2.saw:329:20",
    "method": "add_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/deserialize-p2.saw:331:26",
    "method": "sgn0x_pty_mont_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p2.saw:333:30",
    "method": "limbs_from_be_bytes",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p2.saw:349:36",
    "method": "POINTonE2_Uncompress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p2.saw:403:36",
    "method": "POINTonE2_Uncompress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p2.saw:416:34",
    "method": "POINTonE2_Uncompress_BE",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p2.saw:433:36",
    "method": "POINTonE2_Uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p2.saw:436:35",
    "method": "POINTonE2_Uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p2.saw:438:31",
    "method": "POINTonE2_Uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p2.saw:447:32",
    "method": "POINTonE2_Uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p2.saw:456:33",
    "method": "POINTonE2_Uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize-p2.saw:478:29",
    "method": "blst_p2_uncompress",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize.saw:30:27",
    "method": "blst_p1_deserialize",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/deserialize.saw:31:27",
    "method": "blst_p2_deserialize",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult.saw:323:4",
    "method": "POINTonE1_precompute_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult.saw:449:4",
    "method": "POINTonE1_gather_booth_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult.saw:596:1",
    "method": "POINTonE1_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult.saw:597:1",
    "method": "POINTonE1_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult.saw:598:1",
    "method": "POINTonE1_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult.saw:600:1",
    "method": "POINTonE1_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult.saw:601:1",
    "method": "POINTonE1_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult.saw:603:1",
    "method": "POINTonE1_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult2.saw:200:4",
    "method": "POINTonE2_precompute_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult2.saw:326:4",
    "method": "POINTonE2_gather_booth_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult2.saw:473:1",
    "method": "POINTonE2_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult2.saw:474:1",
    "method": "POINTonE2_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult2.saw:475:1",
    "method": "POINTonE2_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult2.saw:477:1",
    "method": "POINTonE2_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult2.saw:478:1",
    "method": "POINTonE2_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/ec_mult2.saw:480:1",
    "method": "POINTonE2_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:262:26",
    "method": "POINTonE1_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:263:31",
    "method": "POINTonE1_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:264:37",
    "method": "POINTonE1_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:265:41",
    "method": "POINTonE1_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:267:32",
    "method": "POINTonE1_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:268:27",
    "method": "POINTonE2_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:269:33",
    "method": "POINTonE2_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:270:38",
    "method": "POINTonE2_dadd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:271:33",
    "method": "POINTonE1_dadd_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:272:39",
    "method": "POINTonE1_dadd_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:273:34",
    "method": "POINTonE2_dadd_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:274:40",
    "method": "POINTonE2_dadd_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:275:21",
    "method": "POINTonE1_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:276:27",
    "method": "POINTonE1_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:277:31",
    "method": "POINTonE1_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:278:21",
    "method": "POINTonE2_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:279:27",
    "method": "POINTonE2_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:280:28",
    "method": "POINTonE1_add_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:281:34",
    "method": "POINTonE1_add_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:282:28",
    "method": "POINTonE2_add_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:283:34",
    "method": "POINTonE2_add_affine",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:284:24",
    "method": "POINTonE1_double",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:285:30",
    "method": "POINTonE1_double",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:286:24",
    "method": "POINTonE2_double",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:287:30",
    "method": "POINTonE2_double",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:288:26",
    "method": "POINTonE1_is_equal",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:289:26",
    "method": "POINTonE2_is_equal",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:290:29",
    "method": "POINTonE2_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:291:29",
    "method": "POINTonE2_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/ec_opts.saw:292:29",
    "method": "POINTonE1_mult_w5",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/exp.saw:107:20",
    "method": "sqr_n_mul_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/exp.saw:108:30",
    "method": "sqr_n_mul_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/exp.saw:132:21",
    "method": "reciprocal_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/exp.saw:173:21",
    "method": "recip_sqrt_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/exp.saw:185:27",
    "method": "recip_sqrt_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/exp.saw:226:15",
    "method": "sqrt_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/exp.saw:227:21",
    "method": "sqrt_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/exp2.saw:465:22",
    "method": "sqrt_align_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/exp2.saw:467:32",
    "method": "sqrt_align_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/exp2.saw:510:22",
    "method": "reciprocal_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/exp2.saw:522:21",
    "method": "sqr_n_mul_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/exp2.saw:523:31",
    "method": "sqr_n_mul_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/exp2.saw:525:29",
    "method": "recip_sqrt_fp2_9mod16",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/exp2.saw:657:16",
    "method": "sqrt_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/exp2.saw:658:22",
    "method": "sqrt_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1026:17",
    "method": "mul_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1075:24",
    "method": "mul_by_0y0_fp6x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1111:24",
    "method": "mul_by_xy0_fp6x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1213:27",
    "method": "mul_by_xy00z0_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1245:22",
    "method": "conjugate_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1257:27",
    "method": "frobenius_map_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1265:33",
    "method": "frobenius_map_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1275:27",
    "method": "frobenius_map_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1284:33",
    "method": "frobenius_map_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1295:27",
    "method": "frobenius_map_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1305:33",
    "method": "frobenius_map_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1342:27",
    "method": "frobenius_map_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1356:33",
    "method": "frobenius_map_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1396:27",
    "method": "frobenius_map_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1409:33",
    "method": "frobenius_map_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1449:27",
    "method": "frobenius_map_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1462:33",
    "method": "frobenius_map_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1484:28",
    "method": "frobenius_map_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1494:34",
    "method": "frobenius_map_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1510:28",
    "method": "frobenius_map_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1520:34",
    "method": "frobenius_map_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1537:28",
    "method": "frobenius_map_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1547:34",
    "method": "frobenius_map_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1572:18",
    "method": "redc_fp2x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1628:15",
    "method": "sqr_fp4",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12.saw:1649:33",
    "method": "mul_by_u_plus_1_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12.saw:1650:27",
    "method": "mul_by_u_plus_1_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1670:28",
    "method": "cyclotomic_sqr_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1685:17",
    "method": "sqr_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1759:15",
    "method": "sqr_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12.saw:1775:23",
    "method": "eucl_inverse_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1777:19",
    "method": "inverse_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1803:19",
    "method": "inverse_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1920:21",
    "method": "neg_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:1963:20",
    "method": "inverse_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12.saw:505:32",
    "method": "mul_by_1_plus_i_mod_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12.saw:506:44",
    "method": "mul_by_1_plus_i_mod_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:508:29",
    "method": "mul_by_u_plus_1_fp2x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:519:17",
    "method": "mul_fp2x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:527:17",
    "method": "sqr_fp2x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:535:17",
    "method": "sub_fp6x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:540:23",
    "method": "sub_fp6x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:628:18",
    "method": "add_fp2x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:631:18",
    "method": "sub_fp2x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:642:17",
    "method": "mul_fp6x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:755:18",
    "method": "redc_fp6x2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:760:15",
    "method": "mul_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:771:23",
    "method": "mul_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:783:14",
    "method": "add_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:788:26",
    "method": "add_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/fp12.saw:793:14",
    "method": "sub_fp6",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:106:16",
    "method": "sqr_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:107:22",
    "method": "sqr_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:108:27",
    "method": "cyclotomic_sqr_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:109:33",
    "method": "cyclotomic_sqr_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:110:16",
    "method": "mul_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:111:22",
    "method": "mul_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:112:26",
    "method": "mul_by_xy00z0_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:113:32",
    "method": "mul_by_xy00z0_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:114:22",
    "method": "conjugate_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:115:20",
    "method": "inverse_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:117:27",
    "method": "frobenius_map_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp12_tower.saw:119:33",
    "method": "frobenius_map_fp12",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp2_overrides.saw:106:16",
    "method": "cneg_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp2_overrides.saw:116:26",
    "method": "cneg_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp2_overrides.saw:78:16",
    "method": "add_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp2_overrides.saw:79:16",
    "method": "sub_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp2_overrides.saw:80:16",
    "method": "mul_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp2_overrides.saw:84:15",
    "method": "sqr_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp2_overrides.saw:87:25",
    "method": "sqr_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp2_overrides.saw:91:30",
    "method": "mul_by_3_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp2_overrides.saw:95:30",
    "method": "mul_by_8_fp2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp_overrides.saw:259:15",
    "method": "add_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp_overrides.saw:260:15",
    "method": "sub_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp_overrides.saw:261:15",
    "method": "mul_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp_overrides.saw:268:14",
    "method": "sqr_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp_overrides.saw:273:24",
    "method": "sqr_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp_overrides.saw:278:29",
    "method": "mul_by_3_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp_overrides.saw:283:29",
    "method": "mul_by_8_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp_overrides.saw:297:15",
    "method": "cneg_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/fp_overrides.saw:307:25",
    "method": "cneg_fp",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/group_test.saw:27:28",
    "method": "blst_p1_affine_in_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/group_test.saw:28:28",
    "method": "blst_p2_affine_in_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/hash_to_field.saw:108:20",
    "method": "mulx_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/hash_to_field.saw:109:21",
    "method": "redcx_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_field.saw:112:27",
    "method": "limbs_from_be_bytes",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/hash_to_field.saw:158:22",
    "method": "blst_sha256_block_data_order",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_field.saw:158:22",
    "method": "expand_message_xmd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_field.saw:158:22",
    "method": "hash_to_field",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/hash_to_field.saw:178:26",
    "method": "blst_sha256_block_data_order",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_field.saw:178:26",
    "method": "expand_message_xmd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_field.saw:178:26",
    "method": "hash_to_field",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/hash_to_field_memory_safety.saw:45:22",
    "method": "blst_sha256_block_data_order",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/hash_to_field_memory_safety.saw:45:22",
    "method": "expand_message_xmd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_field_memory_safety.saw:45:22",
    "method": "expand_message_xmd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/hash_to_field_memory_safety.saw:45:22",
    "method": "hash_to_field",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_g1.saw:198:32",
    "method": "map_to_isogenous_E1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_g1.saw:231:36",
    "method": "isogeny_map_to_E1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_g1.saw:263:18",
    "method": "POINTonE1_dbl_n_add",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_g1.saw:267:25",
    "method": "map_to_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/hash_to_g1.saw:289:22",
    "method": "blst_sha256_block_data_order",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_g1.saw:289:22",
    "method": "expand_message_xmd",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_g1.saw:289:22",
    "method": "hash_to_field",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_g1.saw:298:18",
    "method": "blst_hash_to_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/hash_to_g1.saw:81:27",
    "method": "recip_sqrt_fp_3mod4",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/keygen.saw:171:33",
    "method": "mulx_mont_sparse_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/keygen.saw:173:21",
    "method": "redcx_mont_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/keygen.saw:174:31",
    "method": "redcx_mont_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:181:30",
    "method": "limbs_from_be_bytes",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:310:1",
    "method": "HKDF_Expand",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:310:1",
    "method": "HKDF_Extract",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:310:1",
    "method": "blst_keygen",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/keygen.saw:310:1",
    "method": "blst_sha256_block_data_order",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:311:1",
    "method": "HKDF_Expand",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:311:1",
    "method": "HKDF_Extract",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:311:1",
    "method": "blst_keygen",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/keygen.saw:311:1",
    "method": "blst_sha256_block_data_order",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:312:1",
    "method": "HKDF_Expand",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:312:1",
    "method": "HKDF_Extract",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:312:1",
    "method": "blst_keygen",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/keygen.saw:312:1",
    "method": "blst_sha256_block_data_order",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:313:1",
    "method": "HKDF_Expand",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:313:1",
    "method": "HKDF_Extract",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:313:1",
    "method": "blst_keygen",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/keygen.saw:313:1",
    "method": "blst_sha256_block_data_order",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:314:1",
    "method": "HKDF_Expand",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:314:1",
    "method": "HKDF_Extract",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/keygen.saw:314:1",
    "method": "blst_keygen",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/keygen.saw:314:1",
    "method": "blst_sha256_block_data_order",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/map_to_g1.saw:256:23",
    "method": "POINTonE1_in_G1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/map_to_g1.saw:34:13",
    "method": "sigma",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/map_to_g2.saw:169:23",
    "method": "POINTonE2_in_G2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/psi.saw:127:17",
    "method": "qi_x_iwsc",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/psi.saw:137:23",
    "method": "qi_x_iwsc",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/psi.saw:193:17",
    "method": "qi_y_iwsc",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/psi.saw:203:23",
    "method": "qi_y_iwsc",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/psi.saw:255:11",
    "method": "psi",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/psi.saw:268:21",
    "method": "psi",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/psi.saw:281:12",
    "method": "psi",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/psi.saw:293:22",
    "method": "psi",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/sha_overrides.saw:82:14",
    "method": "blst_sha256_bcopy",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/sha_overrides.saw:88:24",
    "method": "blst_sha256_emit",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/sha_overrides.saw:89:25",
    "method": "blst_sha256_hcopy",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/sign.saw:33:21",
    "method": "blst_sign_pk_in_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/sign.saw:34:21",
    "method": "blst_sign_pk_in_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/sk_to_pk.saw:31:27",
    "method": "blst_sk_to_pk_in_g1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/sk_to_pk.saw:32:26",
    "method": "blst_sk_to_pk_in_g2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:132:22",
    "method": "vec_is_zero",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:133:31",
    "method": "vec_is_zero",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:134:23",
    "method": "vec_is_zero",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:155:23",
    "method": "vec_is_zero",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:156:24",
    "method": "vec_is_zero",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:167:23",
    "method": "vec_is_equal",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:176:27",
    "method": "vec_is_equal",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:195:23",
    "method": "vec_is_equal",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:196:24",
    "method": "vec_is_equal",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:219:24",
    "method": "vec_is_equal",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:220:25",
    "method": "vec_is_equal",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/vect.saw:231:19",
    "method": "vec_copy",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/vect.saw:232:26",
    "method": "vec_copy",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/vect.saw:233:33",
    "method": "vec_copy",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:244:28",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:245:38",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:247:23",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:248:33",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:249:24",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:250:34",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/vect.saw:44:23",
    "method": "vec_select_144",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/vect.saw:44:23",
    "method": "vec_select_192",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/vect.saw:44:23",
    "method": "vec_select_288",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/vect.saw:44:23",
    "method": "vec_select_48",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/vect.saw:44:23",
    "method": "vec_select_96",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:76:28",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:77:38",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:78:38",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:81:21",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:83:31",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:85:31",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:87:22",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "/workdir/proof/vect.saw:89:32",
    "method": "vec_select",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/x86/inverse_mod_384.saw:38:28",
    "method": "eucl_inverse_mod_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "/workdir/proof/x86/inverse_mod_384.saw:39:40",
    "method": "eucl_inverse_mod_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17980",
    "method": "add_mod_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17a60",
    "method": "add_mod_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17ae0",
    "method": "lshift_mod_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17c20",
    "method": "mul_by_3_mod_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17c80",
    "method": "mul_by_8_mod_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17d00",
    "method": "ct_inverse_mod_383",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17d00",
    "method": "ctx_inverse_mod_383",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17d00",
    "method": "mul_by_b_onE1",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17e00",
    "method": "mul_by_3_mod_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17ea0",
    "method": "mul_by_8_mod_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x17f60",
    "method": "mul_by_b_onE2",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x180c0",
    "method": "cneg_mod_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x181a0",
    "method": "sub_mod_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x18280",
    "method": "sub_mod_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x18300",
    "method": "mul_by_1_plus_i_mod_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x184a0",
    "method": "sgn0_pty_mod_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x18520",
    "method": "sgn0_pty_mod_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x18640",
    "method": "vec_select_48",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x186c0",
    "method": "vec_select_96",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x187a0",
    "method": "vec_select_192",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x18920",
    "method": "vec_select_144",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x18a40",
    "method": "vec_select_288",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x18e20",
    "method": "add_mod_384x384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x18e60",
    "method": "sub_mod_384x384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x190c0",
    "method": "mul_mont_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x190c0",
    "method": "mulx_mont_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x191e0",
    "method": "sqr_mont_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x191e0",
    "method": "sqrx_mont_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x19320",
    "method": "mul_382x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x19340",
    "method": "mulx_382x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x19480",
    "method": "sqr_382x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x194a0",
    "method": "sqrx_382x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x19ba0",
    "method": "redcx_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x19bc0",
    "method": "sqr_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x19c00",
    "method": "fromx_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "0x19c00",
    "method": "fromx_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x19c40",
    "method": "redc_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x19ca0",
    "method": "from_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1a040",
    "method": "sgn0x_pty_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "0x1a040",
    "method": "sgn0x_pty_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1a0e0",
    "method": "sgn0x_pty_mont_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "verified",
    "loc": "0x1a0e0",
    "method": "sgn0x_pty_mont_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1a140",
    "method": "sgn0_pty_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1a1e0",
    "method": "sgn0_pty_mont_384x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1a200",
    "method": "mulx_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1a300",
    "method": "mul_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1aa00",
    "method": "sqrx_mont_384",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1ab00",
    "method": "sqr_n_mul_mont_383",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1ab40",
    "method": "sqrx_n_mul_mont_383",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1b240",
    "method": "sqr_mont_382x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1b2c0",
    "method": "sqrx_mont_382x",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1b440",
    "method": "mul_mont_sparse_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1b4a0",
    "method": "sqr_mont_sparse_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1b4e0",
    "method": "mulx_mont_sparse_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1b540",
    "method": "sqrx_mont_sparse_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1b820",
    "method": "from_mont_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1b8a0",
    "method": "redc_mont_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1b940",
    "method": "fromx_mont_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1b9c0",
    "method": "redcx_mont_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1bc00",
    "method": "add_mod_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1bc80",
    "method": "mul_by_3_mod_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1bd20",
    "method": "lshift_mod_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1bd80",
    "method": "rshift_mod_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1be20",
    "method": "cneg_mod_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "0x1bec0",
    "method": "sub_mod_256",
    "type": "method",
    "specification": "unknown"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(p : Prelude.Integer)\n-> (q : Prelude.Integer)\n-> let { x@1 = (p,q)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/Parameters/Fp.1 x@1)\n         (cryptol:fp_add#8044 x@1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(p : Prelude.Integer)\n-> (q : Prelude.Integer)\n-> let { x@1 = (p,q)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/Parameters/Fp.2.1 x@1)\n         (cryptol:fp_div#8043 x@1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(p : Prelude.Integer)\n-> (q : Prelude.Integer)\n-> let { x@1 = (p,q)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1 x@1)\n         (cryptol:fp_mul#8046 x@1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(p : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.1 p)\n        (cryptol:fp_neg#8039 p))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(p : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.2.2.1 p)\n        (cryptol:fp_sq#8045 p))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(u : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer\n           cryptol:/HashToCurveE1/Curve_E'\n           (cryptol:/HashToCurveE1/map_to_curve_simple_swu u))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1\n           (cryptol:/BLSFieldExtras/fp_exp x k,x))\n        (cryptol:/BLSFieldExtras/fp_exp x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1\n           (x,cryptol:/BLSFieldExtras/fp_exp x k))\n        (cryptol:/BLSFieldExtras/fp_exp x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> (n : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/BLSFieldExtras/fp_exp (cryptol:/BLSFieldExtras/fp_exp x n) k)\n        (cryptol:/BLSFieldExtras/fp_exp x\n           (Cryptol.ecMul Prelude.Integer Cryptol.PRingInteger k n)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> (n : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1\n           (cryptol:/BLSFieldExtras/fp_exp x n,\n            cryptol:/BLSFieldExtras/fp_exp x k))\n        (cryptol:/BLSFieldExtras/fp_exp x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k n)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:redc_mont_384#7427\n           (cryptol:/implementation/Fp12/Fpx2.2.2.2.2.2.2.2.1 (x,y)))\n        (cryptol:toM#7869\n           (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1\n              (cryptol:redc_mont_384#7427 x,cryptol:redc_mont_384#7427 y))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> let { x@1 = (x,y)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/Parameters/Fp.2.2.2.2.2.1 x@1)\n         (cryptol:fp_is_equal#8040 x@1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/BLSFieldExtras/is_square_fp x)\n        (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger x\n           (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.2.2.1\n              (cryptol:/BLSFieldExtras/sqrt_fp x))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant\n           (cryptol:/implementation/Field/fp_rep x))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fpx2_invariant\n           (cryptol:/implementation/Field/fpx2_rep x))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fp_abs\n           (cryptol:/implementation/Field/fp_rep x))\n        x)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "(x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp2_invariant\n           (cryptol:/implementation/Field/fp2_rep x))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n     cryptol:/Parameters/Fp.2.2.2.1\n     cryptol:fp_zero#8042)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger cryptol:/Parameters/Fp.2.2.1\n     cryptol:fp_unit#8041)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n      x@4 = x@3.2.2.2\n      x@5 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : x@2)\n-> (y : x@2)\n-> (C : x@2)\n-> let { x@6 = x@3.1 (cryptol:/BLSFieldExtras/sqrt_fp2_c3,x)\n         x@7 = x@3.1 (cryptol:/BLSFieldExtras/sqrt_fp2_c2,x)\n         x@8 = Cryptol.ecEq x@2 x@5 (x@4.1 x@6) y\n         x@9 = Cryptol.ecEq x@2 x@5 (x@4.1 x@7) y\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 x@5\n         (Prelude.ite x@2 x@8 x@6 (Prelude.ite x@2 x@9 x@7 C))\n         (Prelude.ite x@2 x@9 x@7 (Prelude.ite x@2 x@8 x@6 C)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.TCNum 64\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = cryptol:/HashToCurveE1Aux/h_eff\n    }\n in (p : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/mult x@2 Prelude.Integer\n           cryptol:/Parameters/E\n           x@4\n           p)\n        (cryptol:e1_scalar_mult#6740 (cryptol:/Parameters/to_Fp x@2 x@4) p))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Prelude.Integer * x@3\n    }\n in (p1 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair Prelude.Integer x@3 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/point_add Prelude.Integer\n           cryptol:/Parameters/Fp\n           (x@2,x@2,x@2)\n           p1)\n        p1)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = x@2,x@2,x@2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Integer * x@3)\n         (Cryptol.PEqPair Prelude.Integer x@3 x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n         (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n            cryptol:/Parameters/Fp\n            x@4)\n         x@4)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/HashToCurveE1/Curve_E'\n    }\n in (p1 : x@3)\n-> (p2 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4\n           (cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1\n              p2\n              cryptol:/HashToCurveE1/A'\n              Prelude.False))\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@4\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4 p1)\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4 p2)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/Parameters/E\n    }\n in (p1 : x@3)\n-> (p2 : x@3)\n-> (a4 : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4\n           (cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1\n              p2\n              a4\n              Prelude.True))\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@4\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4 p1)\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4 p2)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/Parameters/E\n    }\n in (p1 : x@3)\n-> (p2 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4\n           (cryptol:/implementation/CurveOperation/point_add Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1\n              p2))\n        (cryptol:add'#6691 Prelude.Integer x@1 x@4\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4 p1)\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4 p2)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/Parameters/Fp\n    }\n in (p : x@3)\n-> (q : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/Main/dbl_n_add p (Prelude.natToInt 16) q)\n        (cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer x@4\n           (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n              x@4\n              (cryptol:/implementation/CurveOperation/point_double\n                 Prelude.Integer\n                 x@4\n                 (cryptol:/implementation/CurveOperation/point_double\n                    Prelude.Integer\n                    x@4\n                    (cryptol:/implementation/CurveOperation/point_double\n                       Prelude.Integer\n                       x@4\n                       (cryptol:/implementation/CurveOperation/point_double\n                          Prelude.Integer\n                          x@4\n                          (cryptol:/implementation/CurveOperation/point_double\n                             Prelude.Integer\n                             x@4\n                             (cryptol:/implementation/CurveOperation/point_double\n                                Prelude.Integer\n                                x@4\n                                (cryptol:/implementation/CurveOperation/point_double\n                                   Prelude.Integer\n                                   x@4\n                                   (cryptol:/implementation/CurveOperation/point_double\n                                      Prelude.Integer\n                                      x@4\n                                      (cryptol:/implementation/CurveOperation/point_double\n                                         Prelude.Integer\n                                         x@4\n                                         (cryptol:/implementation/CurveOperation/point_double\n                                            Prelude.Integer\n                                            x@4\n                                            (cryptol:/implementation/CurveOperation/point_double\n                                               Prelude.Integer\n                                               x@4\n                                               (cryptol:/implementation/CurveOperation/point_double\n                                                  Prelude.Integer\n                                                  x@4\n                                                  (cryptol:/implementation/CurveOperation/point_double\n                                                     Prelude.Integer\n                                                     x@4\n                                                     (cryptol:/implementation/CurveOperation/point_double\n                                                        Prelude.Integer\n                                                        x@4\n                                                        (cryptol:/implementation/CurveOperation/point_double\n                                                           Prelude.Integer\n                                                           x@4\n                                                           p))))))))))))))))\n           q\n           x@4.2.2.2.1\n           Prelude.True))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/Parameters/Fp\n    }\n in (p : x@3)\n-> (q : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/Main/dbl_n_add p (Prelude.natToInt 2) q)\n        (cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer x@4\n           (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n              x@4\n              (cryptol:/implementation/CurveOperation/point_double\n                 Prelude.Integer\n                 x@4\n                 p))\n           q\n           x@4.2.2.2.1\n           Prelude.True))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/Parameters/Fp\n    }\n in (p : x@3)\n-> (q : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/Main/dbl_n_add p (Prelude.natToInt 3) q)\n        (cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer x@4\n           (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n              x@4\n              (cryptol:/implementation/CurveOperation/point_double\n                 Prelude.Integer\n                 x@4\n                 (cryptol:/implementation/CurveOperation/point_double\n                    Prelude.Integer\n                    x@4\n                    p)))\n           q\n           x@4.2.2.2.1\n           Prelude.True))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/Parameters/Fp\n    }\n in (p : x@3)\n-> (q : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/Main/dbl_n_add p (Prelude.natToInt 32) q)\n        (cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer x@4\n           (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n              x@4\n              (cryptol:/implementation/CurveOperation/point_double\n                 Prelude.Integer\n                 x@4\n                 (cryptol:/implementation/CurveOperation/point_double\n                    Prelude.Integer\n                    x@4\n                    (cryptol:/implementation/CurveOperation/point_double\n                       Prelude.Integer\n                       x@4\n                       (cryptol:/implementation/CurveOperation/point_double\n                          Prelude.Integer\n                          x@4\n                          (cryptol:/implementation/CurveOperation/point_double\n                             Prelude.Integer\n                             x@4\n                             (cryptol:/implementation/CurveOperation/point_double\n                                Prelude.Integer\n                                x@4\n                                (cryptol:/implementation/CurveOperation/point_double\n                                   Prelude.Integer\n                                   x@4\n                                   (cryptol:/implementation/CurveOperation/point_double\n                                      Prelude.Integer\n                                      x@4\n                                      (cryptol:/implementation/CurveOperation/point_double\n                                         Prelude.Integer\n                                         x@4\n                                         (cryptol:/implementation/CurveOperation/point_double\n                                            Prelude.Integer\n                                            x@4\n                                            (cryptol:/implementation/CurveOperation/point_double\n                                               Prelude.Integer\n                                               x@4\n                                               (cryptol:/implementation/CurveOperation/point_double\n                                                  Prelude.Integer\n                                                  x@4\n                                                  (cryptol:/implementation/CurveOperation/point_double\n                                                     Prelude.Integer\n                                                     x@4\n                                                     (cryptol:/implementation/CurveOperation/point_double\n                                                        Prelude.Integer\n                                                        x@4\n                                                        (cryptol:/implementation/CurveOperation/point_double\n                                                           Prelude.Integer\n                                                           x@4\n                                                           (cryptol:/implementation/CurveOperation/point_double\n                                                              Prelude.Integer\n                                                              x@4\n                                                              (cryptol:/implementation/CurveOperation/point_double\n                                                                 Prelude.Integer\n                                                                 x@4\n                                                                 (cryptol:/implementation/CurveOperation/point_double\n                                                                    Prelude.Integer\n                                                                    x@4\n                                                                    (cryptol:/implementation/CurveOperation/point_double\n                                                                       Prelude.Integer\n                                                                       x@4\n                                                                       (cryptol:/implementation/CurveOperation/point_double\n                                                                          Prelude.Integer\n                                                                          x@4\n                                                                          (cryptol:/implementation/CurveOperation/point_double\n                                                                             Prelude.Integer\n                                                                             x@4\n                                                                             (cryptol:/implementation/CurveOperation/point_double\n                                                                                Prelude.Integer\n                                                                                x@4\n                                                                                (cryptol:/implementation/CurveOperation/point_double\n                                                                                   Prelude.Integer\n                                                                                   x@4\n                                                                                   (cryptol:/implementation/CurveOperation/point_double\n                                                                                      Prelude.Integer\n                                                                                      x@4\n                                                                                      (cryptol:/implementation/CurveOperation/point_double\n                                                                                         Prelude.Integer\n                                                                                         x@4\n                                                                                         (cryptol:/implementation/CurveOperation/point_double\n                                                                                            Prelude.Integer\n                                                                                            x@4\n                                                                                            (cryptol:/implementation/CurveOperation/point_double\n                                                                                               Prelude.Integer\n                                                                                               x@4\n                                                                                               (cryptol:/implementation/CurveOperation/point_double\n                                                                                                  Prelude.Integer\n                                                                                                  x@4\n                                                                                                  (cryptol:/implementation/CurveOperation/point_double\n                                                                                                     Prelude.Integer\n                                                                                                     x@4\n                                                                                                     (cryptol:/implementation/CurveOperation/point_double\n                                                                                                        Prelude.Integer\n                                                                                                        x@4\n                                                                                                        (cryptol:/implementation/CurveOperation/point_double\n                                                                                                           Prelude.Integer\n                                                                                                           x@4\n                                                                                                           p))))))))))))))))))))))))))))))))\n           q\n           x@4.2.2.2.1\n           Prelude.True))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/Parameters/Fp\n    }\n in (p : x@3)\n-> (q : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/Main/dbl_n_add p (Prelude.natToInt 9) q)\n        (cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer x@4\n           (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n              x@4\n              (cryptol:/implementation/CurveOperation/point_double\n                 Prelude.Integer\n                 x@4\n                 (cryptol:/implementation/CurveOperation/point_double\n                    Prelude.Integer\n                    x@4\n                    (cryptol:/implementation/CurveOperation/point_double\n                       Prelude.Integer\n                       x@4\n                       (cryptol:/implementation/CurveOperation/point_double\n                          Prelude.Integer\n                          x@4\n                          (cryptol:/implementation/CurveOperation/point_double\n                             Prelude.Integer\n                             x@4\n                             (cryptol:/implementation/CurveOperation/point_double\n                                Prelude.Integer\n                                x@4\n                                (cryptol:/implementation/CurveOperation/point_double\n                                   Prelude.Integer\n                                   x@4\n                                   (cryptol:/implementation/CurveOperation/point_double\n                                      Prelude.Integer\n                                      x@4\n                                      p)))))))))\n           q\n           x@4.2.2.2.1\n           Prelude.True))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/E\n    }\n in (P : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n           (cryptol:/ShortWeierstrassCurve/projectify Prelude.Integer x@3 P))\n        P)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : (Prelude.Integer * x@2))\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n           (cryptol:/implementation/CurveOperation/point_add_affine\n              Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1\n              p2))\n        (cryptol:add'#6691 Prelude.Integer x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3 p1)\n           p2))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : (Prelude.Integer * x@2))\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n           (cryptol:/implementation/CurveOperation/point_dadd_affine\n              Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1\n              p2))\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@3\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3 p1)\n           p2))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : (Prelude.Integer * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n           (cryptol:/implementation/CurveOperation/point_neg Prelude.Integer\n              cryptol:/Parameters/Fp\n              p1))\n        (cryptol:/ShortWeierstrassCurve/neg Prelude.Integer x@3\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3 p1)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : (Prelude.Integer * x@2))\n-> let { x@4 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n         (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n            (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n               cryptol:/Parameters/Fp\n               p1))\n         (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@3 x@4 x@4))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@3\n           (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer x@3)\n           p1)\n        p1)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@3 p1\n           (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer x@3))\n        p1)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp\n      x@4 = cryptol:/Parameters/E\n    }\n in (p : (Prelude.Integer * x@2))\n-> let { x@5 = cryptol:/implementation/CurveOperation/point_double\n                 Prelude.Integer\n                 x@3\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n         (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4\n            (cryptol:/implementation/CurveOperation/point_add Prelude.Integer\n               x@3\n               x@5\n               p))\n         (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@4\n            (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4 x@5)\n            (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4 p)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp.2\n      x@4 = x@3.2\n      x@5 = x@4.2\n      x@6 = x@5.2.2\n      x@7 = x@6.2.2\n    }\n in (xn : Prelude.Integer)\n-> (xd : Prelude.Integer)\n-> (yn : Prelude.Integer)\n-> let { x@8 = (xn,xd)\n         x@9 = (x@7.1 x@8,x@7.1 (yn,x@7.1 (xd,x@7.2.2.2.1 xd)),xd)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n         (cryptol:affinify_nz#8047 x@9)\n         (Prelude.ite x@2 (Prelude.not (x@6.1 (xd,x@5.1)))\n            (x@3.1 x@8,x@3.1 (yn,x@4.1))\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * x@2)\n               x@2\n               cryptol:affinify_nz#8047\n               x@9)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp.2.2.2\n    }\n in (p : (Prelude.Integer * x@2))\n-> let { x@4 = cryptol:affinify_nz#8047 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n         (cryptol:iso_map_nz#8069 x@4)\n         (Prelude.ite x@2 (Prelude.not (x@3.2.2.1 (p.2.2,x@3.1)))\n            (cryptol:affinify_nz#8047 (cryptol:/Main/isogeny_map_to_E1_impl p))\n            (cryptol:/implementation/CryptolHelpers/apply x@2 x@2\n               cryptol:iso_map_nz#8069\n               x@4)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer\n           cryptol:/Parameters/E\n           (cryptol:e1_scalar_mult#6740 k p1)\n           (cryptol:e1_scalar_mult#6740 k' p1))\n        (cryptol:e1_scalar_mult#6740\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k k')\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:add'#6691 Prelude.Integer x@1 cryptol:/Parameters/E\n           (cryptol:e1_scalar_mult#6740 k p1)\n           (cryptol:e1_scalar_mult#6740 k' p1))\n        (cryptol:e1_scalar_mult#6740\n           (cryptol:add_exponents'#6744 k k' (cryptol:e1_order#6739 p1))\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:e1_scalar_mult#6740 k (cryptol:e1_scalar_mult#6740 k' p1))\n        (cryptol:e1_scalar_mult#6740\n           (Cryptol.ecMul Prelude.Integer Cryptol.PRingInteger k k')\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer\n           cryptol:/Parameters/E\n           (cryptol:e1_scalar_mult#6740 k p1)\n           p1)\n        (cryptol:e1_scalar_mult#6740\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer\n           cryptol:/Parameters/E\n           p1\n           (cryptol:e1_scalar_mult#6740 k p1))\n        (cryptol:e1_scalar_mult#6740\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/neg Prelude.Integer\n           cryptol:/Parameters/E\n           (cryptol:e1_scalar_mult#6740 k p1))\n        (cryptol:e1_scalar_mult#6740\n           (Cryptol.ecNeg Prelude.Integer Cryptol.PRingInteger k)\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:add'#6691 Prelude.Integer x@1 cryptol:/Parameters/E\n           (cryptol:e1_scalar_mult#6740 k p1)\n           p1)\n        (cryptol:e1_scalar_mult#6740\n           (cryptol:add_exponents'#6744 k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger)\n              (cryptol:e1_order#6739 p1))\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:add'#6691 Prelude.Integer x@1 cryptol:/Parameters/E p1\n           (cryptol:e1_scalar_mult#6740 k p1))\n        (cryptol:e1_scalar_mult#6740\n           (cryptol:add_exponents'#6744 k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger)\n              (cryptol:e1_order#6739 p1))\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p : (Prelude.Integer * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n           cryptol:/HashToCurveE1/Curve_E'\n           p)\n        (cryptol:affinify_nz#8047 p))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p : (Prelude.Integer * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n           cryptol:/Parameters/E\n           p)\n        (cryptol:affinify_nz#8047 p))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p : (Prelude.Integer * x@2))\n-> let { x@3 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/HashToCurveE1/Curve_E'\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n         (cryptol:/HashToCurveE1/iso_map x@3)\n         (Prelude.ite x@2\n            (cryptol:/ShortWeierstrassCurve/is_zero Prelude.Integer\n               cryptol:/Parameters/Fp\n               p.2.2)\n            (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer\n               cryptol:/Parameters/E)\n            (cryptol:/implementation/CryptolHelpers/apply x@2 x@2\n               cryptol:/HashToCurveE1/iso_map\n               x@3)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@2))\n-> (i : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:affinify_E#6751 (cryptol:small_mult#6763 i p1))\n        (cryptol:e1_scalar_mult#6740 i (cryptol:affinify_E#6751 p1)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer\n           cryptol:/Parameters/E\n           p1\n           p1)\n        (cryptol:e1_scalar_mult#6740\n           (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PLiteralInteger)\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.natToInt 0\n    }\n in (u : Prelude.Integer)\n-> let { x@3 = cryptol:/Main/map_to_curve_simple_swu_impl u\n         x@4 = x@3.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (Prelude.not\n            (cryptol:/Cryptol/%5c%2f\n               (Cryptol.ecEq (Prelude.Integer * Prelude.Integer)\n                  (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n                  (x@3.1,x@4.1)\n                  (x@2,x@2))\n               (Cryptol.ecEq Prelude.Integer x@1 x@4.2 x@2)))\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = cryptol:/Parameters/Fp.2\n    }\n in (u : Prelude.Integer)\n-> let { x@3 = cryptol:/HashToCurveE1Aux/map_to_curve_simple_swu_3mod4 u\n         x@4 = x@3.2\n         x@5 = x@4.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Integer * Prelude.Integer)\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n         (x@2.1 (x@3.1,x@4.1),x@2.1 (x@5.1,x@5.2))\n         (cryptol:/HashToCurveE1/map_to_curve_simple_swu u))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 768\n      x@4 = Prelude.Vec 768 Prelude.Bool\n      x@5 = Cryptol.PIntegralSeqBool x@3\n    }\n in (x : x@4)\n-> (y : x@4)\n-> let { x@6 = Cryptol.ecDiv x@4 x@5 x y\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (Cryptol.ecToInteger x@4 x@5 x@6)\n         (Prelude.ite Prelude.Integer\n            (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool x@3) y\n               (Cryptol.ecNumber (Cryptol.TCNum 0) x@4\n                  (Cryptol.PLiteralSeqBool x@3)))\n            (cryptol:/implementation/CryptolHelpers/apply x@4 Prelude.Integer\n               (Cryptol.ecToInteger x@4 x@5)\n               x@6)\n            (Cryptol.ecMod Prelude.Integer x@1\n               (Cryptol.ecDiv Prelude.Integer x@1\n                  (Cryptol.ecToInteger x@4 x@5 x)\n                  (Cryptol.ecToInteger x@4 x@5 y))\n               (Cryptol.ecExp Prelude.Integer Prelude.Integer\n                  Cryptol.PRingInteger\n                  x@1\n                  (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n                  (Cryptol.ecNumber x@3 Prelude.Integer x@2)))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 768\n      x@4 = Prelude.Vec 768 Prelude.Bool\n      x@5 = Cryptol.PIntegralSeqBool x@3\n    }\n in (x : x@4)\n-> (y : x@4)\n-> let { x@6 = Cryptol.ecMod x@4 x@5 x y\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (Cryptol.ecToInteger x@4 x@5 x@6)\n         (Prelude.ite Prelude.Integer\n            (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool x@3) y\n               (Cryptol.ecNumber (Cryptol.TCNum 0) x@4\n                  (Cryptol.PLiteralSeqBool x@3)))\n            (cryptol:/implementation/CryptolHelpers/apply x@4 Prelude.Integer\n               (Cryptol.ecToInteger x@4 x@5)\n               x@6)\n            (Cryptol.ecMod Prelude.Integer x@1\n               (Cryptol.ecMod Prelude.Integer x@1\n                  (Cryptol.ecToInteger x@4 x@5 x)\n                  (Cryptol.ecToInteger x@4 x@5 y))\n               (Cryptol.ecExp Prelude.Integer Prelude.Integer\n                  Cryptol.PRingInteger\n                  x@1\n                  (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n                  (Cryptol.ecNumber x@3 Prelude.Integer x@2)))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 768\n      x@4 = Prelude.Vec 768 Prelude.Bool\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@4 (Cryptol.PIntegralSeqBool x@3)\n           (Cryptol.ecFromInteger x@4 (Cryptol.PRingSeqBool x@3) x))\n        (Cryptol.ecMod Prelude.Integer x@1 x\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer Cryptol.PRingInteger\n              x@1\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n              (Cryptol.ecNumber x@3 Prelude.Integer x@2))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fpx2_abs\n           (cryptol:/implementation/Field/fpx2_rep x))\n        (Cryptol.ecMod Prelude.Integer x@1 x\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer Cryptol.PRingInteger\n              x@1\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n              (Cryptol.ecNumber (Cryptol.TCNum 768) Prelude.Integer x@2))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:abs_384#7435 (cryptol:rep_384#7433 x))\n        (Cryptol.ecMod Prelude.Integer x@1 x\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer Cryptol.PRingInteger\n              x@1\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n              (Cryptol.ecNumber (Cryptol.TCNum 384) Prelude.Integer x@2))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = cryptol:/Parameters/Fp.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (x@2.1 (x@2.2.1,cryptol:/BLSFieldExtras/sqrt_fp x))\n        (cryptol:/BLSFieldExtras/fp_exp x\n           (Cryptol.ecDiv Prelude.Integer Cryptol.PIntegralInteger\n              (Cryptol.ecMinus Prelude.Integer Cryptol.PRingInteger\n                 (Cryptol.ecNumber\n                    (Cryptol.TCNum\n                       4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787)\n                    Prelude.Integer\n                    x@1)\n                 (Cryptol.ecNumber (Cryptol.TCNum 3) Prelude.Integer x@1))\n              (Cryptol.ecNumber (Cryptol.TCNum 4) Prelude.Integer x@1))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/BLSFieldExtras/inverse_fp x)\n        (cryptol:/BLSFieldExtras/fp_exp x\n           (Cryptol.ecMinus Prelude.Integer Cryptol.PRingInteger\n              (Cryptol.ecNumber\n                 (Cryptol.TCNum\n                    4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787)\n                 Prelude.Integer\n                 x@1)\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@1))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/BLSFieldExtras/sqrt_fp x)\n        (cryptol:/BLSFieldExtras/fp_exp x\n           (Cryptol.ecDiv Prelude.Integer Cryptol.PIntegralInteger\n              (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                 (Cryptol.ecNumber\n                    (Cryptol.TCNum\n                       4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787)\n                    Prelude.Integer\n                    x@1)\n                 (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n              (Cryptol.ecNumber (Cryptol.TCNum 4) Prelude.Integer x@1))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PRingInteger\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 768\n      x@5 = Prelude.Vec 768 Prelude.Bool\n      x@6 = Cryptol.PIntegralSeqBool x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@5 x@6\n           (Cryptol.ecMinus x@5 (Cryptol.PRingSeqBool x@4) x y))\n        (Cryptol.ecMod Prelude.Integer x@2\n           (Cryptol.ecMinus Prelude.Integer x@1 (Cryptol.ecToInteger x@5 x@6 x)\n              (Cryptol.ecToInteger x@5 x@6 y))\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer x@1 x@2\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@3)\n              (Cryptol.ecNumber x@4 Prelude.Integer x@3))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PRingInteger\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 768\n      x@5 = Prelude.Vec 768 Prelude.Bool\n      x@6 = Cryptol.PIntegralSeqBool x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@5 x@6\n           (Cryptol.ecMul x@5 (Cryptol.PRingSeqBool x@4) x y))\n        (Cryptol.ecMod Prelude.Integer x@2\n           (Cryptol.ecMul Prelude.Integer x@1 (Cryptol.ecToInteger x@5 x@6 x)\n              (Cryptol.ecToInteger x@5 x@6 y))\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer x@1 x@2\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@3)\n              (Cryptol.ecNumber x@4 Prelude.Integer x@3))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PRingInteger\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 768\n      x@5 = Prelude.Vec 768 Prelude.Bool\n      x@6 = Cryptol.PIntegralSeqBool x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@5 x@6\n           (Cryptol.ecPlus x@5 (Cryptol.PRingSeqBool x@4) x y))\n        (Cryptol.ecMod Prelude.Integer x@2\n           (Cryptol.ecPlus Prelude.Integer x@1 (Cryptol.ecToInteger x@5 x@6 x)\n              (Cryptol.ecToInteger x@5 x@6 y))\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer x@1 x@2\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@3)\n              (Cryptol.ecNumber x@4 Prelude.Integer x@3))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 2\n      x@2 = cryptol:/Parameters/Fp\n      x@3 = x@2.2\n      x@4 = x@3.2.2.2.2.2.2.2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = cryptol:/Parameters/Fp_2.2\n      x@7 = x@4.2.2\n    }\n in (x : x@5)\n-> let { x@8 = Cryptol.eListSel Prelude.Integer x@1 x 1\n         x@9 = Cryptol.eListSel Prelude.Integer x@1 x 0\n         x@10 = x@2.1 (x@7.1 x@8,x@7.1 x@9)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5 (Cryptol.PEqSeq x@1 Prelude.Integer Cryptol.PEqInteger)\n         (x@6.1 (x@6.2.1,x))\n         [x@4.1 (x@3.1 (x@9,x@10)), x@3.1 (x@8,x@10)])",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 768\n      x@2 = Prelude.Vec 768 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecEq x@2 (Cryptol.PEqSeqBool x@1) x y)\n        (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 768\n      x@2 = Prelude.Vec 768 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecGt x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 768\n      x@2 = Prelude.Vec 768 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecGtEq x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecGtEq Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 768\n      x@2 = Prelude.Vec 768 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecLt x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecLt Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 768\n      x@2 = Prelude.Vec 768 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecLtEq x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecLtEq Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 768\n      x@2 = Prelude.Vec 768 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecNotEq x@2 (Cryptol.PEqSeqBool x@1) x y)\n        (Cryptol.ecNotEq Prelude.Integer Cryptol.PEqInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 768\n      x@2 = Prelude.Vec 768 Prelude.Bool\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqSeqBool x@1)\n        (Cryptol.ecFromInteger x@2 (Cryptol.PRingSeqBool x@1)\n           (Cryptol.ecToInteger x@2 (Cryptol.PIntegralSeqBool x@1) x))\n        x)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Bool\n      x@2 = Prelude.Integer\n      -> x@1\n      x@3 = cryptol:/Parameters/Fp.2.2.2.1\n      x@4 = cryptol:/Parameters/E\n    }\n in (p : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> let { x@5 = cryptol:/implementation/Field/fp_abs\n                 (cryptol:/implementation/CurveOperation/POINTonE1_rep p).2.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (Prelude.intEq x@5 x@3)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n               x@4\n               p)\n            (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@4\n               (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4 p))\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer x@1\n               Prelude.intEq\n               x@5\n               x@3)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Prelude.Integer * x@3\n      x@5 = x@3\n      -> Prelude.Integer\n      x@6 = cryptol:/Parameters/E\n    }\n in (p : x@4)\n-> let { x@7 = cryptol:/Main/isogeny_map_to_E1_impl p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 x@7)\n         (Prelude.ite x@3\n            (cryptol:/ShortWeierstrassCurve/is_zero Prelude.Integer\n               cryptol:/Parameters/Fp\n               p.2.2)\n            (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer x@6)\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@5 * x@5 * Prelude.Integer * Prelude.Integer * x@1 * (x@3\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@5 * x@1 * x@1 * x@1 * x@5)\n               (x@4\n                -> x@3)\n               (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer)\n               x@6\n               x@7)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.natToInt 0\n      x@4 = Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Integer * x@4\n      x@6 = x@4\n      -> Prelude.Integer\n      x@7 = cryptol:/HashToCurveE1/Curve_E'\n    }\n in (p : x@5)\n-> let { x@8 = p.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@7\n            p)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer\n                  x@7\n                  (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@7\n                     p))\n               (Prelude.not\n                  (cryptol:/Cryptol/%5c%2f\n                     (Cryptol.ecEq x@4\n                        (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2\n                           x@2)\n                        (p.1,x@8.1)\n                        (x@3,x@3))\n                     (Cryptol.ecEq Prelude.Integer x@2 x@8.2 x@3))))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@6 * x@6 * Prelude.Integer * Prelude.Integer * x@1 * (x@4\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@6 * x@1 * x@1 * x@1 * x@6)\n               (x@5\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@7\n               p)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = x@2\n      -> Prelude.Integer\n      x@5 = cryptol:/HashToCurveE1/Curve_E'\n    }\n in (p : x@3)\n-> (q : x@3)\n-> let { x@6 = cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer\n                 cryptol:/Parameters/Fp\n                 p\n                 q\n                 cryptol:/HashToCurveE1/A'\n                 Prelude.False\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer\n                  x@5\n                  p)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer\n                  x@5\n                  q))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@4 * x@1 * x@1 * x@1 * x@4)\n               (x@3\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@5\n               x@6)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = x@2\n      -> Prelude.Integer\n      x@5 = cryptol:/Parameters/E\n    }\n in (P : x@3)\n-> (Q : x@2)\n-> let { x@6 = cryptol:/implementation/CurveOperation/point_dadd_affine\n                 Prelude.Integer\n                 cryptol:/Parameters/Fp\n                 P\n                 Q\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer\n                  x@5\n                  P)\n               (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer\n                  x@5\n                  Q))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@4 * x@1 * x@1 * x@1 * x@4)\n               (x@3\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@5\n               x@6)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = x@2\n      -> Prelude.Integer\n      x@5 = cryptol:/Parameters/E\n    }\n in (P : x@3)\n-> (Q : x@3)\n-> (a4 : Prelude.Integer)\n-> let { x@6 = cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer\n                 cryptol:/Parameters/Fp\n                 P\n                 Q\n                 a4\n                 Prelude.True\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer\n                  x@5\n                  P)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer\n                  x@5\n                  Q))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@4 * x@1 * x@1 * x@1 * x@4)\n               (x@3\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@5\n               x@6)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = x@2\n      -> Prelude.Integer\n      x@5 = cryptol:/Parameters/E\n    }\n in (P : x@3)\n-> let { x@6 = cryptol:/implementation/CurveOperation/point_double\n                 Prelude.Integer\n                 cryptol:/Parameters/Fp\n                 P\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n               x@5\n               P)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@4 * x@1 * x@1 * x@1 * x@4)\n               (x@3\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@5\n               x@6)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = x@2\n      -> Prelude.Integer\n      x@5 = cryptol:/Parameters/E\n    }\n in (P : x@3)\n-> let { x@6 = cryptol:/implementation/CurveOperation/point_neg Prelude.Integer\n                 cryptol:/Parameters/Fp\n                 P\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n               x@5\n               P)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@4 * x@1 * x@1 * x@1 * x@4)\n               (x@3\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@5\n               x@6)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = x@2\n      -> Prelude.Integer\n      x@4 = x@2\n      -> Prelude.Bool\n      x@5 = cryptol:/HashToCurveE1/Curve_E'\n    }\n in (p : (Prelude.Integer * x@2))\n-> let { x@6 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@5 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@5 x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer\n                  x@5\n                  p)\n               (Prelude.not\n                  (cryptol:/ShortWeierstrassCurve/is_zero Prelude.Integer\n                     cryptol:/Parameters/Fp\n                     p.2.2)))\n            Prelude.False\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@3 * x@3 * Prelude.Integer * Prelude.Integer * x@1 * x@4 * (Prelude.Integer\n                                                                                                                 -> Prelude.Bool) * x@3 * x@1 * x@1 * x@1 * x@3)\n               x@4\n               (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer)\n               x@5\n               x@6)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Cryptol.TCNum 384\n    }\n in (x : Prelude.Vec 768 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 6 x@3)\n        (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64))\n        (cryptol:/implementation/Types/vec384_rep\n           (cryptol:mul_mont_p_bv#6129 (cryptol:redc_p_bv#6131 x)\n              (cryptol:/implementation/Types/vec384_abs\n                 [ Prelude.bvNat 64 17098105564519244256\n                 , Prelude.bvNat 64 3557706395579559416\n                 , Prelude.bvNat 64 11120290361046346205\n                 , Prelude.bvNat 64 3801124253586036577\n                 , Prelude.bvNat 64 2671430854784468776\n                 , Prelude.bvNat 64 767358375875140941 ])))\n        (cryptol:/implementation/Field/fp_rep\n           (cryptol:/Parameters/to_Fp x@4\n              (cryptol:/Cryptol/drop x@4 x@4 Prelude.Bool\n                 (Prelude.bvURem 768 x\n                    (Prelude.bvNat 768\n                       4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787))))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = cryptol:/Parameters/Fp_12.2\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (x@6.1 (x@6.2.1,x))\n        (cryptol:inverse_fp12'#7919 x))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 3\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = cryptol:/Parameters/Fp_2\n      x@5 = cryptol:/Parameters/u_plus_1\n      x@6 = x@4.2\n      x@7 = Prelude.Vec 3 x@3\n      x@8 = cryptol:/Parameters/Fp_6.2\n      x@9 = x@6.2.2.2.2.2.2\n      x@10 = x@9.2.2.2\n    }\n in (x : x@7)\n-> let { x@11 = Cryptol.eListSel x@3 x@2 x 2\n         x@12 = Cryptol.eListSel x@3 x@2 x 1\n         x@13 = Cryptol.eListSel x@3 x@2 x 0\n         x@14 = x@10.2 (x@10.1 x@11,x@9.1 (x@5,x@9.1 (x@12,x@13)))\n         x@15 = x@10.2 (x@9.1 (x@5,x@10.1 x@13),x@9.1 (x@11,x@12))\n         x@16 = x@10.2 (x@10.1 x@12,x@9.1 (x@11,x@13))\n         x@17 = x@4.1\n                  (x@9.1 (x@5,x@4.1 (x@9.1 (x@15,x@13),x@9.1 (x@16,x@12))),\n                   x@9.1 (x@14,x@11))\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@7\n         (Cryptol.PEqSeq x@2 x@3\n            (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n               Cryptol.PEqInteger))\n         (x@8.1 (x@8.2.1,x))\n         [x@6.1 (x@16,x@17), x@6.1 (x@15,x@17), x@6.1 (x@14,x@17)])",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Integer\n      -> Prelude.Integer\n      -> Prelude.Integer\n      x@3 = Prelude.Nat\n      -> Prelude.Integer\n      x@4 = Prelude.natToInt 1\n      x@5 = Prelude.natToInt 384\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Prelude.bvToInt 384 (Prelude.intToBv 384 x))\n        (Prelude.intMod x\n           (Prelude.ite Prelude.Integer (Prelude.intLe (Prelude.natToInt 0) x@5)\n              (Prelude.expByNat Prelude.Integer x@4 Prelude.intMul\n                 (Prelude.natToInt 2)\n                 (Prelude.intToNat x@5))\n              x@4)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Integer\n      -> Prelude.Integer\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = x@3\n      -> Prelude.Integer\n      x@5 = x@3\n      -> Prelude.Bool\n      x@6 = cryptol:/Parameters/E\n      x@7 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (P : (x@7 * x@7))\n-> let { x@8 = cryptol:/implementation/CurveOperation/POINTonE1_affine_abs P\n         x@9 = cryptol:sigma#6809 (cryptol:sigma#6809 x@8)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@6 x@9)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/CurveOperation/POINTonE1_affine_invariant\n               P)\n            (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@6 x@8)\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@2 * x@5 * (Prelude.Integer\n                                                                                                                 -> Prelude.Bool) * x@4 * x@2 * x@2 * x@2 * x@4)\n               x@5\n               (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer)\n               x@6\n               x@9)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Integer\n      -> Prelude.Integer\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = x@3\n      -> Prelude.Integer\n      x@5 = x@3\n      -> Prelude.Bool\n      x@6 = cryptol:/Parameters/E\n      x@7 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (P : (x@7 * x@7))\n-> let { x@8 = cryptol:/implementation/CurveOperation/POINTonE1_affine_abs P\n         x@9 = cryptol:sigma#6809 x@8\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@6 x@9)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/CurveOperation/POINTonE1_affine_invariant\n               P)\n            (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@6 x@8)\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@2 * x@5 * (Prelude.Integer\n                                                                                                                 -> Prelude.Bool) * x@4 * x@2 * x@2 * x@2 * x@4)\n               x@5\n               (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer)\n               x@6\n               x@9)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/fp6x2_mul x y))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.2.1 (x,y))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp_2.2.2.2\n      x@4 = cryptol:/Parameters/E'\n      x@5 = x@3.2.2\n      x@6 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (p : (x@6 * x@6 * x@6))\n-> let { x@7 = cryptol:/implementation/CurveOperation/POINTonE2_abs p\n         x@8 = (cryptol:/implementation/Field/fp2_abs p.2.2,x@3.1)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@5.1 x@8)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective x@2 x@4 x@7)\n            (cryptol:/ShortWeierstrassCurve/is_point_O x@2 x@4\n               (cryptol:/ShortWeierstrassCurve/affinify x@2 x@4 x@7))\n            (cryptol:/implementation/CryptolHelpers/apply (x@2 * x@2)\n               Prelude.Bool\n               x@5.1\n               x@8)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/FieldExtras/F_expt x@2 (Cryptol.TCNum 759)\n           cryptol:/Parameters/Fp_2\n           x\n           (Prelude.bvNat 759\n              1001205140483106588246484290269935788605945006208159541241399033561623546780709821462541004956387089373434649096260670658193992783731681621012512651314777238193313314641988297376025498093520728838658813979860931248214124593092836))\n        (cryptol:fp2_exp#6840 x\n           (Prelude.natToInt\n              1001205140483106588246484290269935788605945006208159541241399033561623546780709821462541004956387089373434649096260670658193992783731681621012512651314777238193313314641988297376025498093520728838658813979860931248214124593092836)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 12 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 12) x@2\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fpx2_rep\n           (cryptol:/implementation/Field/fpx2_abs x))\n        x)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Prelude.Vec 2 x@3\n    }\n in (x : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) x@3\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (cryptol:/implementation/Field/fp2_normalize x)\n        (Prelude.ite x@4 (cryptol:/implementation/Field/fp2_invariant x) x\n           (cryptol:/implementation/CryptolHelpers/apply x@4 x@4\n              cryptol:/implementation/Field/fp2_normalize\n              x)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Prelude.Vec 2 x@3\n    }\n in (x : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) x@3\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (cryptol:/implementation/Field/fp2_rep\n           (cryptol:/implementation/Field/fp2_abs x))\n        (Prelude.ite x@4 (cryptol:/implementation/Field/fp2_invariant x) x\n           (cryptol:/implementation/Field/fp2_normalize x)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fp_normalize x)\n        (Prelude.ite x@3 (cryptol:/implementation/Field/fp_invariant x) x\n           (cryptol:/implementation/CryptolHelpers/apply x@3 x@3\n              cryptol:/implementation/Field/fp_normalize\n              x)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fp_rep\n           (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.2.1\n              (cryptol:/implementation/Field/fp_abs x)))\n        (cryptol:/implementation/Field/fp_normalize x))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fp_rep\n           (cryptol:/implementation/Field/fp_abs x))\n        (Prelude.ite x@3 (cryptol:/implementation/Field/fp_invariant x) x\n           (cryptol:/implementation/Field/fp_normalize x)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:rep_384#7433 (cryptol:abs_384#7435 x))\n        x)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = cryptol:/Parameters/Fp\n      x@3 = x@2.2.2.2.2.2.2.2.2\n      x@4 = cryptol:/Parameters/Fp_2.2.2.2\n      x@5 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (s : Prelude.Vec 2 Prelude.Integer)\n-> (i : Prelude.Vec 2 x@5)\n-> let { x@6 = cryptol:/implementation/Field/fp2_abs i\n         x@7 = x@4.2.2.2.2.2.2.2.1 s\n         x@8 = Prelude.at 2 Prelude.Integer x@7 0\n         x@9 = Prelude.at 2 Prelude.Integer x@7 1\n    }\n in Prelude.EqTrue\n      (Prelude.boolEq\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq\n            [ x@2.1 (x@8,Prelude.at 2 Prelude.Integer x@6 1)\n            , x@3.2.2.2\n                (x@9,\n                 cryptol:/implementation/Field/fp_abs (Prelude.at 2 x@5 i 0)) ]\n            x@4.1)\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq [x@9, x@3.1 x@8] x@6))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = cryptol:/Parameters/Fp\n      x@3 = x@2.2.2.2.2.2.2.2.2\n      x@4 = cryptol:/Parameters/Fp_2.2.2.2\n      x@5 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (s : Prelude.Vec 2 Prelude.Integer)\n-> (i : Prelude.Vec 2 x@5)\n-> let { x@6 = cryptol:/implementation/Field/fp2_abs i\n         x@7 = x@4.2.2.2.2.2.2.2.1 s\n         x@8 = Prelude.at 2 Prelude.Integer x@7 0\n         x@9 = Prelude.at 2 Prelude.Integer x@7 1\n    }\n in Prelude.EqTrue\n      (Prelude.boolEq\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq\n            [ x@3.2.2.2 (x@8,Prelude.at 2 Prelude.Integer x@6 1)\n            , x@2.1\n                (x@9,\n                 cryptol:/implementation/Field/fp_abs (Prelude.at 2 x@5 i 1)) ]\n            x@4.1)\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq [x@3.1 x@9, x@8] x@6))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = cryptol:/Parameters/Fp.2.2.2\n      x@3 = x@2.2.2\n      x@4 = cryptol:/Parameters/E\n      x@5 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p : (x@5 * x@5 * x@5))\n-> let { x@6 = cryptol:/implementation/CurveOperation/POINTonE1_abs p\n         x@7 = (cryptol:/implementation/Field/fp_abs p.2.2,x@2.1)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.1 x@7)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n               x@4\n               x@6)\n            (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@4\n               (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4\n                  x@6))\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer)\n               Prelude.Bool\n               x@3.1\n               x@7)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n-> let { x@3 = (cryptol:/implementation/Field/fp_abs x,\n                cryptol:/implementation/Field/montgomery_factor_p)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@2.1 x@3)\n         (Prelude.ite Prelude.Integer\n            (cryptol:/implementation/Field/fp_invariant x)\n            (cryptol:/Parameters/to_Fp (Cryptol.TCNum 384)\n               (cryptol:/implementation/Types/vec384_abs x))\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer)\n               Prelude.Integer\n               x@2.1\n               x@3)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = cryptol:/Parameters/Fp_2\n      x@3 = x@2.2.2.2\n      x@4 = x@3.2.2.2.2.2\n    }\n in (s : Prelude.Vec 2 Prelude.Integer)\n-> (i : Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))\n-> let { x@5 = cryptol:/implementation/Field/fp2_abs i\n         x@6 = x@4.2.2.1 s\n    }\n in Prelude.EqTrue\n      (Prelude.boolEq\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq (x@2.1 (x@6,x@5)) x@3.1)\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq (x@4.1 x@6) x@5))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2\n      x@3 = x@2.2.2.2.2.2.2.2\n    }\n in (s : Prelude.Vec 2 Prelude.Integer)\n-> (i : Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))\n-> let { x@4 = cryptol:/implementation/Field/fp2_abs i\n         x@5 = x@3.1 s\n    }\n in Prelude.EqTrue\n      (Prelude.boolEq\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq (x@3.2 (x@5,x@4)) x@2.1)\n         (Prelude.vecEq 2 Prelude.Integer Prelude.intEq x@5 x@4))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/E'\n    }\n in (p : (x@1 * x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@2\n           (cryptol:/implementation/Psi/psi_imp p))\n        (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@2 p))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/E'\n    }\n in (p : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@2\n           (cryptol:/ShortWeierstrassCurve/projectify x@1 x@2 p))\n        (cryptol:/ShortWeierstrassCurve/is_point_affine x@1 x@2 p))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2\n      x@3 = x@2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (x,x@2.1 (y,z)))\n        (x@2.1 (x@3.1 (x,y),z)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2\n      x@3 = x@2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x@3.1 x,y))\n        (x@3.1 (x@2.1 (x,y))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x@2.2.2.2.2.2.2.2.2.1 x,y))\n        (x@2.1 (x,y)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/BLSFieldExtras/inverse_fp2 x)\n        (x@2.1 (x@2.2.1,x)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2\n      x@3 = x@2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (e : Prelude.Integer)\n-> let { x@4 = cryptol:fp2_exp#6840 x e\n         x@5 = (x@2.1,x@4)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (x@3.1 x@5)\n         (Prelude.ite x@1\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger e\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                  Cryptol.PLiteralInteger))\n            x@4\n            (cryptol:/implementation/CryptolHelpers/apply (x@1 * x@1) x@1 x@3.1\n               x@5)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n      x@3 = x@2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (x@2.1 (x,y)))\n        (x@2.1 (x@3.1 x,x@3.1 y)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (P1 : x@2)\n-> (P2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add_E'#6894\n           (P1.1,cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.1 P1.2)\n           P2)\n        (cryptol:add_E'#6894 P1 P2))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> (i : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 i p1))\n        (cryptol:e2_scalar_mult#6884 i (cryptol:affinify_E'#6889 p1)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : Prelude.Integer)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/scalar_mult x@1 cryptol:/Parameters/E' x\n           y)\n        (cryptol:e2_scalar_mult#6884 x y))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : x@2)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add_E'#6894 (cryptol:add_E'#6894 x y) z)\n        (cryptol:add_E'#6894 x (cryptol:add_E'#6894 y z)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : x@2)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add_E'#6894 x (cryptol:add_E'#6894 y z))\n        (cryptol:add_E'#6894 y (cryptol:add_E'#6894 x z)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add_E'#6894 x y)\n        (cryptol:add_E'#6894 y x))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/add x@1 cryptol:/Parameters/E'\n           (cryptol:e2_scalar_mult#6884 k p1)\n           (cryptol:e2_scalar_mult#6884 k' p1))\n        (cryptol:e2_scalar_mult#6884 (Prelude.intAdd k k') p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add'#6691 x@1 x@3 cryptol:/Parameters/E'\n           (cryptol:e2_scalar_mult#6884 k p1)\n           (cryptol:e2_scalar_mult#6884 k' p1))\n        (cryptol:e2_scalar_mult#6884\n           (cryptol:add_exponents'#6744 k k' (cryptol:e2_order#6883 p1))\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (k' : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:e2_scalar_mult#6884 k (cryptol:e2_scalar_mult#6884 k' p1))\n        (cryptol:e2_scalar_mult#6884 (Prelude.intMul k k') p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/add x@1 cryptol:/Parameters/E'\n           (cryptol:e2_scalar_mult#6884 k p1)\n           p1)\n        (cryptol:e2_scalar_mult#6884 (Prelude.intAdd k (Prelude.natToInt 1))\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/add x@1 cryptol:/Parameters/E' p1\n           (cryptol:e2_scalar_mult#6884 k p1))\n        (cryptol:e2_scalar_mult#6884 (Prelude.intAdd k (Prelude.natToInt 1))\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/neg x@1 cryptol:/Parameters/E'\n           (cryptol:e2_scalar_mult#6884 k p1))\n        (cryptol:e2_scalar_mult#6884 (Prelude.intNeg k) p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add'#6691 x@1 x@3 cryptol:/Parameters/E'\n           (cryptol:e2_scalar_mult#6884 k p1)\n           p1)\n        (cryptol:e2_scalar_mult#6884\n           (cryptol:add_exponents'#6744 k (Prelude.natToInt 1)\n              (cryptol:e2_order#6883 p1))\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add'#6691 x@1 x@3 cryptol:/Parameters/E' p1\n           (cryptol:e2_scalar_mult#6884 k p1))\n        (cryptol:e2_scalar_mult#6884\n           (cryptol:add_exponents'#6744 k (Prelude.natToInt 1)\n              (cryptol:e2_order#6883 p1))\n           p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/add x@1 cryptol:/Parameters/E' p1 p1)\n        (cryptol:e2_scalar_mult#6884 (Prelude.natToInt 2) p1))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@5 = x@1 * x@2\n    }\n in (p1 : x@5)\n-> (p2 : x@5)\n-> (a4 : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_dadd x@1\n              cryptol:/Parameters/Fp_2\n              p1\n              p2\n              a4\n              Prelude.True))\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1)\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p2)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@5 = x@1 * x@2\n    }\n in (p1 : x@5)\n-> (p2 : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_add x@1\n              cryptol:/Parameters/Fp_2\n              p1\n              p2))\n        (cryptol:add'#6691 x@1 x@4 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1)\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p2)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (P : (x@1 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/G2SubGroupCheck/psi\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 P))\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/Psi/psi_imp P)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (P : (x@1 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_double x@1\n              cryptol:/Parameters/Fp_2\n              P))\n        (cryptol:/ShortWeierstrassCurve/double x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 P)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (P : (x@1 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/Psi/psi_imp P))\n        (cryptol:/G2SubGroupCheck/psi\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 P)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/projectify x@1 x@3 p))\n        p)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_add_affine x@1\n              cryptol:/Parameters/Fp_2\n              p1\n              p2))\n        (cryptol:add'#6691 x@1 x@4 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1)\n           p2))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_dadd_affine x@1\n              cryptol:/Parameters/Fp_2\n              p1\n              p2))\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1)\n           p2))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/CurveOperation/point_neg x@1\n              cryptol:/Parameters/Fp_2\n              p1))\n        (cryptol:/ShortWeierstrassCurve/neg x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> let { x@5 = cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n         (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n            (cryptol:/implementation/CurveOperation/point_double x@1\n               cryptol:/Parameters/Fp_2\n               p1))\n         (cryptol:/ShortWeierstrassCurve/add x@1 x@3 x@5 x@5))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/sub x@1 x@3 p1 p2)\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3 p1\n           (cryptol:/ShortWeierstrassCurve/neg x@1 x@3 p2)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : Prelude.Integer)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:e2_scalar_mult#6884 x\n           (cryptol:/ShortWeierstrassCurve/add x@1 x@3 y z))\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3\n           (cryptol:e2_scalar_mult#6884 x y)\n           (cryptol:e2_scalar_mult#6884 x z)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : Prelude.Integer)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:e2_scalar_mult#6884 x\n           (cryptol:/ShortWeierstrassCurve/neg x@1 x@3 y))\n        (cryptol:/ShortWeierstrassCurve/neg x@1 x@3\n           (cryptol:e2_scalar_mult#6884 x y)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/neg x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/add x@1 x@3 x y))\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/neg x@1 x@3 x)\n           (cryptol:/ShortWeierstrassCurve/neg x@1 x@3 y)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/point_O x@1 x@3)\n           p1)\n        p1)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3 p1\n           (cryptol:/ShortWeierstrassCurve/point_O x@1 x@3))\n        p1)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/Fp_2.2.2.2\n      x@4 = cryptol:/Parameters/E'\n      x@5 = x@3.2.2\n    }\n in (p : (x@1 * x@2))\n-> let { x@6 = (p.2.2,x@3.1)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@5.1 x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@4 p)\n            (cryptol:/ShortWeierstrassCurve/is_point_O x@1 x@4\n               (cryptol:/ShortWeierstrassCurve/affinify x@1 x@4 p))\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool x@5.1\n               x@6)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@2\n      -> x@1\n      x@4 = x@1\n      -> x@1\n      x@5 = cryptol:/Parameters/E'\n      x@6 = x@1 * x@2\n    }\n in (P : x@6)\n-> (Q : x@2)\n-> let { x@7 = cryptol:/implementation/CurveOperation/point_dadd_affine x@1\n                 cryptol:/Parameters/Fp_2\n                 P\n                 Q\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@5 x@7)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@5 P)\n               (cryptol:/ShortWeierstrassCurve/is_point_affine x@1 x@5 Q))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (x@1 * x@1 * x@3 * x@3 * x@1 * x@1 * x@4 * (x@2\n                                                           -> Prelude.Bool) * (x@1\n                                                                               -> Prelude.Bool) * x@3 * x@4 * x@4 * x@4 * x@3)\n               (x@6\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective x@1)\n               x@5\n               x@7)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@2\n      -> x@1\n      x@4 = x@1\n      -> x@1\n      x@5 = cryptol:/Parameters/E'\n      x@6 = x@1 * x@2\n    }\n in (P : x@6)\n-> (Q : x@6)\n-> (a4 : x@1)\n-> let { x@7 = cryptol:/implementation/CurveOperation/point_dadd x@1\n                 cryptol:/Parameters/Fp_2\n                 P\n                 Q\n                 a4\n                 Prelude.True\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@5 x@7)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@5 P)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@5 Q))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (x@1 * x@1 * x@3 * x@3 * x@1 * x@1 * x@4 * (x@2\n                                                           -> Prelude.Bool) * (x@1\n                                                                               -> Prelude.Bool) * x@3 * x@4 * x@4 * x@4 * x@3)\n               (x@6\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective x@1)\n               x@5\n               x@7)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@2\n      -> x@1\n      x@4 = x@1\n      -> x@1\n      x@5 = cryptol:/Parameters/E'\n      x@6 = x@1 * x@2\n    }\n in (P : x@6)\n-> let { x@7 = cryptol:/implementation/CurveOperation/point_double x@1\n                 cryptol:/Parameters/Fp_2\n                 P\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@5 x@7)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@5 P)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (x@1 * x@1 * x@3 * x@3 * x@1 * x@1 * x@4 * (x@2\n                                                           -> Prelude.Bool) * (x@1\n                                                                               -> Prelude.Bool) * x@3 * x@4 * x@4 * x@4 * x@3)\n               (x@6\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective x@1)\n               x@5\n               x@7)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@2\n      -> x@1\n      x@4 = x@1\n      -> x@1\n      x@5 = cryptol:/Parameters/E'\n      x@6 = x@1 * x@2\n    }\n in (P : x@6)\n-> let { x@7 = cryptol:/implementation/CurveOperation/point_neg x@1\n                 cryptol:/Parameters/Fp_2\n                 P\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@5 x@7)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective x@1 x@5 P)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (x@1 * x@1 * x@3 * x@3 * x@1 * x@1 * x@4 * (x@2\n                                                           -> Prelude.Bool) * (x@1\n                                                                               -> Prelude.Bool) * x@3 * x@4 * x@4 * x@4 * x@3)\n               (x@6\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective x@1)\n               x@5\n               x@7)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 (cryptol:fp2_exp#6840 x k,x))\n        (cryptol:fp2_exp#6840 x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 (x,cryptol:fp2_exp#6840 x k))\n        (cryptol:fp2_exp#6840 x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k\n              (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n                 Cryptol.PLiteralInteger))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (n : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1\n           (cryptol:fp2_exp#6840 x n,cryptol:fp2_exp#6840 x k))\n        (cryptol:fp2_exp#6840 x\n           (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger k n)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (n : Prelude.Integer)\n-> (k : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_exp#6840 (cryptol:fp2_exp#6840 x n) k)\n        (cryptol:fp2_exp#6840 x\n           (Cryptol.ecMul Prelude.Integer Cryptol.PRingInteger k n)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Field/fp2_abs\n           (cryptol:/implementation/Field/fp2_rep x))\n        x)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.natToInt 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n      x@5 = [x@1, x@1]\n      x@6 = x@5,x@5,x@5\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (x@2 * x@3)\n         (Cryptol.PEqPair x@2 x@3 x@4 (Cryptol.PEqPair x@2 x@2 x@4 x@4))\n         (cryptol:/implementation/CurveOperation/point_double x@2\n            cryptol:/Parameters/Fp_2\n            x@6)\n         x@6)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.natToInt 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = x@2 * x@3\n      x@5 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n      x@6 = [x@1, x@1]\n    }\n in (p1 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@2 x@3 x@5 (Cryptol.PEqPair x@2 x@2 x@5 x@5))\n        (cryptol:/implementation/CurveOperation/point_add x@2\n           cryptol:/Parameters/Fp_2\n           (x@6,x@6,x@6)\n           p1)\n        p1)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2\n      x@2 = x@1.2\n      x@3 = x@2.2\n      x@4 = x@3.2.2\n      x@5 = x@4.2.2\n      x@6 = x@5.2.2.2\n    }\n in (gx1 : Prelude.Integer)\n-> (xd : Prelude.Integer)\n-> let { x@7 = Prelude.ite Prelude.Integer (x@4.1 (xd,x@3.1))\n                 (x@5.1 (cryptol:/HashToCurveE1/Z,cryptol:/HashToCurveE1/A'))\n                 xd\n         x@8 = x@5.1 (x@7,x@6.1 x@7)\n         x@9 = x@5.1 (gx1,x@8)\n         x@10 = x@5.1 (x@6.1 x@8,x@9)\n         x@11 = x@1.1 (x@2.1,cryptol:/BLSFieldExtras/sqrt_fp x@10)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (x@4.1 (x@6.1 (x@5.1 (x@11,x@10)),x@10))\n         (x@4.1 (x@5.1 (x@6.1 (x@5.1 (x@11,x@9)),x@8),gx1)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2\n      x@2 = x@1.2\n    }\n in (x : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (x@2.2.2.2.2.2.1 (x,x@1.1 (x@2.1,z)))\n        (x@1.1 (x,z)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2\n      x@2 = x@1.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@2.1 x,y))\n        (x@2.1 (x@1.1 (x,y))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2\n    }\n in (x : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (x@1.2.2.2.2.2.2.1 (x,cryptol:/BLSFieldExtras/inverse_fp z))\n        (x@1.1 (x,z)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/BLSFieldExtras/inverse_fp x)\n        (x@1.1 (x@1.2.1,x)))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.1\n    }\n in (n : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/BLSFieldExtras/fp_exp x@1 n)\n        x@1)",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:redc_mont_384#7427 (x@1.1 (x,y)))\n        (cryptol:toM#7869\n           (x@1.1 (cryptol:redc_mont_384#7427 x,cryptol:redc_mont_384#7427 y))))",
    "type": "property"
  },
  {
    "status": "assumed",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp_2.2.2.1\n    }\n in (n : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_exp#6840 x@1 n)\n        x@1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> (booth_index : Prelude.Vec 64 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE1_invariant\n           (cryptol:booth'#6772 (cryptol:precomputed_table#6761 p1)\n              booth_index))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n           cryptol:/Parameters/E\n           p1)\n        (cryptol:is_point_projective_E#6748 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE1_invariant\n           (cryptol:/implementation/CurveOperation/POINTonE1_rep p1))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(p1 : (Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer\n           cryptol:/Parameters/E\n           p1)\n        (cryptol:is_point_affine_E#6749 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(u : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n           cryptol:/HashToCurveE1/Curve_E'\n           (cryptol:/Main/map_to_curve_simple_swu_impl u))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        [cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.1 x, y]\n        (cryptol:/Frobenius/fp2_frobenius [x, y]))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Parameters/Fp.2.2.2.2.2.1 (x,y))\n        (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger x y))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:redc_mont_384#7427\n           (cryptol:/implementation/Fp12/Fpx2.2.2.2.2.2.2.2.2.2.2.2 (x,y)))\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.2.2.2\n           (cryptol:redc_mont_384#7427 x,cryptol:redc_mont_384#7427 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:redc_mont_384#7427 (cryptol:/implementation/Fp12/Fpx2.1 (x,y)))\n        (cryptol:/Parameters/Fp.1\n           (cryptol:redc_mont_384#7427 x,cryptol:redc_mont_384#7427 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/HashToCurveE1Aux/sgn0 x)\n        (cryptol:/HashToCurveE1/sgn0 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (Prelude.intLe x x) Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1 (x,x))\n        (cryptol:/BLSFieldExtras/fp_exp x\n           (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PLiteralInteger)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "(x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:abs_384#7435 (cryptol:/implementation/Field/fp_rep x))\n        (cryptol:toM#7869 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n     (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n     (cryptol:fp2_reduce_mod_p#7883 cryptol:/implementation/Fp12/Fp_2x2.2.2.1)\n     cryptol:/Parameters/Fp_2.2.2.1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n     (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n     (cryptol:fp2_reduce_mod_p#7883 cryptol:/implementation/Fp12/Fp_2x2.2.2.2.1)\n     cryptol:/Parameters/Fp_2.2.2.2.1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n     (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n     cryptol:/Parameters/Fp_2.2.2.1\n     cryptol:ef_unit_fp#6838)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n     (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n     cryptol:/Parameters/Fp_2.2.2.2.1\n     cryptol:ef_zero_fp#6839)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n     (cryptol:bitInt#6696 Prelude.False)\n     (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n        Cryptol.PLiteralInteger))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n     (cryptol:redc_mont_384#7427 cryptol:/implementation/Fp12/Fpx2.2.2.2.1)\n     cryptol:/Parameters/Fp.2.2.2.1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n     cryptol:/Parameters/Fp.2.2.2.1\n     (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n        Cryptol.PLiteralInteger))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger cryptol:/HashToCurveE1Aux/A'\n     cryptol:/HashToCurveE1/A')",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger cryptol:/HashToCurveE1Aux/B'\n     cryptol:/HashToCurveE1/B')",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue\n  (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger cryptol:/HashToCurveE1Aux/Z\n     cryptol:/HashToCurveE1/Z)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue (Prelude.equalNat (Prelude.intToNat (Prelude.natToInt 0)) 0)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "Prelude.EqTrue (Prelude.equalNat (Prelude.intToNat (Prelude.natToInt 1)) 1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@4 = Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Integer * x@4\n      x@6 = cryptol:/Parameters/Fp\n    }\n in (p1 : x@5)\n-> (p2 : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqPair Prelude.Integer x@4 x@2\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2))\n        (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@6 p1\n           p2)\n        (Prelude.ite x@5 (Cryptol.ecEq Prelude.Integer x@2 p1.2.2 x@3) p2\n           (Prelude.ite x@5 (Cryptol.ecEq Prelude.Integer x@2 p2.2.2 x@3) p1\n              (cryptol:/implementation/CurveOperation/p_add_bl Prelude.Integer\n                 x@6\n                 p1\n                 p2))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Prelude.Integer * x@3\n      x@5 = cryptol:/Parameters/Fp\n    }\n in (c : Prelude.Bool)\n-> (P : x@4)\n-> (Q1 : x@4)\n-> (Q2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair Prelude.Integer x@3 x@2\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2))\n        (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@5 P\n           (Prelude.ite x@4 c Q1 Q2))\n        (Prelude.ite x@4 c\n           (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@5\n              P\n              Q1)\n           (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@5\n              P\n              Q2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Prelude.Integer * x@3\n      x@5 = cryptol:/Parameters/Fp\n    }\n in (c : Prelude.Bool)\n-> (P1 : x@4)\n-> (P2 : x@4)\n-> (Q : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair Prelude.Integer x@3 x@2\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2))\n        (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@5\n           (Prelude.ite x@4 c P1 P2)\n           Q)\n        (Prelude.ite x@4 c\n           (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@5\n              P1\n              Q)\n           (cryptol:/implementation/CurveOperation/point_add Prelude.Integer x@5\n              P2\n              Q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Prelude.Integer * x@3\n      x@5 = cryptol:/Parameters/Fp\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair Prelude.Integer x@3 x@2\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2))\n        (cryptol:/implementation/CurveOperation/point_neg Prelude.Integer x@5\n           (Prelude.ite x@4 c p1 p2))\n        (Prelude.ite x@4 c\n           (cryptol:/implementation/CurveOperation/point_neg Prelude.Integer x@5\n              p1)\n           (cryptol:/implementation/CurveOperation/point_neg Prelude.Integer x@5\n              p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Prelude.Integer * x@3\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair Prelude.Integer x@3 x@2\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2))\n        (cryptol:point_neg_fp#6754 (Prelude.ite x@4 c p1 p2))\n        (Prelude.ite x@4 c (cryptol:point_neg_fp#6754 p1)\n           (cryptol:point_neg_fp#6754 p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n    }\n in (k : Prelude.Integer)\n-> (c : Prelude.Bool)\n-> (P : x@3)\n-> (Q : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n        (cryptol:e1_scalar_mult#6740 k (Prelude.ite x@3 c P Q))\n        (Prelude.ite x@3 c (cryptol:e1_scalar_mult#6740 k P)\n           (cryptol:e1_scalar_mult#6740 k Q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Integer * Prelude.Integer * Prelude.Integer\n    }\n in (c : Prelude.Bool)\n-> (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Prelude.ite x@2 c x y).2.1\n        (Prelude.ite Prelude.Integer c x.2.1 y.2.1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Integer * Prelude.Integer * Prelude.Integer\n    }\n in (c : Prelude.Bool)\n-> (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Prelude.ite x@2 c x y).2.2\n        (Prelude.ite Prelude.Integer c x.2.2 y.2.2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Integer * Prelude.Integer * Prelude.Integer\n    }\n in (c : Prelude.Bool)\n-> (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (Prelude.ite x@2 c x y).1\n        (Prelude.ite Prelude.Integer c x.1 y.1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Cryptol.PEqInteger\n      x@4 = Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Integer * x@4\n      x@6 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n      x@7 = x@6 * x@6 * x@6\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@7)\n-> (p2 : x@7)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqPair Prelude.Integer x@4 x@3\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@3 x@3))\n        (cryptol:/implementation/CurveOperation/POINTonE1_abs\n           (Prelude.ite x@7 c p1 p2))\n        (Prelude.ite x@5 c\n           (cryptol:/implementation/CurveOperation/POINTonE1_abs p1)\n           (cryptol:/implementation/CurveOperation/POINTonE1_abs p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Cryptol.TCNum 2\n      x@4 = Prelude.Vec 2 Prelude.Integer\n      x@5 = Prelude.Vec 3 x@4\n      x@6 = Prelude.Vec 2 x@5\n      x@7 = Prelude.Vec 2\n              (Prelude.Vec 3\n                 (Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))))\n    }\n in (x : Prelude.Bool)\n-> (y : x@7)\n-> (z : x@7)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqSeq x@3 x@5\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@4\n              (Cryptol.PEqSeq x@3 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:/implementation/Field/fp12_abs (Prelude.ite x@7 x y z))\n        (Prelude.ite x@6 x (cryptol:/implementation/Field/fp12_abs y)\n           (cryptol:/implementation/Field/fp12_abs z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : Prelude.Bool)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fpx2_invariant (Prelude.ite x@3 x y z))\n        (Prelude.ite Prelude.Bool x\n           (cryptol:/implementation/Field/fpx2_invariant y)\n           (cryptol:/implementation/Field/fpx2_invariant z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : Prelude.Bool)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fpx2_abs (Prelude.ite x@3 x y z))\n        (Prelude.ite Prelude.Integer x\n           (cryptol:/implementation/Field/fpx2_abs y)\n           (cryptol:/implementation/Field/fpx2_abs z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 2\n              (Prelude.Vec 3\n                 (Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))))\n    }\n in (x : Prelude.Bool)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp12_invariant (Prelude.ite x@3 x y z))\n        (Prelude.ite Prelude.Bool x\n           (cryptol:/implementation/Field/fp12_invariant y)\n           (cryptol:/implementation/Field/fp12_invariant z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Bool)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp2x2_invariant (Prelude.ite x@3 x y z))\n        (Prelude.ite Prelude.Bool x\n           (cryptol:/implementation/Field/fp2x2_invariant y)\n           (cryptol:/implementation/Field/fp2x2_invariant z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n      x@4 = x@3 * x@3 * x@3\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE2_invariant\n           (Prelude.ite x@4 c p1 p2))\n        (Prelude.ite Prelude.Bool c\n           (cryptol:/implementation/CurveOperation/POINTonE2_invariant p1)\n           (cryptol:/implementation/CurveOperation/POINTonE2_invariant p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Bool)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp2_invariant (Prelude.ite x@3 x y z))\n        (Prelude.ite Prelude.Bool x\n           (cryptol:/implementation/Field/fp2_invariant y)\n           (cryptol:/implementation/Field/fp2_invariant z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Bool)\n-> (y : x@4)\n-> (z : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Field/fp2x2_abs (Prelude.ite x@4 x y z))\n        (Prelude.ite x@3 x (cryptol:/implementation/Field/fp2x2_abs y)\n           (cryptol:/implementation/Field/fp2x2_abs z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Bool)\n-> (y : x@4)\n-> (z : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Field/fp2_abs (Prelude.ite x@4 x y z))\n        (Prelude.ite x@3 x (cryptol:/implementation/Field/fp2_abs y)\n           (cryptol:/implementation/Field/fp2_abs z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n      x@6 = x@5 * x@5 * x@5\n      x@7 = x@3 * x@4\n      x@8 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@6)\n-> (p2 : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqPair x@3 x@4 x@8 (Cryptol.PEqPair x@3 x@3 x@8 x@8))\n        (cryptol:/implementation/CurveOperation/POINTonE2_abs\n           (Prelude.ite x@6 c p1 p2))\n        (Prelude.ite x@7 c\n           (cryptol:/implementation/CurveOperation/POINTonE2_abs p1)\n           (cryptol:/implementation/CurveOperation/POINTonE2_abs p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n      x@4 = x@3 * x@3 * x@3\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE1_invariant\n           (Prelude.ite x@4 c p1 p2))\n        (Prelude.ite Prelude.Bool c\n           (cryptol:/implementation/CurveOperation/POINTonE1_invariant p1)\n           (cryptol:/implementation/CurveOperation/POINTonE1_invariant p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : Prelude.Bool)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant (Prelude.ite x@3 x y z))\n        (Prelude.ite Prelude.Bool x\n           (cryptol:/implementation/Field/fp_invariant y)\n           (cryptol:/implementation/Field/fp_invariant z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : Prelude.Bool)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fp_abs (Prelude.ite x@3 x y z))\n        (Prelude.ite Prelude.Integer x (cryptol:/implementation/Field/fp_abs y)\n           (cryptol:/implementation/Field/fp_abs z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Cryptol.TCNum 2\n      x@5 = Prelude.Vec 2 (Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer))\n      x@6 = Prelude.Vec 6 x@3\n      x@7 = Prelude.Vec 2 x@6\n      x@8 = Prelude.Vec 3 x@7\n      x@9 = Prelude.Vec 2 x@8\n    }\n in (x : Prelude.Bool)\n-> (y : x@5)\n-> (z : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@9\n        (Cryptol.PEqSeq x@4 x@8\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@7\n              (Cryptol.PEqSeq x@4 x@6\n                 (Cryptol.PEqSeq (Cryptol.TCNum 6) x@3\n                    (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))))\n        (cryptol:/implementation/Field/fp12_rep (Prelude.ite x@5 x y z))\n        (Prelude.ite x@9 x (cryptol:/implementation/Field/fp12_rep y)\n           (cryptol:/implementation/Field/fp12_rep z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Vec 6 x@3\n      x@6 = Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64)\n      x@7 = x@5 * x@5\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7 (Cryptol.PEqPair x@5 x@5 x@6 x@6)\n        (cryptol:/implementation/CurveOperation/POINTonE1_affine_rep\n           (Prelude.ite x@4 c p1 p2))\n        (Prelude.ite x@7 c\n           (cryptol:/implementation/CurveOperation/POINTonE1_affine_rep p1)\n           (cryptol:/implementation/CurveOperation/POINTonE1_affine_rep p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Integer * Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Vec 6 x@3\n      x@6 = Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64)\n      x@7 = x@5 * x@5\n      x@8 = x@5 * x@7\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@8\n        (Cryptol.PEqPair x@5 x@7 x@6 (Cryptol.PEqPair x@5 x@5 x@6 x@6))\n        (cryptol:/implementation/CurveOperation/POINTonE1_rep\n           (Prelude.ite x@4 c p1 p2))\n        (Prelude.ite x@8 c\n           (cryptol:/implementation/CurveOperation/POINTonE1_rep p1)\n           (cryptol:/implementation/CurveOperation/POINTonE1_rep p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 12 x@3\n    }\n in (x : Prelude.Bool)\n-> (y : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq (Cryptol.TCNum 12) x@3\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fpx2_rep\n           (Prelude.ite Prelude.Integer x y z))\n        (Prelude.ite x@4 x (cryptol:/implementation/Field/fpx2_rep y)\n           (cryptol:/implementation/Field/fpx2_rep z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 2 Prelude.Integer\n      x@5 = Prelude.Vec 12 x@3\n      x@6 = Prelude.Vec 2 x@5\n    }\n in (x : Prelude.Bool)\n-> (y : x@4)\n-> (z : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) x@5\n           (Cryptol.PEqSeq (Cryptol.TCNum 12) x@3\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (cryptol:/implementation/Field/fp2x2_rep (Prelude.ite x@4 x y z))\n        (Prelude.ite x@6 x (cryptol:/implementation/Field/fp2x2_rep y)\n           (cryptol:/implementation/Field/fp2x2_rep z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 2 Prelude.Integer\n      x@5 = Prelude.Vec 6 x@3\n      x@6 = Prelude.Vec 2 x@5\n      x@7 = Cryptol.PEqVec 2 x@5 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64))\n      x@8 = x@6 * x@6\n      x@9 = x@6 * x@8\n      x@10 = x@4 * x@4 * x@4\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@10)\n-> (p2 : x@10)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@9\n        (Cryptol.PEqPair x@6 x@8 x@7 (Cryptol.PEqPair x@6 x@6 x@7 x@7))\n        (cryptol:/implementation/CurveOperation/POINTonE2_rep\n           (Prelude.ite x@10 c p1 p2))\n        (Prelude.ite x@9 c\n           (cryptol:/implementation/CurveOperation/POINTonE2_rep p1)\n           (cryptol:/implementation/CurveOperation/POINTonE2_rep p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 2 Prelude.Integer\n      x@5 = Prelude.Vec 6 x@3\n      x@6 = Prelude.Vec 2 x@5\n    }\n in (x : Prelude.Bool)\n-> (y : x@4)\n-> (z : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) x@5\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@3\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (cryptol:/implementation/Field/fp2_rep (Prelude.ite x@4 x y z))\n        (Prelude.ite x@6 x (cryptol:/implementation/Field/fp2_rep y)\n           (cryptol:/implementation/Field/fp2_rep z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 2 Prelude.Integer\n      x@5 = x@4 * x@4\n      x@6 = Prelude.Vec 6 x@3\n      x@7 = Prelude.Vec 2 x@6\n      x@8 = Cryptol.PEqVec 2 x@6 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64))\n      x@9 = x@7 * x@7\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@5)\n-> (p2 : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@9 (Cryptol.PEqPair x@7 x@7 x@8 x@8)\n        (cryptol:/implementation/CurveOperation/POINTonE2_affine_rep\n           (Prelude.ite x@5 c p1 p2))\n        (Prelude.ite x@9 c\n           (cryptol:/implementation/CurveOperation/POINTonE2_affine_rep p1)\n           (cryptol:/implementation/CurveOperation/POINTonE2_affine_rep p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64)\n      x@6 = x@4 * x@4\n      x@7 = x@4 * x@6\n    }\n in (c : Prelude.Bool)\n-> (x1 : x@4)\n-> (x2 : x@4)\n-> (x3 : x@4)\n-> (y1 : x@4)\n-> (y2 : x@4)\n-> (y3 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqPair x@4 x@6 x@5 (Cryptol.PEqPair x@4 x@4 x@5 x@5))\n        (Prelude.ite x@4 c x1 y1,\n         Prelude.ite x@4 c x2 y2,Prelude.ite x@4 c x3 y3)\n        (Prelude.ite x@7 c (x1,x2,x3) (y1,y2,y3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = Cryptol.PEqVec 2 x@4 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64))\n      x@7 = x@5 * x@5\n      x@8 = x@5 * x@7\n    }\n in (c : Prelude.Bool)\n-> (x1 : x@5)\n-> (x2 : x@5)\n-> (x3 : x@5)\n-> (y1 : x@5)\n-> (y2 : x@5)\n-> (y3 : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@8\n        (Cryptol.PEqPair x@5 x@7 x@6 (Cryptol.PEqPair x@5 x@5 x@6 x@6))\n        (Prelude.ite x@5 c x1 y1,\n         Prelude.ite x@5 c x2 y2,Prelude.ite x@5 c x3 y3)\n        (Prelude.ite x@8 c (x1,x2,x3) (y1,y2,y3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = x@5 * x@5 * x@5\n    }\n in (x : Prelude.Bool)\n-> (y : x@6)\n-> (z : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqVec 2 x@4 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64)))\n        (Prelude.ite x@6 x y z).1\n        (Prelude.ite x@5 x y.1 z.1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = x@5 * x@5 * x@5\n    }\n in (x : Prelude.Bool)\n-> (y : x@6)\n-> (z : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqVec 2 x@4 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64)))\n        (Prelude.ite x@6 x y z).2.1\n        (Prelude.ite x@5 x y.2.1 z.2.1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = x@5 * x@5 * x@5\n    }\n in (x : Prelude.Bool)\n-> (y : x@6)\n-> (z : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqVec 2 x@4 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64)))\n        (Prelude.ite x@6 x y z).2.2\n        (Prelude.ite x@5 x y.2.2 z.2.2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (b : Prelude.Bool)\n-> (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Prelude.vecEq 6 x@3 (Prelude.vecEq 64 Prelude.Bool Prelude.boolEq)\n        (Prelude.at 2 x@4 (Prelude.ite x@5 b x y) 0)\n        (Prelude.ite x@4 b (Prelude.at 2 x@4 x 0) (Prelude.at 2 x@4 y 0)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (b : Prelude.Bool)\n-> (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Prelude.vecEq 6 x@3 (Prelude.vecEq 64 Prelude.Bool Prelude.boolEq)\n        (Prelude.at 2 x@4 (Prelude.ite x@5 b x y) 1)\n        (Prelude.ite x@4 b (Prelude.at 2 x@4 x 1) (Prelude.at 2 x@4 y 1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : Prelude.Bool)\n-> (y0 : x@4)\n-> (y1 : x@4)\n-> (z0 : x@4)\n-> (z1 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqVec 2 x@4 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64)))\n        [Prelude.ite x@4 x y0 z0, Prelude.ite x@4 x y1 z1]\n        (Prelude.ite x@5 x [y0, y1] [z0, z1]))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = x@4 * x@4 * x@4\n    }\n in (c : Prelude.Bool)\n-> (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64))\n        (Prelude.ite x@5 c x y).1\n        (Prelude.ite x@4 c x.1 y.1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = x@4 * x@4 * x@4\n    }\n in (c : Prelude.Bool)\n-> (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64))\n        (Prelude.ite x@5 c x y).2.1\n        (Prelude.ite x@4 c x.2.1 y.2.1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n      x@5 = x@4 * x@4 * x@4\n    }\n in (c : Prelude.Bool)\n-> (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64))\n        (Prelude.ite x@5 c x y).2.2\n        (Prelude.ite x@4 c x.2.2 y.2.2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n    }\n in (x : Prelude.Bool)\n-> (y : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq (Cryptol.TCNum 6) x@3\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fp_rep\n           (Prelude.ite Prelude.Integer x y z))\n        (Prelude.ite x@4 x (cryptol:/implementation/Field/fp_rep y)\n           (cryptol:/implementation/Field/fp_rep z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 6 x@3\n    }\n in (x : Prelude.Bool)\n-> (y0 : x@3)\n-> (y1 : x@3)\n-> (y2 : x@3)\n-> (y3 : x@3)\n-> (y4 : x@3)\n-> (y5 : x@3)\n-> (z0 : x@3)\n-> (z1 : x@3)\n-> (z2 : x@3)\n-> (z3 : x@3)\n-> (z4 : x@3)\n-> (z5 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64))\n        [ Prelude.ite x@3 x y0 z0\n        , Prelude.ite x@3 x y1 z1\n        , Prelude.ite x@3 x y2 z2\n        , Prelude.ite x@3 x y3 z3\n        , Prelude.ite x@3 x y4 z4\n        , Prelude.ite x@3 x y5 z5 ]\n        (Prelude.ite x@4 x [y0, y1, y2, y3, y4, y5] [z0, z1, z2, z3, z4, z5]))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/E'\n      x@4 = x@2 * x@2 * x@2\n    }\n in (c : Prelude.Bool)\n-> (p : x@4)\n-> (q : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_projective x@2 x@3\n           (Prelude.ite x@4 c p q))\n        (Prelude.ite Prelude.Bool c\n           (cryptol:/ShortWeierstrassCurve/is_point_projective x@2 x@3 p)\n           (cryptol:/ShortWeierstrassCurve/is_point_projective x@2 x@3 q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (c : Prelude.Bool)\n-> (x : x@2)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (Prelude.ite x@2 c x y,z))\n        (Prelude.ite x@2 c (x@3.1 (x,z)) (x@3.1 (y,z))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (c : Prelude.Bool)\n-> (x : x@2)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (z,Prelude.ite x@2 c x y))\n        (Prelude.ite x@2 c (x@3.1 (z,x)) (x@3.1 (z,y))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (k : Prelude.Integer)\n-> (c : Prelude.Bool)\n-> (P : x@3)\n-> (Q : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n        (cryptol:e2_scalar_mult#6884 k (Prelude.ite x@3 c P Q))\n        (Prelude.ite x@3 c (cryptol:e2_scalar_mult#6884 k P)\n           (cryptol:e2_scalar_mult#6884 k Q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = cryptol:/Parameters/E'\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = x@2 * x@3\n    }\n in (c : Prelude.Bool)\n-> (p : x@6)\n-> (q : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@5 x@5)\n        (cryptol:/ShortWeierstrassCurve/affinify x@2 x@4\n           (Prelude.ite x@6 c p q))\n        (Prelude.ite x@3 c (cryptol:/ShortWeierstrassCurve/affinify x@2 x@4 p)\n           (cryptol:/ShortWeierstrassCurve/affinify x@2 x@4 q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = cryptol:/Parameters/Fp_2\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@6 = x@2 * x@3\n    }\n in (c : Prelude.Bool)\n-> (p : x@6)\n-> (q : x@6)\n-> (r : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqPair x@2 x@3 x@5 (Cryptol.PEqPair x@2 x@2 x@5 x@5))\n        (cryptol:/implementation/CurveOperation/point_dadd_affine x@2 x@4\n           (Prelude.ite x@6 c p q)\n           r)\n        (Prelude.ite x@6 c\n           (cryptol:/implementation/CurveOperation/point_dadd_affine x@2 x@4 p\n              r)\n           (cryptol:/implementation/CurveOperation/point_dadd_affine x@2 x@4 q\n              r)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = cryptol:/Parameters/Fp_2\n      x@5 = x@2 * x@3\n      x@6 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (c : Prelude.Bool)\n-> (P : x@5)\n-> (Q1 : x@5)\n-> (Q2 : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqPair x@2 x@3 x@6 (Cryptol.PEqPair x@2 x@2 x@6 x@6))\n        (cryptol:/implementation/CurveOperation/point_add x@2 x@4 P\n           (Prelude.ite x@5 c Q1 Q2))\n        (Prelude.ite x@5 c\n           (cryptol:/implementation/CurveOperation/point_add x@2 x@4 P Q1)\n           (cryptol:/implementation/CurveOperation/point_add x@2 x@4 P Q2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = cryptol:/Parameters/Fp_2\n      x@5 = x@2 * x@3\n      x@6 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (c : Prelude.Bool)\n-> (P1 : x@5)\n-> (P2 : x@5)\n-> (Q : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqPair x@2 x@3 x@6 (Cryptol.PEqPair x@2 x@2 x@6 x@6))\n        (cryptol:/implementation/CurveOperation/point_add x@2 x@4\n           (Prelude.ite x@5 c P1 P2)\n           Q)\n        (Prelude.ite x@5 c\n           (cryptol:/implementation/CurveOperation/point_add x@2 x@4 P1 Q)\n           (cryptol:/implementation/CurveOperation/point_add x@2 x@4 P2 Q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = cryptol:/Parameters/Fp_2\n      x@5 = x@2 * x@3\n      x@6 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@5)\n-> (p2 : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqPair x@2 x@3 x@6 (Cryptol.PEqPair x@2 x@2 x@6 x@6))\n        (cryptol:/implementation/CurveOperation/point_neg x@2 x@4\n           (Prelude.ite x@5 c p1 p2))\n        (Prelude.ite x@5 c\n           (cryptol:/implementation/CurveOperation/point_neg x@2 x@4 p1)\n           (cryptol:/implementation/CurveOperation/point_neg x@2 x@4 p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = x@2 * x@3\n      x@5 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (c : Prelude.Bool)\n-> (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@2 x@3 x@5 (Cryptol.PEqPair x@2 x@2 x@5 x@5))\n        (cryptol:point_neg_fp2#6895 (Prelude.ite x@4 c p1 p2))\n        (Prelude.ite x@4 c (cryptol:point_neg_fp2#6895 p1)\n           (cryptol:point_neg_fp2#6895 p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2 * x@2\n    }\n in (x : Prelude.Bool)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (Prelude.ite x@3 x y z).1\n        (Prelude.ite x@2 x y.1 z.1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2 * x@2\n    }\n in (x : Prelude.Bool)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (Prelude.ite x@3 x y z).2.1\n        (Prelude.ite x@2 x y.2.1 z.2.1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = (a : sort 1)\n      -> Prelude.Bool\n      -> a\n      -> a\n      -> a\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2 * x@2\n    }\n in (x : Prelude.Bool)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (Prelude.ite x@3 x y z).2.2\n        (Prelude.ite x@2 x y.2.2 z.2.2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqBit\n    }\n in (x : Prelude.Bool)\n-> (c : Prelude.Bool)\n-> (y : Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool x@1\n        (Cryptol.ecEq Prelude.Bool x@1 x (Prelude.ite Prelude.Bool c y x))\n        (cryptol:/Cryptol/==%3e c (Cryptol.ecEq Prelude.Bool x@1 x y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 10) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 11) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 12) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 13) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 14) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 15) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 16) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 3) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 4) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 5) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 6) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 7) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 8) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 9) Prelude.Integer x@2\n      x@4 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@4))\n-> let { x@5 = cryptol:affinify_E#6751 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e1_order#6739 x@5)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n         (Cryptol.ecEq x@4\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n            (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@3 p1))\n            (cryptol:e1_scalar_mult#6740 x@3 x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = cryptol:/Parameters/E\n    }\n in (p1 : (Prelude.Integer * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4\n           (cryptol:small_mult#6763 x@2 p1))\n        (cryptol:e1_scalar_mult#6740 x@2\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@4 p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@2 p1))\n        (cryptol:e1_scalar_mult#6740 x@2 (cryptol:affinify_E#6751 p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:affinify_E#6751 (cryptol:small_mult#6763 x@2 p1))\n        (cryptol:e1_scalar_mult#6740 x@2 (cryptol:affinify_E#6751 p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/Parameters/E\n    }\n in (p1 : x@3)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/point_add_affine Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1\n           p2)\n        (Prelude.ite x@3\n           (Cryptol.ecEq Prelude.Integer x@1 p1.2.2\n              (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n                 Cryptol.PLiteralInteger))\n           (cryptol:/ShortWeierstrassCurve/projectify Prelude.Integer x@4 p2)\n           (cryptol:/implementation/CurveOperation/p_add_madd_2007_bl\n              Prelude.Integer\n              x@4\n              p1\n              p2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n      x@4 = cryptol:/Parameters/Fp\n    }\n in (p1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/point_double Prelude.Integer x@4\n           p1)\n        (cryptol:/implementation/CurveOperation/p_double_a0_l Prelude.Integer\n           x@4\n           p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p : x@3)\n-> let { x@4 = cryptol:small_nonnegative_mult#6762 (Prelude.natToInt 0) p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer x@2 x@1\n            (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n         (cryptol:point_neg_fp#6754 x@4)\n         x@4)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p1 : x@3)\n-> (booth_index : Prelude.Vec 64 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/POINTonE1_abs\n           (cryptol:booth'#6772 (cryptol:precomputed_table#6761 p1)\n              booth_index))\n        (cryptol:small_mult#6763 (cryptol:booth_exponent#6781 booth_index) p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p1 : x@3)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/point_add_affine Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1\n           p2)\n        (cryptol:point_add_affine_fp#6758 p1 p2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p1 : x@3)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/point_dadd_affine\n           Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1\n           p2)\n        (cryptol:point_dadd_affine_fp#6756 p1 p2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p1 : x@3)\n-> (p2 : x@3)\n-> (a4 : Prelude.Integer)\n-> (c : Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/point_dadd Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1\n           p2\n           a4\n           c)\n        (cryptol:point_dadd_fp#6757 p1 p2 a4 c))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p1 : x@3)\n-> (p2 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/point_add Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1\n           p2)\n        (cryptol:point_add_fp#6759 p1 p2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/POINTonE1_abs\n           (cryptol:/implementation/CurveOperation/POINTonE1_rep p1))\n        p1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/point_double Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1)\n        (cryptol:point_double_fp#6755 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/implementation/CurveOperation/point_neg Prelude.Integer\n           cryptol:/Parameters/Fp\n           p1)\n        (cryptol:point_neg_fp#6754 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = Prelude.Integer * x@2\n    }\n in (p1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:small_nonnegative_mult#6762 (Prelude.natToInt 1) p1)\n        p1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/E\n    }\n in (p : (Prelude.Integer * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n           (cryptol:/Main/clear_cofactor_impl p))\n        (cryptol:/HashToCurveE1/clear_cofactor\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3 p)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = cryptol:/Parameters/E\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:e1_scalar_mult#6740\n           (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n              Cryptol.PLiteralInteger)\n           p1)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@3 p1\n           (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer x@3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (P : x@2)\n-> let { x@3 = cryptol:/implementation/CurveOperation/POINTonE1_rep\n                 (cryptol:/ShortWeierstrassCurve/projectify Prelude.Integer\n                    cryptol:/Parameters/E\n                    P)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n         (cryptol:/implementation/CurveOperation/POINTonE1_affine_abs\n            (x@3.1,x@3.2.1))\n         P)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p : (Prelude.Integer * x@2))\n-> let { x@3 = cryptol:/Main/isogeny_map_to_E1_impl p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n         (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n            cryptol:/Parameters/E\n            x@3)\n         (cryptol:affinify_nz#8047 x@3))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/HashToCurveE1/iso_map p)\n        (Prelude.ite x@2\n           (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer\n              cryptol:/HashToCurveE1/Curve_E'\n              p)\n           (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer\n              cryptol:/Parameters/E)\n           (cryptol:iso_map_nz#8069 p)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : (Prelude.Integer * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n           cryptol:/Parameters/E\n           p1)\n        (cryptol:affinify_E#6751 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer\n           cryptol:/Parameters/E\n           p1\n           p2)\n        (cryptol:add_E#6753 p1 p2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:add'#6691 Prelude.Integer x@1 cryptol:/Parameters/E p1 p2)\n        (cryptol:add'_E#6752 p1 p2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Integer * x@2)\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/ShortWeierstrassCurve/projectify Prelude.Integer\n           cryptol:/Parameters/E\n           p1)\n        (cryptol:projectify_E#6750 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:e1_scalar_mult#6740 (Prelude.natToInt 0) p1)\n        (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer\n           cryptol:/Parameters/E))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:e1_scalar_mult#6740 (Prelude.natToInt 1) p1)\n        p1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = Prelude.Integer * Prelude.Integer\n    }\n in (u : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Integer * x@2)\n        (Cryptol.PEqPair Prelude.Integer x@2 x@1\n           (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1))\n        (cryptol:/Main/map_to_curve_simple_swu_impl u)\n        (cryptol:/Main/map_to_curve_simple_swu_3mod4_impl u))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n      x@2 = cryptol:/Parameters/Fp.2\n    }\n in (u : Prelude.Integer)\n-> let { x@3 = cryptol:/HashToCurveE1Aux/map_to_curve_simple_swu_3mod4 u\n         x@4 = x@3.2\n         x@5 = x@4.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Integer * Prelude.Integer)\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n         (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n            cryptol:/HashToCurveE1/Curve_E'\n            (cryptol:/Main/map_to_curve_simple_swu_3mod4_impl u))\n         (x@2.1 (x@3.1,x@4.1),x@2.1 (x@5.1,x@5.2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PEqInteger\n    }\n in (u : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Integer * Prelude.Integer)\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@1 x@1)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n           cryptol:/HashToCurveE1/Curve_E'\n           (cryptol:/Main/map_to_curve_simple_swu_impl u))\n        (cryptol:/HashToCurveE1/map_to_curve_simple_swu u))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 2\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2\n      x@5 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n      x@6 = Prelude.Vec 2 Prelude.Integer\n      x@7 = cryptol:/implementation/Fp12/v_frobenius_constant_2_sq\n      x@8 = Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x@7 x@4\n    }\n in (x : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6 (Cryptol.PEqSeq x@3 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 (x@7,x))\n        [ x@5.1\n            (Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@2),\n             x@8)\n        , x@5.1\n            (Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x x@4,x@8) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 2\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2\n      x@5 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n      x@6 = Prelude.Vec 2 Prelude.Integer\n      x@7 = cryptol:/implementation/Fp12/v_frobenius_constant_3_sq\n      x@8 = Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x@7 x@4\n    }\n in (x : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6 (Cryptol.PEqSeq x@3 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 (x@7,x))\n        [ x@5.1\n            (Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@2),\n             x@8)\n        , x@5.1\n            (Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x x@4,x@8) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 2\n      x@4 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5 (Cryptol.PEqSeq x@3 Prelude.Integer Cryptol.PEqInteger)\n        (x@6.1 (x@6.2.2.2.1 cryptol:/BLSFieldExtras/sqrt_fp2_c2,x))\n        [ x@4.2.1\n            (Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n        , x@4.1\n            (Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@2)) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 2\n      x@4 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5 (Cryptol.PEqSeq x@3 Prelude.Integer Cryptol.PEqInteger)\n        (x@6.1 (x@6.2.2.2.1 cryptol:/BLSFieldExtras/sqrt_fp2_c3,x))\n        [ x@4.1\n            (Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n        , x@4.2.1\n            (Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@2)) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 2\n      x@4 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5 (Cryptol.PEqSeq x@3 Prelude.Integer Cryptol.PEqInteger)\n        (x@6.1 (x@6.2.2.2.1 cryptol:/Parameters/u,x))\n        [ x@4.1\n            (Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@2))\n        , x@4.1\n            (Cryptol.ecAt x@3 Prelude.Integer Prelude.Integer x@1 x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2)) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 4\n      x@4 = Prelude.Vec 4 Prelude.Bool\n      x@5 = Cryptol.PIntegralSeqBool x@3\n    }\n in (x : x@4)\n-> (y : x@4)\n-> let { x@6 = Cryptol.ecDiv x@4 x@5 x y\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (Cryptol.ecToInteger x@4 x@5 x@6)\n         (Prelude.ite Prelude.Integer\n            (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool x@3) y\n               (Cryptol.ecNumber (Cryptol.TCNum 0) x@4\n                  (Cryptol.PLiteralSeqBool x@3)))\n            (cryptol:/implementation/CryptolHelpers/apply x@4 Prelude.Integer\n               (Cryptol.ecToInteger x@4 x@5)\n               x@6)\n            (Cryptol.ecMod Prelude.Integer x@1\n               (Cryptol.ecDiv Prelude.Integer x@1\n                  (Cryptol.ecToInteger x@4 x@5 x)\n                  (Cryptol.ecToInteger x@4 x@5 y))\n               (Cryptol.ecExp Prelude.Integer Prelude.Integer\n                  Cryptol.PRingInteger\n                  x@1\n                  (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n                  (Cryptol.ecNumber x@3 Prelude.Integer x@2)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 4\n      x@4 = Prelude.Vec 4 Prelude.Bool\n      x@5 = Cryptol.PIntegralSeqBool x@3\n    }\n in (x : x@4)\n-> (y : x@4)\n-> let { x@6 = Cryptol.ecMod x@4 x@5 x y\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (Cryptol.ecToInteger x@4 x@5 x@6)\n         (Prelude.ite Prelude.Integer\n            (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool x@3) y\n               (Cryptol.ecNumber (Cryptol.TCNum 0) x@4\n                  (Cryptol.PLiteralSeqBool x@3)))\n            (cryptol:/implementation/CryptolHelpers/apply x@4 Prelude.Integer\n               (Cryptol.ecToInteger x@4 x@5)\n               x@6)\n            (Cryptol.ecMod Prelude.Integer x@1\n               (Cryptol.ecMod Prelude.Integer x@1\n                  (Cryptol.ecToInteger x@4 x@5 x)\n                  (Cryptol.ecToInteger x@4 x@5 y))\n               (Cryptol.ecExp Prelude.Integer Prelude.Integer\n                  Cryptol.PRingInteger\n                  x@1\n                  (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n                  (Cryptol.ecNumber x@3 Prelude.Integer x@2)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 4\n      x@4 = Prelude.Vec 4 Prelude.Bool\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@4 (Cryptol.PIntegralSeqBool x@3)\n           (Cryptol.ecFromInteger x@4 (Cryptol.PRingSeqBool x@3) x))\n        (Cryptol.ecMod Prelude.Integer x@1 x\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer Cryptol.PRingInteger\n              x@1\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n              (Cryptol.ecNumber x@3 Prelude.Integer x@2))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 5\n      x@4 = Prelude.Vec 5 Prelude.Bool\n      x@5 = Cryptol.PIntegralSeqBool x@3\n    }\n in (x : x@4)\n-> (y : x@4)\n-> let { x@6 = Cryptol.ecDiv x@4 x@5 x y\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (Cryptol.ecToInteger x@4 x@5 x@6)\n         (Prelude.ite Prelude.Integer\n            (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool x@3) y\n               (Cryptol.ecNumber (Cryptol.TCNum 0) x@4\n                  (Cryptol.PLiteralSeqBool x@3)))\n            (cryptol:/implementation/CryptolHelpers/apply x@4 Prelude.Integer\n               (Cryptol.ecToInteger x@4 x@5)\n               x@6)\n            (Cryptol.ecMod Prelude.Integer x@1\n               (Cryptol.ecDiv Prelude.Integer x@1\n                  (Cryptol.ecToInteger x@4 x@5 x)\n                  (Cryptol.ecToInteger x@4 x@5 y))\n               (Cryptol.ecExp Prelude.Integer Prelude.Integer\n                  Cryptol.PRingInteger\n                  x@1\n                  (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n                  (Cryptol.ecNumber x@3 Prelude.Integer x@2)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 5\n      x@4 = Prelude.Vec 5 Prelude.Bool\n      x@5 = Cryptol.PIntegralSeqBool x@3\n    }\n in (x : x@4)\n-> (y : x@4)\n-> let { x@6 = Cryptol.ecMod x@4 x@5 x y\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (Cryptol.ecToInteger x@4 x@5 x@6)\n         (Prelude.ite Prelude.Integer\n            (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool x@3) y\n               (Cryptol.ecNumber (Cryptol.TCNum 0) x@4\n                  (Cryptol.PLiteralSeqBool x@3)))\n            (cryptol:/implementation/CryptolHelpers/apply x@4 Prelude.Integer\n               (Cryptol.ecToInteger x@4 x@5)\n               x@6)\n            (Cryptol.ecMod Prelude.Integer x@1\n               (Cryptol.ecMod Prelude.Integer x@1\n                  (Cryptol.ecToInteger x@4 x@5 x)\n                  (Cryptol.ecToInteger x@4 x@5 y))\n               (Cryptol.ecExp Prelude.Integer Prelude.Integer\n                  Cryptol.PRingInteger\n                  x@1\n                  (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n                  (Cryptol.ecNumber x@3 Prelude.Integer x@2)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.TCNum 5\n      x@4 = Prelude.Vec 5 Prelude.Bool\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@4 (Cryptol.PIntegralSeqBool x@3)\n           (Cryptol.ecFromInteger x@4 (Cryptol.PRingSeqBool x@3) x))\n        (Cryptol.ecMod Prelude.Integer x@1 x\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer Cryptol.PRingInteger\n              x@1\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n              (Cryptol.ecNumber x@3 Prelude.Integer x@2))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@2\n      x@4 = Cryptol.TCNum 2\n      x@5 = cryptol:/Parameters/Fp\n      x@6 = x@5.2.2.2.2.2.2.2\n      x@7 = Prelude.Vec 2 Prelude.Integer\n      x@8 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n      x@9 = cryptol:/G2SubGroupCheck/psi_c2\n      x@10 = Cryptol.ecAt x@4 Prelude.Integer Prelude.Integer x@1 x@9 x@3\n    }\n in (x : x@7)\n-> let { x@11 = (Cryptol.ecAt x@4 Prelude.Integer Prelude.Integer x@1 x x@3,\n                 Cryptol.ecAt x@4 Prelude.Integer Prelude.Integer x@1 x\n                   (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2))\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@7 (Cryptol.PEqSeq x@4 Prelude.Integer Cryptol.PEqInteger)\n         (x@8.1 (x,x@8.2.1 x@9))\n         [x@6.1 (x@6.2.2.2.2 x@11,x@10), x@6.1 (x@5.1 x@11,x@10)])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n      x@3 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@2\n      x@4 = Cryptol.TCNum 2\n      x@5 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n      x@6 = Prelude.Vec 2 Prelude.Integer\n      x@7 = cryptol:/Frobenius/v_frobenius_constant_sq\n      x@8 = Cryptol.ecAtBack x@4 Prelude.Integer Prelude.Integer x@1 x@7 x@3\n    }\n in (x : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6 (Cryptol.PEqSeq x@4 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 (x@7,x))\n        [ x@5.1 (Cryptol.ecAt x@4 Prelude.Integer Prelude.Integer x@1 x x@3,x@8)\n        , x@5.1\n            (Cryptol.ecAt x@4 Prelude.Integer Prelude.Integer x@1 x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@2),\n             x@8) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fpx2_invariant\n           (cryptol:/implementation/Field/fpx2_rep x))\n        (cryptol:/implementation/Fp12/Fpx2.2.2.2.2.2.2.1\n           (Cryptol.ecMod Prelude.Integer x@1 x\n              (Cryptol.ecExp Prelude.Integer Prelude.Integer\n                 Cryptol.PRingInteger\n                 x@1\n                 (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n                 (Cryptol.ecNumber (Cryptol.TCNum 768) Prelude.Integer x@2)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fpx2_abs\n           (cryptol:/implementation/Field/fpx2_rep x))\n        (Cryptol.ecMod Prelude.Integer x@1 x\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer Cryptol.PRingInteger\n              x@1\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n              (Cryptol.ecNumber (Cryptol.TCNum 768) Prelude.Integer x@2))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PIntegralInteger\n      x@2 = Cryptol.PLiteralInteger\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fpx2_abs\n           (cryptol:/implementation/Field/fpx2_rep x))\n        (Prelude.ite Prelude.Integer\n           (cryptol:/implementation/Fp12/Fpx2.2.2.2.2.2.2.1 x)\n           x\n           (Cryptol.ecMod Prelude.Integer x@1 x\n              (Cryptol.ecExp Prelude.Integer Prelude.Integer\n                 Cryptol.PRingInteger\n                 x@1\n                 (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@2)\n                 (Cryptol.ecNumber (Cryptol.TCNum 768) Prelude.Integer x@2)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.TCNum 2\n      x@3 = Cryptol.ecNumber x@2 Prelude.Integer x@1\n      x@4 = Prelude.Vec 2 Prelude.Integer\n      x@5 = x@4 * x@4\n      x@6 = Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@4 * x@5))\n-> let { x@7 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@7)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@5 (Cryptol.PEqPair x@4 x@4 x@6 x@6)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@3 p1))\n            (cryptol:e2_scalar_mult#6884 x@3 x@7)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 10) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 11) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 12) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 13) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 14) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 15) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 16) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 3) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 4) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 5) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 6) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 7) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 8) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n      x@2 = Cryptol.ecNumber (Cryptol.TCNum 9) Prelude.Integer x@1\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@3 * x@4))\n-> let { x@6 = cryptol:affinify_E'#6889 p1\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n            (cryptol:e2_order#6883 x@6)\n            (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1))\n         (Cryptol.ecEq x@4 (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n            (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@2 p1))\n            (cryptol:e2_scalar_mult#6884 x@2 x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PLiteralInteger\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         cryptol:/Parameters/u\n         [ Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@1\n         , Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@1 ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PRingInteger\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 4\n      x@5 = Prelude.Vec 4 Prelude.Bool\n      x@6 = Cryptol.PIntegralSeqBool x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@5 x@6\n           (Cryptol.ecMinus x@5 (Cryptol.PRingSeqBool x@4) x y))\n        (Cryptol.ecMod Prelude.Integer x@2\n           (Cryptol.ecMinus Prelude.Integer x@1 (Cryptol.ecToInteger x@5 x@6 x)\n              (Cryptol.ecToInteger x@5 x@6 y))\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer x@1 x@2\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@3)\n              (Cryptol.ecNumber x@4 Prelude.Integer x@3))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PRingInteger\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 4\n      x@5 = Prelude.Vec 4 Prelude.Bool\n      x@6 = Cryptol.PIntegralSeqBool x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@5 x@6\n           (Cryptol.ecMul x@5 (Cryptol.PRingSeqBool x@4) x y))\n        (Cryptol.ecMod Prelude.Integer x@2\n           (Cryptol.ecMul Prelude.Integer x@1 (Cryptol.ecToInteger x@5 x@6 x)\n              (Cryptol.ecToInteger x@5 x@6 y))\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer x@1 x@2\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@3)\n              (Cryptol.ecNumber x@4 Prelude.Integer x@3))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PRingInteger\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 4\n      x@5 = Prelude.Vec 4 Prelude.Bool\n      x@6 = Cryptol.PIntegralSeqBool x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@5 x@6\n           (Cryptol.ecPlus x@5 (Cryptol.PRingSeqBool x@4) x y))\n        (Cryptol.ecMod Prelude.Integer x@2\n           (Cryptol.ecPlus Prelude.Integer x@1 (Cryptol.ecToInteger x@5 x@6 x)\n              (Cryptol.ecToInteger x@5 x@6 y))\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer x@1 x@2\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@3)\n              (Cryptol.ecNumber x@4 Prelude.Integer x@3))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PRingInteger\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 5\n      x@5 = Prelude.Vec 5 Prelude.Bool\n      x@6 = Cryptol.PIntegralSeqBool x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@5 x@6\n           (Cryptol.ecMinus x@5 (Cryptol.PRingSeqBool x@4) x y))\n        (Cryptol.ecMod Prelude.Integer x@2\n           (Cryptol.ecMinus Prelude.Integer x@1 (Cryptol.ecToInteger x@5 x@6 x)\n              (Cryptol.ecToInteger x@5 x@6 y))\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer x@1 x@2\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@3)\n              (Cryptol.ecNumber x@4 Prelude.Integer x@3))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PRingInteger\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 5\n      x@5 = Prelude.Vec 5 Prelude.Bool\n      x@6 = Cryptol.PIntegralSeqBool x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@5 x@6\n           (Cryptol.ecMul x@5 (Cryptol.PRingSeqBool x@4) x y))\n        (Cryptol.ecMod Prelude.Integer x@2\n           (Cryptol.ecMul Prelude.Integer x@1 (Cryptol.ecToInteger x@5 x@6 x)\n              (Cryptol.ecToInteger x@5 x@6 y))\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer x@1 x@2\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@3)\n              (Cryptol.ecNumber x@4 Prelude.Integer x@3))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.PRingInteger\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 5\n      x@5 = Prelude.Vec 5 Prelude.Bool\n      x@6 = Cryptol.PIntegralSeqBool x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (Cryptol.ecToInteger x@5 x@6\n           (Cryptol.ecPlus x@5 (Cryptol.PRingSeqBool x@4) x y))\n        (Cryptol.ecMod Prelude.Integer x@2\n           (Cryptol.ecPlus Prelude.Integer x@1 (Cryptol.ecToInteger x@5 x@6 x)\n              (Cryptol.ecToInteger x@5 x@6 y))\n           (Cryptol.ecExp Prelude.Integer Prelude.Integer x@1 x@2\n              (Cryptol.ecNumber (Cryptol.TCNum 2) Prelude.Integer x@3)\n              (Cryptol.ecNumber x@4 Prelude.Integer x@3))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.PEqInteger\n      x@4 = Cryptol.TCNum 4\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n      x@7 = Cryptol.tcAdd x@2 x@1\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@8 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@3 x@3)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@1\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@7 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@7))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e1_order#6739 x@8))\n            x@8)\n         (cryptol:mult_w5_result_term#6785 x@4 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.PEqInteger\n      x@4 = Cryptol.TCNum 4\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n      x@7 = Cryptol.tcAdd x@2 x@1\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@8 = cryptol:affinify_E#6751 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@3 x@3)\n         (cryptol:mult_w5_result_term#6785 x@4 e p)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@1\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@7 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@7))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e1_order#6739 x@8))\n            x@8))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.PEqInteger\n      x@4 = Cryptol.TCNum 4\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n      x@7 = Cryptol.tcAdd x@2 x@1\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p1 : x@5)\n-> let { x@8 = cryptol:e1_order#6739 p1\n         x@9 = cryptol:booth#6713 x@4 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@3 x@3)\n         (cryptol:e1_scalar_mult#6740 x@9 p1)\n         (Prelude.ite x@5\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@8\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@4 e)\n                  cryptol:shift#6702))\n            (cryptol:e1_scalar_mult#6740\n               (cryptol:booth_with_add'#6796 x@1\n                  (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq x@7 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@6 x@7 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@6 x@7))\n                     (cryptol:booth_parts#6712 x@4 e))\n                  x@8)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@5\n                -> x@5)\n               cryptol:e1_scalar_mult#6740\n               x@9\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 100\n      x@4 = Cryptol.TCNum 20\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n      x@7 = Cryptol.tcAdd x@1 x@4\n    }\n in (e : Prelude.Vec 100 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@8 = cryptol:affinify_E#6751 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:mult_w5_result_term#6785 x@3 e p)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@4\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@7 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@7))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e1_order#6739 x@8))\n            x@8))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 2\n      x@4 = Cryptol.TCNum 12\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n      x@7 = Cryptol.tcAdd x@1 x@3\n    }\n in (e : Prelude.Vec 12 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@8 = cryptol:affinify_E#6751 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:mult_w5_result_term#6785 x@4 e p)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@3\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@7 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@7))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e1_order#6739 x@8))\n            x@8))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 2\n      x@4 = Cryptol.TCNum 14\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcAdd x@1 x@3\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 14 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@8 = cryptol:affinify_E#6751 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:mult_w5_result_term#6785 x@4 e p)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@3\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@6))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e1_order#6739 x@8))\n            x@8))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 15\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n      x@7 = Cryptol.tcAdd x@1 x@3\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@8 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@3\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@7 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@7))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e1_order#6739 x@8))\n            x@8)\n         (cryptol:mult_w5_result_term#6785 x@4 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 15\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n      x@7 = Cryptol.tcAdd x@1 x@3\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> (p1 : x@5)\n-> let { x@8 = cryptol:e1_order#6739 p1\n         x@9 = cryptol:booth#6713 x@4 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:e1_scalar_mult#6740 x@9 p1)\n         (Prelude.ite x@5\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@8\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@4 e)\n                  cryptol:shift#6702))\n            (cryptol:e1_scalar_mult#6740\n               (cryptol:booth_with_add'#6796 x@3\n                  (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq x@7 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@6 x@7 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@6 x@7))\n                     (cryptol:booth_parts#6712 x@4 e))\n                  x@8)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@5\n                -> x@5)\n               cryptol:e1_scalar_mult#6740\n               x@9\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 17\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcAdd x@1 x@3\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@8 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@3\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@6))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e1_order#6739 x@8))\n            x@8)\n         (cryptol:mult_w5_result_term#6785 x@4 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 17\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcAdd x@1 x@3\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> (p1 : x@5)\n-> let { x@8 = cryptol:e1_order#6739 p1\n         x@9 = cryptol:booth#6713 x@4 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:e1_scalar_mult#6740 x@9 p1)\n         (Prelude.ite x@5\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@8\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@4 e)\n                  cryptol:shift#6702))\n            (cryptol:e1_scalar_mult#6740\n               (cryptol:booth_with_add'#6796 x@3\n                  (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                     (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@7 x@6 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@7 x@6))\n                     (cryptol:booth_parts#6712 x@4 e))\n                  x@8)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@5\n                -> x@5)\n               cryptol:e1_scalar_mult#6740\n               x@9\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) x@3\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@7 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@1\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e1_order#6739 x@7))\n            x@7)\n         (cryptol:mult_w5_result_term#6785 x@3 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) x@3\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@7 = cryptol:affinify_E#6751 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:mult_w5_result_term#6785 x@3 e p)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@1\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e1_order#6739 x@7))\n            x@7))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) x@3\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p1 : x@5)\n-> let { x@7 = cryptol:e1_order#6739 p1\n         x@8 = cryptol:booth#6713 x@3 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:e1_scalar_mult#6740 x@8 p1)\n         (Prelude.ite x@5\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@7\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@3 e)\n                  cryptol:shift#6702))\n            (cryptol:e1_scalar_mult#6740\n               (cryptol:booth_with_add'#6796 x@1\n                  (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq x@4 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@6 x@4 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@6 x@4))\n                     (cryptol:booth_parts#6712 x@3 e))\n                  x@7)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@5\n                -> x@5)\n               cryptol:e1_scalar_mult#6740\n               x@8\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@7 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@1\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e1_order#6739 x@7))\n            x@7)\n         (cryptol:mult_w5_result_term#6785 x@3 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@7 = cryptol:affinify_E#6751 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:mult_w5_result_term#6785 x@3 e p)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@1\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e1_order#6739 x@7))\n            x@7))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p1 : x@5)\n-> let { x@7 = cryptol:e1_order#6739 p1\n         x@8 = cryptol:booth#6713 x@3 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:e1_scalar_mult#6740 x@8 p1)\n         (Prelude.ite x@5\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@7\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@3 e)\n                  cryptol:shift#6702))\n            (cryptol:e1_scalar_mult#6740\n               (cryptol:booth_with_add'#6796 x@1\n                  (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq x@4 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@6 x@4 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@6 x@4))\n                     (cryptol:booth_parts#6712 x@3 e))\n                  x@7)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@5\n                -> x@5)\n               cryptol:e1_scalar_mult#6740\n               x@8\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 64\n      x@4 = Cryptol.TCNum 12\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcAdd x@1 x@4\n      x@7 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 64 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@8 = cryptol:affinify_E#6751 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:mult_w5_result_term#6785 x@3 e p)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@4\n               (Prelude.coerce (Cryptol.seq x@7 Prelude.Integer)\n                  (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@7 x@6 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@7 x@6))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e1_order#6739 x@8))\n            x@8))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 7\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 7 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@7 = cryptol:affinify_E#6751 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:mult_w5_result_term#6785 x@3 e p)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@1\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e1_order#6739 x@7))\n            x@7))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 9\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> (p : (Prelude.Integer * x@5))\n-> let { x@7 = cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                 cryptol:/Parameters/E\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:e1_scalar_mult#6740\n            (cryptol:booth_with_add'#6796 x@1\n               (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@6 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@6 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e1_order#6739 x@7))\n            x@7)\n         (cryptol:mult_w5_result_term#6785 x@3 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 1\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.TCNum 9\n      x@4 = Cryptol.tcAdd x@1 x@1\n      x@5 = Prelude.Integer * Prelude.Integer\n      x@6 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@1 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> (p1 : x@5)\n-> let { x@7 = cryptol:e1_order#6739 p1\n         x@8 = cryptol:booth#6713 x@3 e\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:e1_scalar_mult#6740 x@8 p1)\n         (Prelude.ite x@5\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@7\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@3 e)\n                  cryptol:shift#6702))\n            (cryptol:e1_scalar_mult#6740\n               (cryptol:booth_with_add'#6796 x@1\n                  (Prelude.coerce (Cryptol.seq x@6 Prelude.Integer)\n                     (Cryptol.seq x@4 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@6 x@4 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@6 x@4))\n                     (cryptol:booth_parts#6712 x@3 e))\n                  x@7)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@5\n                -> x@5)\n               cryptol:e1_scalar_mult#6740\n               x@8\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 11\n    }\n in (e : Prelude.Vec 11 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6713 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 15\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6713 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 15\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@1 e)\n        (cryptol:booth#6713 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 16\n    }\n in (e : Prelude.Vec 16 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:plain#6701 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 17\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6713 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 17\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@1 e)\n        (cryptol:booth#6713 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 2\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqSeq x@1 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 (x,x))\n        (cryptol:fp2_exp#6840 x\n           (Cryptol.ecNumber x@1 Prelude.Integer Cryptol.PLiteralInteger)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 24\n    }\n in (e : Prelude.Vec 24 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:plain#6701 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 25\n    }\n in (e : Prelude.Vec 25 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6713 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 31\n    }\n in (e : Prelude.Vec 31 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6713 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 381\n    }\n in (e : Prelude.Vec 381 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:plain#6701 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 39\n    }\n in (e : Prelude.Vec 39 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6713 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 4\n      x@2 = Prelude.Vec 4 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecEq x@2 (Cryptol.PEqSeqBool x@1) x y)\n        (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 4\n      x@2 = Prelude.Vec 4 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecGt x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 4\n      x@2 = Prelude.Vec 4 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecGtEq x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecGtEq Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 4\n      x@2 = Prelude.Vec 4 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecLt x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecLt Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 4\n      x@2 = Prelude.Vec 4 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecLtEq x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecLtEq Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 4\n      x@2 = Prelude.Vec 4 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecNotEq x@2 (Cryptol.PEqSeqBool x@1) x y)\n        (Cryptol.ecNotEq Prelude.Integer Cryptol.PEqInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 4\n      x@2 = Prelude.Vec 4 Prelude.Bool\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqSeqBool x@1)\n        (Cryptol.ecFromInteger x@2 (Cryptol.PRingSeqBool x@1)\n           (Cryptol.ecToInteger x@2 (Cryptol.PIntegralSeqBool x@1) x))\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 4\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@1 e)\n        (cryptol:booth#6713 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 40\n    }\n in (e : Prelude.Vec 40 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:plain#6701 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 5\n      x@2 = Prelude.Vec 5 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecEq x@2 (Cryptol.PEqSeqBool x@1) x y)\n        (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 5\n      x@2 = Prelude.Vec 5 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecGt x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 5\n      x@2 = Prelude.Vec 5 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecGtEq x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecGtEq Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 5\n      x@2 = Prelude.Vec 5 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecLt x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecLt Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 5\n      x@2 = Prelude.Vec 5 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecLtEq x@2 (Cryptol.PCmpSeqBool x@1) x y)\n        (Cryptol.ecLtEq Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 5\n      x@2 = Prelude.Vec 5 Prelude.Bool\n      x@3 = Cryptol.PIntegralSeqBool x@1\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecNotEq x@2 (Cryptol.PEqSeqBool x@1) x y)\n        (Cryptol.ecNotEq Prelude.Integer Cryptol.PEqInteger\n           (Cryptol.ecToInteger x@2 x@3 x)\n           (Cryptol.ecToInteger x@2 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 5\n      x@2 = Prelude.Vec 5 Prelude.Bool\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqSeqBool x@1)\n        (Cryptol.ecFromInteger x@2 (Cryptol.PRingSeqBool x@1)\n           (Cryptol.ecToInteger x@2 (Cryptol.PIntegralSeqBool x@1) x))\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 5\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@1 e)\n        (cryptol:booth#6713 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 6\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@1 e)\n        (cryptol:booth#6713 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 9\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:booth#6713 x@1 e)\n        (cryptol:toInt#6695 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.TCNum 9\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@1 e)\n        (cryptol:booth#6713 x@1 e))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@2 * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n        (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@1 p1))\n        (cryptol:e2_scalar_mult#6884 x@1 (cryptol:affinify_E'#6889 p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = cryptol:/Parameters/E'\n      x@5 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@2 * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@5 x@5)\n        (cryptol:/ShortWeierstrassCurve/affinify x@2 x@4\n           (cryptol:small_mult#6904 x@1 p1))\n        (cryptol:e2_scalar_mult#6884 x@1\n           (cryptol:/ShortWeierstrassCurve/affinify x@2 x@4 p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n              Cryptol.PLiteralInteger\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@2 * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n        (cryptol:affinify_E'#6889 (cryptol:small_mult#6904 x@1 p1))\n        (cryptol:e2_scalar_mult#6884 x@1 (cryptol:affinify_E'#6889 p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Bool\n      -> Prelude.Bool\n      -> Prelude.Bool\n    }\n in (a : Prelude.Bool)\n-> (b : Prelude.Bool)\n-> Prelude.EqTrue\n     (Prelude.boolEq (Prelude.ite Prelude.Bool a Prelude.True b)\n        (Prelude.or a b))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Bool\n      -> Prelude.Bool\n      -> Prelude.Bool\n    }\n in (a : Prelude.Bool)\n-> (b : Prelude.Bool)\n-> Prelude.EqTrue\n     (Prelude.boolEq (Prelude.ite Prelude.Bool a b Prelude.False)\n        (Prelude.and a b))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Bool\n      -> Prelude.Bool\n      x@2 = Prelude.Bool\n      -> x@1\n    }\n in (a : Prelude.Bool)\n-> (b : Prelude.Bool)\n-> Prelude.EqTrue\n     (Prelude.boolEq (Prelude.not (Prelude.and a b))\n        (Prelude.or (Prelude.not a) (Prelude.not b)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Bool\n      -> Prelude.Bool\n      x@2 = Prelude.Bool\n      -> x@1\n    }\n in (a : Prelude.Bool)\n-> (b : Prelude.Bool)\n-> Prelude.EqTrue\n     (Prelude.boolEq (Prelude.not (Prelude.or a b))\n        (Prelude.and (Prelude.not a) (Prelude.not b)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Prelude.Integer * x@3\n      x@5 = x@3\n      -> Prelude.Integer\n      x@6 = cryptol:/Parameters/E\n      x@7 = cryptol:/HashToCurveE1/Curve_E'\n    }\n in (p : x@4)\n-> let { x@8 = cryptol:/Main/isogeny_map_to_E1_impl p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 x@8)\n         (Prelude.ite x@3\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer\n                  x@7\n                  p)\n               (Cryptol.ecCompl Prelude.Bool Cryptol.PLogicBit\n                  (cryptol:/ShortWeierstrassCurve/is_zero Prelude.Integer\n                     cryptol:/Parameters/Fp\n                     p.2.2)))\n            (cryptol:/HashToCurveE1/iso_map\n               (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@7 p))\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@5 * x@5 * Prelude.Integer * Prelude.Integer * x@1 * (x@3\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@5 * x@1 * x@1 * x@1 * x@5)\n               (x@4\n                -> x@3)\n               (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer)\n               x@6\n               x@8)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = Prelude.Integer * x@3\n      x@5 = x@3\n      -> Prelude.Integer\n      x@6 = cryptol:/Parameters/E\n    }\n in (p : x@4)\n-> let { x@7 = cryptol:/Main/isogeny_map_to_E1_impl p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 x@7)\n         (Prelude.ite x@3\n            (cryptol:/ShortWeierstrassCurve/is_zero Prelude.Integer\n               cryptol:/Parameters/Fp\n               p.2.2)\n            (cryptol:/HashToCurveE1/iso_map\n               (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n                  cryptol:/HashToCurveE1/Curve_E'\n                  p))\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@5 * x@5 * Prelude.Integer * Prelude.Integer * x@1 * (x@3\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@5 * x@1 * x@1 * x@1 * x@5)\n               (x@4\n                -> x@3)\n               (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer)\n               x@6\n               x@7)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = x@2\n      -> Prelude.Integer\n      x@4 = cryptol:/Parameters/E\n    }\n in (P : x@2)\n-> let { x@5 = cryptol:/ShortWeierstrassCurve/projectify Prelude.Integer x@4 P\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@4\n            x@5)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/Cryptol/%2f%5c\n               (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer\n                  x@4\n                  P)\n               (Cryptol.ecCompl Prelude.Bool Cryptol.PLogicBit\n                  (cryptol:/ShortWeierstrassCurve/is_point_O Prelude.Integer x@4\n                     P)))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@3 * x@3 * Prelude.Integer * Prelude.Integer * x@1 * (x@2\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@3 * x@1 * x@1 * x@1 * x@3)\n               ((Prelude.Integer * x@2)\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@4\n               x@5)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Integer\n      -> Prelude.Integer\n      x@2 = Prelude.Integer * Prelude.Integer\n      x@3 = x@2\n      -> Prelude.Integer\n      x@4 = x@2\n      -> Prelude.Bool\n      x@5 = cryptol:/Parameters/E\n    }\n in (P : x@2)\n-> let { x@6 = cryptol:sigma#6809 P\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer x@5\n            x@6)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer x@5\n               P)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@3 * x@3 * Prelude.Integer * Prelude.Integer * x@1 * x@4 * (Prelude.Integer\n                                                                                                                 -> Prelude.Bool) * x@3 * x@1 * x@1 * x@1 * x@3)\n               x@4\n               (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer)\n               x@5\n               x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> Prelude.Integer\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.natToInt 1\n      x@4 = Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Integer * x@4\n      x@6 = cryptol:/Parameters/E\n      x@7 = Prelude.natToInt 16\n    }\n in (p : x@5)\n-> (q : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6\n           (cryptol:/Main/dbl_n_add p x@7 q))\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@6\n           (cryptol:e1_scalar_mult#6740\n              (Prelude.ite Prelude.Integer\n                 (Prelude.intLe (Prelude.natToInt 0) x@7)\n                 (Prelude.expByNat Prelude.Integer x@3 Prelude.intMul\n                    (Prelude.natToInt 2)\n                    (Prelude.intToNat x@7))\n                 x@3)\n              (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 p))\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> Prelude.Integer\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.natToInt 1\n      x@4 = Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Integer * x@4\n      x@6 = cryptol:/Parameters/E\n      x@7 = Prelude.natToInt 2\n    }\n in (p : x@5)\n-> (q : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6\n           (cryptol:/Main/dbl_n_add p x@7 q))\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@6\n           (cryptol:e1_scalar_mult#6740\n              (Prelude.ite Prelude.Integer\n                 (Prelude.intLe (Prelude.natToInt 0) x@7)\n                 (Prelude.expByNat Prelude.Integer x@3 Prelude.intMul x@7\n                    (Prelude.intToNat x@7))\n                 x@3)\n              (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 p))\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> Prelude.Integer\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.natToInt 1\n      x@4 = Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Integer * x@4\n      x@6 = cryptol:/Parameters/E\n      x@7 = Prelude.natToInt 3\n    }\n in (p : x@5)\n-> (q : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6\n           (cryptol:/Main/dbl_n_add p x@7 q))\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@6\n           (cryptol:e1_scalar_mult#6740\n              (Prelude.ite Prelude.Integer\n                 (Prelude.intLe (Prelude.natToInt 0) x@7)\n                 (Prelude.expByNat Prelude.Integer x@3 Prelude.intMul\n                    (Prelude.natToInt 2)\n                    (Prelude.intToNat x@7))\n                 x@3)\n              (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 p))\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> Prelude.Integer\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.natToInt 1\n      x@4 = Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Integer * x@4\n      x@6 = cryptol:/Parameters/E\n      x@7 = Prelude.natToInt 32\n    }\n in (p : x@5)\n-> (q : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6\n           (cryptol:/Main/dbl_n_add p x@7 q))\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@6\n           (cryptol:e1_scalar_mult#6740\n              (Prelude.ite Prelude.Integer\n                 (Prelude.intLe (Prelude.natToInt 0) x@7)\n                 (Prelude.expByNat Prelude.Integer x@3 Prelude.intMul\n                    (Prelude.natToInt 2)\n                    (Prelude.intToNat x@7))\n                 x@3)\n              (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 p))\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> Prelude.Integer\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.natToInt 1\n      x@4 = Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Integer * x@4\n      x@6 = cryptol:/Parameters/E\n      x@7 = Prelude.natToInt 9\n    }\n in (p : x@5)\n-> (q : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6\n           (cryptol:/Main/dbl_n_add p x@7 q))\n        (cryptol:/ShortWeierstrassCurve/add Prelude.Integer x@6\n           (cryptol:e1_scalar_mult#6740\n              (Prelude.ite Prelude.Integer\n                 (Prelude.intLe (Prelude.natToInt 0) x@7)\n                 (Prelude.expByNat Prelude.Integer x@3 Prelude.intMul\n                    (Prelude.natToInt 2)\n                    (Prelude.intToNat x@7))\n                 x@3)\n              (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 p))\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@6 q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = (n : Prelude.Nat)\n      -> Prelude.Vec n Prelude.Bool\n      -> Prelude.Vec n Prelude.Bool\n      -> Prelude.Vec n Prelude.Bool\n      x@4 = Prelude.Vec 64 Prelude.Bool\n      x@5 = Prelude.bvNat 64 0\n      x@6 = Cryptol.TCNum 384\n    }\n in (x : Prelude.Vec 8 x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 384 Prelude.Bool) (Cryptol.PEqWord 384)\n        (cryptol:/Cryptol/drop x@6 x@6 Prelude.Bool\n           (Prelude.bvURem 768\n              (cryptol:/implementation/Types/vec768_abs\n                 [ Prelude.at 8 x@4 x 0\n                 , Prelude.at 8 x@4 x 1\n                 , Prelude.at 8 x@4 x 2\n                 , Prelude.at 8 x@4 x 3\n                 , Prelude.at 8 x@4 x 4\n                 , Prelude.at 8 x@4 x 5\n                 , Prelude.at 8 x@4 x 6\n                 , Prelude.at 8 x@4 x 7\n                 , x@5\n                 , x@5\n                 , x@5\n                 , x@5 ])\n              (Prelude.bvNat 768\n                 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787)))\n        (cryptol:/Cryptol/drop (Cryptol.TCNum 128) x@6 Prelude.Bool\n           (Prelude.bvURem 512 (cryptol:/implementation/Types/vec512_abs x)\n              (Prelude.bvNat 512\n                 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Nat\n      -> Prelude.Integer\n      x@4 = Prelude.natToInt 1\n      x@5 = cryptol:/implementation/Fp12/v_frobenius_constant_2_sq\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 14772873186050699377\n            , Prelude.bvNat 64 6749526151121446354\n            , Prelude.bvNat 64 6372666795664677781\n            , Prelude.bvNat 64 10283423008382700446\n            , Prelude.bvNat 64 286397964926079186\n            , Prelude.bvNat 64 1796971870900422465 ])\n         (Prelude.ite Prelude.Integer (Prelude.intLe (Prelude.natToInt 0) x@4)\n            (Prelude.at 2 Prelude.Integer x@5 (Prelude.intToNat x@4))\n            (Prelude.at 2 Prelude.Integer x@5 0)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Nat\n      -> Prelude.Integer\n      x@4 = Prelude.natToInt 1\n      x@5 = cryptol:/implementation/Fp12/v_frobenius_constant_3_sq\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 4897101644811774638\n            , Prelude.bvNat 64 3654671041462534141\n            , Prelude.bvNat 64 569769440802610537\n            , Prelude.bvNat 64 17053147383018470266\n            , Prelude.bvNat 64 17227549637287919721\n            , Prelude.bvNat 64 291242102765847046 ])\n         (Prelude.ite Prelude.Integer (Prelude.intLe (Prelude.natToInt 0) x@4)\n            (Prelude.at 2 Prelude.Integer x@5 (Prelude.intToNat x@4))\n            (Prelude.at 2 Prelude.Integer x@5 0)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Cryptol.PEqInteger\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Integer * Prelude.Integer)\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@4 x@4)\n         (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n            cryptol:/Parameters/E\n            (cryptol:/implementation/CurveOperation/POINTonE1_abs\n               ([ Prelude.bvNat 64 6679831729115696150\n                , Prelude.bvNat 64 8653662730902241269\n                , Prelude.bvNat 64 1535610680227111361\n                , Prelude.bvNat 64 17342916647841752903\n                , Prelude.bvNat 64 17135755455211762752\n                , Prelude.bvNat 64 1297449291367578485 ],\n                [ Prelude.bvNat 64 13451288730302620273\n                , Prelude.bvNat 64 10097742279870053774\n                , Prelude.bvNat 64 15949884091978425806\n                , Prelude.bvNat 64 5885175747529691540\n                , Prelude.bvNat 64 1016841820992199104\n                , Prelude.bvNat 64 845620083434234474 ],\n                [ Prelude.bvNat 64 8505329371266088957\n                , Prelude.bvNat 64 17002214543764226050\n                , Prelude.bvNat 64 6865905132761471162\n                , Prelude.bvNat 64 8632934651105793861\n                , Prelude.bvNat 64 6631298214892334189\n                , Prelude.bvNat 64 1582556514881692819 ])))\n         cryptol:/Parameters/BP)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = Prelude.Vec 6 x@3\n      x@7 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (x@5 * x@5) (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:/ShortWeierstrassCurve/affinify x@5 cryptol:/Parameters/E'\n            (cryptol:/implementation/CurveOperation/POINTonE2_abs\n               ([ [ Prelude.bvNat 64 17722385409647053328\n                , Prelude.bvNat 64 12967546844987299354\n                , Prelude.bvNat 64 11648722842835150208\n                , Prelude.bvNat 64 10994581490347323113\n                , Prelude.bvNat 64 8027586497049998955\n                , Prelude.bvNat 64 396758299565931735 ]\n                , [ Prelude.bvNat 64 11937283898719073798\n                , Prelude.bvNat 64 12295044263989567683\n                , Prelude.bvNat 64 4301357764460312582\n                , Prelude.bvNat 64 1953074377943790439\n                , Prelude.bvNat 64 14030662337566180679\n                , Prelude.bvNat 64 1266120665323335155 ] ],\n                [ [ Prelude.bvNat 64 5508758831087832138\n                , Prelude.bvNat 64 6448303779119275098\n                , Prelude.bvNat 64 16710190169160573786\n                , Prelude.bvNat 64 13542242618704742751\n                , Prelude.bvNat 64 563980702369916322\n                , Prelude.bvNat 64 37152010398653157 ]\n                , [ Prelude.bvNat 64 12520284671833321565\n                , Prelude.bvNat 64 1777275927576994268\n                , Prelude.bvNat 64 9704602344324656032\n                , Prelude.bvNat 64 8739618045342622522\n                , Prelude.bvNat 64 16651875250601773805\n                , Prelude.bvNat 64 804950956836789234 ] ],\n                [ [ Prelude.bvNat 64 8505329371266088957\n                , Prelude.bvNat 64 17002214543764226050\n                , Prelude.bvNat 64 6865905132761471162\n                , Prelude.bvNat 64 8632934651105793861\n                , Prelude.bvNat 64 6631298214892334189\n                , Prelude.bvNat 64 1582556514881692819 ]\n                , [x@4, x@4, x@4, x@4, x@4, x@4] ])))\n         cryptol:/Parameters/BP')",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Prelude.Vec 6 x@3\n      x@8 = Prelude.Vec 2 x@7\n      x@9 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : (x@8 * x@8))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (x@5 * x@6)\n        (Cryptol.PEqPair x@5 x@6 x@9 (Cryptol.PEqPair x@5 x@5 x@9 x@9))\n        (cryptol:/implementation/CurveOperation/POINTonE2_abs\n           (x.1,\n            x.2,\n            [ [ Prelude.bvNat 64 8505329371266088957\n            , Prelude.bvNat 64 17002214543764226050\n            , Prelude.bvNat 64 6865905132761471162\n            , Prelude.bvNat 64 8632934651105793861\n            , Prelude.bvNat 64 6631298214892334189\n            , Prelude.bvNat 64 1582556514881692819 ]\n            , [x@4, x@4, x@4, x@4, x@4, x@4] ]))\n        (cryptol:/ShortWeierstrassCurve/projectify x@5 cryptol:/Parameters/E'\n           (cryptol:/implementation/CurveOperation/POINTonE2_affine_abs x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n      x@5 = Prelude.Vec 6 x@3\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 x@5)\n         (Cryptol.PEqVec 2 x@5 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64)))\n         (cryptol:/implementation/Field/fp2_rep cryptol:/Parameters/Fp_2.2.2.1)\n         [ [ Prelude.bvNat 64 8505329371266088957\n         , Prelude.bvNat 64 17002214543764226050\n         , Prelude.bvNat 64 6865905132761471162\n         , Prelude.bvNat 64 8632934651105793861\n         , Prelude.bvNat 64 6631298214892334189\n         , Prelude.bvNat 64 1582556514881692819 ]\n         , [x@4, x@4, x@4, x@4, x@4, x@4] ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n      x@5 = Prelude.Vec 6 x@3\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/CurveOperation/POINTonE2_invariant\n            ([ [ Prelude.bvNat 64 17722385409647053328\n             , Prelude.bvNat 64 12967546844987299354\n             , Prelude.bvNat 64 11648722842835150208\n             , Prelude.bvNat 64 10994581490347323113\n             , Prelude.bvNat 64 8027586497049998955\n             , Prelude.bvNat 64 396758299565931735 ]\n             , [ Prelude.bvNat 64 11937283898719073798\n             , Prelude.bvNat 64 12295044263989567683\n             , Prelude.bvNat 64 4301357764460312582\n             , Prelude.bvNat 64 1953074377943790439\n             , Prelude.bvNat 64 14030662337566180679\n             , Prelude.bvNat 64 1266120665323335155 ] ],\n             [ [ Prelude.bvNat 64 5508758831087832138\n             , Prelude.bvNat 64 6448303779119275098\n             , Prelude.bvNat 64 16710190169160573786\n             , Prelude.bvNat 64 13542242618704742751\n             , Prelude.bvNat 64 563980702369916322\n             , Prelude.bvNat 64 37152010398653157 ]\n             , [ Prelude.bvNat 64 12520284671833321565\n             , Prelude.bvNat 64 1777275927576994268\n             , Prelude.bvNat 64 9704602344324656032\n             , Prelude.bvNat 64 8739618045342622522\n             , Prelude.bvNat 64 16651875250601773805\n             , Prelude.bvNat 64 804950956836789234 ] ],\n             [ [ Prelude.bvNat 64 8505329371266088957\n             , Prelude.bvNat 64 17002214543764226050\n             , Prelude.bvNat 64 6865905132761471162\n             , Prelude.bvNat 64 8632934651105793861\n             , Prelude.bvNat 64 6631298214892334189\n             , Prelude.bvNat 64 1582556514881692819 ]\n             , [x@4, x@4, x@4, x@4, x@4, x@4] ]))\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 17076301903736715834\n            , Prelude.bvNat 64 13907359434105313836\n            , Prelude.bvNat 64 1063007777899403918\n            , Prelude.bvNat 64 15402659025741563681\n            , Prelude.bvNat 64 5125705813544623108\n            , Prelude.bvNat 64 76826746747117401 ]\n            , [x@4, x@4, x@4, x@4, x@4, x@4] ])\n         cryptol:/implementation/Fp12/w_frobenius_constant_2_part)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 3526659474838938856\n            , Prelude.bvNat 64 17562030475567847978\n            , Prelude.bvNat 64 1632777218702014455\n            , Prelude.bvNat 64 14009062335050482331\n            , Prelude.bvNat 64 3906511377122991214\n            , Prelude.bvNat 64 368068849512964448 ]\n            , [x@4, x@4, x@4, x@4, x@4, x@4] ])\n         cryptol:/implementation/Fp12/v_frobenius_constant_2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 8505329371266088957\n            , Prelude.bvNat 64 17002214543764226050\n            , Prelude.bvNat 64 6865905132761471162\n            , Prelude.bvNat 64 8632934651105793861\n            , Prelude.bvNat 64 6631298214892334189\n            , Prelude.bvNat 64 1582556514881692819 ]\n            , [x@4, x@4, x@4, x@4, x@4, x@4] ])\n         cryptol:/Parameters/Fp_2.2.2.1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 9875771541238924739\n            , Prelude.bvNat 64 3094855109658912213\n            , Prelude.bvNat 64 5802897354862067244\n            , Prelude.bvNat 64 11677019699073781796\n            , Prelude.bvNat 64 1505592401347711080\n            , Prelude.bvNat 64 1505729768134575418 ]\n            , [x@4, x@4, x@4, x@4, x@4, x@4] ])\n         cryptol:/Frobenius/v_frobenius_constant_sq)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [x@4, x@4, x@4, x@4, x@4, x@4]\n            , [ Prelude.bvNat 64 14772873186050699377\n            , Prelude.bvNat 64 6749526151121446354\n            , Prelude.bvNat 64 6372666795664677781\n            , Prelude.bvNat 64 10283423008382700446\n            , Prelude.bvNat 64 286397964926079186\n            , Prelude.bvNat 64 1796971870900422465 ] ])\n         cryptol:/Frobenius/v_frobenius_constant)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [x@4, x@4, x@4, x@4, x@4, x@4]\n            , [ Prelude.bvNat 64 8505329371266088957\n            , Prelude.bvNat 64 17002214543764226050\n            , Prelude.bvNat 64 6865905132761471162\n            , Prelude.bvNat 64 8632934651105793861\n            , Prelude.bvNat 64 6631298214892334189\n            , Prelude.bvNat 64 1582556514881692819 ] ])\n         cryptol:/Parameters/u)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [x@4, x@4, x@4, x@4, x@4, x@4]\n            , [ Prelude.bvNat 64 8505329371266088957\n            , Prelude.bvNat 64 17002214543764226050\n            , Prelude.bvNat 64 6865905132761471162\n            , Prelude.bvNat 64 8632934651105793861\n            , Prelude.bvNat 64 6631298214892334189\n            , Prelude.bvNat 64 1582556514881692819 ] ])\n         cryptol:/implementation/Fp12/v_frobenius_constant_3)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [x@4, x@4, x@4, x@4, x@4, x@4]\n            , [ Prelude.bvNat 64 9875771541238924739\n            , Prelude.bvNat 64 3094855109658912213\n            , Prelude.bvNat 64 5802897354862067244\n            , Prelude.bvNat 64 11677019699073781796\n            , Prelude.bvNat 64 1505592401347711080\n            , Prelude.bvNat 64 1505729768134575418 ] ])\n         cryptol:/G2SubGroupCheck/psi_c1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant\n            [ [ Prelude.bvNat 64 17076301903736715834\n            , Prelude.bvNat 64 13907359434105313836\n            , Prelude.bvNat 64 1063007777899403918\n            , Prelude.bvNat 64 15402659025741563681\n            , Prelude.bvNat 64 5125705813544623108\n            , Prelude.bvNat 64 76826746747117401 ]\n            , [x@4, x@4, x@4, x@4, x@4, x@4] ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant\n            [ [ Prelude.bvNat 64 3526659474838938856\n            , Prelude.bvNat 64 17562030475567847978\n            , Prelude.bvNat 64 1632777218702014455\n            , Prelude.bvNat 64 14009062335050482331\n            , Prelude.bvNat 64 3906511377122991214\n            , Prelude.bvNat 64 368068849512964448 ]\n            , [x@4, x@4, x@4, x@4, x@4, x@4] ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant\n            [ [ Prelude.bvNat 64 8505329371266088957\n            , Prelude.bvNat 64 17002214543764226050\n            , Prelude.bvNat 64 6865905132761471162\n            , Prelude.bvNat 64 8632934651105793861\n            , Prelude.bvNat 64 6631298214892334189\n            , Prelude.bvNat 64 1582556514881692819 ]\n            , [x@4, x@4, x@4, x@4, x@4, x@4] ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant\n            [ [ Prelude.bvNat 64 9875771541238924739\n            , Prelude.bvNat 64 3094855109658912213\n            , Prelude.bvNat 64 5802897354862067244\n            , Prelude.bvNat 64 11677019699073781796\n            , Prelude.bvNat 64 1505592401347711080\n            , Prelude.bvNat 64 1505729768134575418 ]\n            , [x@4, x@4, x@4, x@4, x@4, x@4] ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant\n            [ [x@4, x@4, x@4, x@4, x@4, x@4]\n            , [ Prelude.bvNat 64 14772873186050699377\n            , Prelude.bvNat 64 6749526151121446354\n            , Prelude.bvNat 64 6372666795664677781\n            , Prelude.bvNat 64 10283423008382700446\n            , Prelude.bvNat 64 286397964926079186\n            , Prelude.bvNat 64 1796971870900422465 ] ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant\n            [ [x@4, x@4, x@4, x@4, x@4, x@4]\n            , [ Prelude.bvNat 64 8505329371266088957\n            , Prelude.bvNat 64 17002214543764226050\n            , Prelude.bvNat 64 6865905132761471162\n            , Prelude.bvNat 64 8632934651105793861\n            , Prelude.bvNat 64 6631298214892334189\n            , Prelude.bvNat 64 1582556514881692819 ] ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.bvNat 64 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant\n            [ [x@4, x@4, x@4, x@4, x@4, x@4]\n            , [ Prelude.bvNat 64 9875771541238924739\n            , Prelude.bvNat 64 3094855109658912213\n            , Prelude.bvNat 64 5802897354862067244\n            , Prelude.bvNat 64 11677019699073781796\n            , Prelude.bvNat 64 1505592401347711080\n            , Prelude.bvNat 64 1505729768134575418 ] ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.natToInt 0\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = Prelude.reverse 3 x@5 cryptol:/Frobenius/w_frobenius_constant\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 506819140503852133\n            , Prelude.bvNat 64 14297063575771579155\n            , Prelude.bvNat 64 10946065744702939791\n            , Prelude.bvNat 64 11771194236670323182\n            , Prelude.bvNat 64 2081670087578406477\n            , Prelude.bvNat 64 644615147456521963 ]\n            , [ Prelude.bvNat 64 12895611875574011462\n            , Prelude.bvNat 64 6359822009455181036\n            , Prelude.bvNat 64 14936352902570693524\n            , Prelude.bvNat 64 13914887797453940944\n            , Prelude.bvNat 64 3330433690892295817\n            , Prelude.bvNat 64 1229183470191017903 ] ])\n         (Prelude.ite x@5 (Prelude.intLe x@4 x@4)\n            (Prelude.at 3 x@5 x@6 (Prelude.intToNat x@4))\n            (Prelude.at 3 x@5 x@6 0)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = [ Prelude.bvNat 64 12260768510540316659\n      , Prelude.bvNat 64 6038201419376623626\n      , Prelude.bvNat 64 5156596810353639551\n      , Prelude.bvNat 64 12813724723179037911\n      , Prelude.bvNat 64 10288881524157229871\n      , Prelude.bvNat 64 708830206584151678 ]\n      x@5 = cryptol:/Parameters/to_Fp (Cryptol.TCNum 4) (Prelude.bvNat 4 4)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs [x@4, x@4])\n         [x@5, x@5])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = [ Prelude.bvNat 64 12260768510540316659\n      , Prelude.bvNat 64 6038201419376623626\n      , Prelude.bvNat 64 5156596810353639551\n      , Prelude.bvNat 64 12813724723179037911\n      , Prelude.bvNat 64 10288881524157229871\n      , Prelude.bvNat 64 708830206584151678 ]\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs [x@4, x@4])\n         cryptol:/Parameters/b')",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = [ Prelude.bvNat 64 12260768510540316659\n      , Prelude.bvNat 64 6038201419376623626\n      , Prelude.bvNat 64 5156596810353639551\n      , Prelude.bvNat 64 12813724723179037911\n      , Prelude.bvNat 64 10288881524157229871\n      , Prelude.bvNat 64 708830206584151678 ]\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant [x@4, x@4])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = [ Prelude.bvNat 64 8921533702591418330\n      , Prelude.bvNat 64 15859389534032789116\n      , Prelude.bvNat 64 3389114680249073393\n      , Prelude.bvNat 64 15116930867080254631\n      , Prelude.bvNat 64 3288288975085550621\n      , Prelude.bvNat 64 1021049300055853010 ]\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs [x@4, x@4])\n         cryptol:/BLSFieldExtras/sqrt_fp2_c3)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 1730508156817200468\n            , Prelude.bvNat 64 9606178027640717313\n            , Prelude.bvNat 64 7150789853162776431\n            , Prelude.bvNat 64 7936136305760253186\n            , Prelude.bvNat 64 15245073033536294050\n            , Prelude.bvNat 64 1728177566264616342 ]\n            , [ Prelude.bvNat 64 11671922859260663127\n            , Prelude.bvNat 64 11050707557586042878\n            , Prelude.bvNat 64 284884720401305268\n            , Prelude.bvNat 64 17749945728364010941\n            , Prelude.bvNat 64 8613774818643959860\n            , Prelude.bvNat 64 145621051382923523 ] ])\n         cryptol:/Pairing/alpha)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 4480897313486445265\n            , Prelude.bvNat 64 4797496051193971075\n            , Prelude.bvNat 64 4046559893315008306\n            , Prelude.bvNat 64 10569151167044009496\n            , Prelude.bvNat 64 2123814803385151673\n            , Prelude.bvNat 64 852749317591686856 ]\n            , [ Prelude.bvNat 64 8921533702591418330\n            , Prelude.bvNat 64 15859389534032789116\n            , Prelude.bvNat 64 3389114680249073393\n            , Prelude.bvNat 64 15116930867080254631\n            , Prelude.bvNat 64 3288288975085550621\n            , Prelude.bvNat 64 1021049300055853010 ] ])\n         cryptol:/BLSFieldExtras/sqrt_fp2_c2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 4480897313486445265\n            , Prelude.bvNat 64 4797496051193971075\n            , Prelude.bvNat 64 4046559893315008306\n            , Prelude.bvNat 64 10569151167044009496\n            , Prelude.bvNat 64 2123814803385151673\n            , Prelude.bvNat 64 852749317591686856 ]\n            , [ Prelude.bvNat 64 8921533702591418330\n            , Prelude.bvNat 64 15859389534032789116\n            , Prelude.bvNat 64 3389114680249073393\n            , Prelude.bvNat 64 15116930867080254631\n            , Prelude.bvNat 64 3288288975085550621\n            , Prelude.bvNat 64 1021049300055853010 ] ])\n         cryptol:/G2SubGroupCheck/psi_c2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs\n            [ [ Prelude.bvNat 64 4480897313486445265\n            , Prelude.bvNat 64 4797496051193971075\n            , Prelude.bvNat 64 4046559893315008306\n            , Prelude.bvNat 64 10569151167044009496\n            , Prelude.bvNat 64 2123814803385151673\n            , Prelude.bvNat 64 852749317591686856 ]\n            , [ Prelude.bvNat 64 8921533702591418330\n            , Prelude.bvNat 64 15859389534032789116\n            , Prelude.bvNat 64 3389114680249073393\n            , Prelude.bvNat 64 15116930867080254631\n            , Prelude.bvNat 64 3288288975085550621\n            , Prelude.bvNat 64 1021049300055853010 ] ])\n         cryptol:/implementation/Fp12/w_frobenius_constant_3_part)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 6 x@3)\n         (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64))\n         (cryptol:/implementation/Field/fp_rep cryptol:/Parameters/Fp.2.2.1)\n         [ Prelude.bvNat 64 8505329371266088957\n         , Prelude.bvNat 64 17002214543764226050\n         , Prelude.bvNat 64 6865905132761471162\n         , Prelude.bvNat 64 8632934651105793861\n         , Prelude.bvNat 64 6631298214892334189\n         , Prelude.bvNat 64 1582556514881692819 ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 6 x@3)\n         (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64))\n         [ Prelude.bvNat 64 9180392817347875192\n         , Prelude.bvNat 64 12752300768841235045\n         , Prelude.bvNat 64 5424152106454515062\n         , Prelude.bvNat 64 3349150446948955809\n         , Prelude.bvNat 64 1614784533401171638\n         , Prelude.bvNat 64 42236840757897548 ]\n         (cryptol:/implementation/Field/fp_rep\n            (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.1\n               (cryptol:/HashToCurveE1/Z,cryptol:/HashToCurveE1/A'))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/CurveOperation/POINTonE1_invariant\n            ([ Prelude.bvNat 64 6679831729115696150\n             , Prelude.bvNat 64 8653662730902241269\n             , Prelude.bvNat 64 1535610680227111361\n             , Prelude.bvNat 64 17342916647841752903\n             , Prelude.bvNat 64 17135755455211762752\n             , Prelude.bvNat 64 1297449291367578485 ],\n             [ Prelude.bvNat 64 13451288730302620273\n             , Prelude.bvNat 64 10097742279870053774\n             , Prelude.bvNat 64 15949884091978425806\n             , Prelude.bvNat 64 5885175747529691540\n             , Prelude.bvNat 64 1016841820992199104\n             , Prelude.bvNat 64 845620083434234474 ],\n             [ Prelude.bvNat 64 8505329371266088957\n             , Prelude.bvNat 64 17002214543764226050\n             , Prelude.bvNat 64 6865905132761471162\n             , Prelude.bvNat 64 8632934651105793861\n             , Prelude.bvNat 64 6631298214892334189\n             , Prelude.bvNat 64 1582556514881692819 ]))\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant\n            [ [ Prelude.bvNat 64 1730508156817200468\n            , Prelude.bvNat 64 9606178027640717313\n            , Prelude.bvNat 64 7150789853162776431\n            , Prelude.bvNat 64 7936136305760253186\n            , Prelude.bvNat 64 15245073033536294050\n            , Prelude.bvNat 64 1728177566264616342 ]\n            , [ Prelude.bvNat 64 11671922859260663127\n            , Prelude.bvNat 64 11050707557586042878\n            , Prelude.bvNat 64 284884720401305268\n            , Prelude.bvNat 64 17749945728364010941\n            , Prelude.bvNat 64 8613774818643959860\n            , Prelude.bvNat 64 145621051382923523 ] ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant\n            [ [ Prelude.bvNat 64 4480897313486445265\n            , Prelude.bvNat 64 4797496051193971075\n            , Prelude.bvNat 64 4046559893315008306\n            , Prelude.bvNat 64 10569151167044009496\n            , Prelude.bvNat 64 2123814803385151673\n            , Prelude.bvNat 64 852749317591686856 ]\n            , [ Prelude.bvNat 64 8921533702591418330\n            , Prelude.bvNat 64 15859389534032789116\n            , Prelude.bvNat 64 3389114680249073393\n            , Prelude.bvNat 64 15116930867080254631\n            , Prelude.bvNat 64 3288288975085550621\n            , Prelude.bvNat 64 1021049300055853010 ] ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.Vec 64 Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2_invariant\n            [ [ Prelude.bvNat 64 506819140503852133\n            , Prelude.bvNat 64 14297063575771579155\n            , Prelude.bvNat 64 10946065744702939791\n            , Prelude.bvNat 64 11771194236670323182\n            , Prelude.bvNat 64 2081670087578406477\n            , Prelude.bvNat 64 644615147456521963 ]\n            , [ Prelude.bvNat 64 12895611875574011462\n            , Prelude.bvNat 64 6359822009455181036\n            , Prelude.bvNat 64 14936352902570693524\n            , Prelude.bvNat 64 13914887797453940944\n            , Prelude.bvNat 64 3330433690892295817\n            , Prelude.bvNat 64 1229183470191017903 ] ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.natToInt 0\n      x@4 = Prelude.reverse 2 Prelude.Integer\n              cryptol:/Frobenius/v_frobenius_constant_sq\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 9875771541238924739\n            , Prelude.bvNat 64 3094855109658912213\n            , Prelude.bvNat 64 5802897354862067244\n            , Prelude.bvNat 64 11677019699073781796\n            , Prelude.bvNat 64 1505592401347711080\n            , Prelude.bvNat 64 1505729768134575418 ])\n         (Prelude.ite Prelude.Integer (Prelude.intLe x@3 x@3)\n            (Prelude.at 2 Prelude.Integer x@4 (Prelude.intToNat x@3))\n            (Prelude.at 2 Prelude.Integer x@4 0)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.natToInt 0\n      x@4 = cryptol:/G2SubGroupCheck/psi_c1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 9875771541238924739\n            , Prelude.bvNat 64 3094855109658912213\n            , Prelude.bvNat 64 5802897354862067244\n            , Prelude.bvNat 64 11677019699073781796\n            , Prelude.bvNat 64 1505592401347711080\n            , Prelude.bvNat 64 1505729768134575418 ])\n         (Prelude.ite Prelude.Integer (Prelude.intLe x@3 x@3)\n            (Prelude.at 2 Prelude.Integer x@4 (Prelude.intToNat x@3))\n            (Prelude.at 2 Prelude.Integer x@4 0)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = Prelude.natToInt 0\n      x@4 = cryptol:/G2SubGroupCheck/psi_c2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 8921533702591418330\n            , Prelude.bvNat 64 15859389534032789116\n            , Prelude.bvNat 64 3389114680249073393\n            , Prelude.bvNat 64 15116930867080254631\n            , Prelude.bvNat 64 3288288975085550621\n            , Prelude.bvNat 64 1021049300055853010 ])\n         (Prelude.ite Prelude.Integer (Prelude.intLe x@3 x@3)\n            (Prelude.at 2 Prelude.Integer x@4 (Prelude.intToNat x@3))\n            (Prelude.at 2 Prelude.Integer x@4 0)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n      x@3 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n      x@4 = x@3.2\n      x@5 = cryptol:/HashToCurveE1/Z\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 4878930887265312543\n            , Prelude.bvNat 64 14750521259635781058\n            , Prelude.bvNat 64 8371497156570714123\n            , Prelude.bvNat 64 15793066378700994603\n            , Prelude.bvNat 64 16433423527091015560\n            , Prelude.bvNat 64 32548497384448767 ])\n         (cryptol:/BLSFieldExtras/sqrt_fp (x@4.1 (x@3.1 (x@4.2.2.1 x@5,x@5)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp_invariant\n            [ Prelude.bvNat 64 12260768510540316659\n            , Prelude.bvNat 64 6038201419376623626\n            , Prelude.bvNat 64 5156596810353639551\n            , Prelude.bvNat 64 12813724723179037911\n            , Prelude.bvNat 64 10288881524157229871\n            , Prelude.bvNat 64 708830206584151678 ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp_invariant\n            [ Prelude.bvNat 64 14772873186050699377\n            , Prelude.bvNat 64 6749526151121446354\n            , Prelude.bvNat 64 6372666795664677781\n            , Prelude.bvNat 64 10283423008382700446\n            , Prelude.bvNat 64 286397964926079186\n            , Prelude.bvNat 64 1796971870900422465 ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp_invariant\n            [ Prelude.bvNat 64 17644856173732828998\n            , Prelude.bvNat 64 754043588434789617\n            , Prelude.bvNat 64 10224657059481499349\n            , Prelude.bvNat 64 7488229067341005760\n            , Prelude.bvNat 64 11130996698012816685\n            , Prelude.bvNat 64 1267921511277847466 ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp_invariant\n            [ Prelude.bvNat 64 4897101644811774638\n            , Prelude.bvNat 64 3654671041462534141\n            , Prelude.bvNat 64 569769440802610537\n            , Prelude.bvNat 64 17053147383018470266\n            , Prelude.bvNat 64 17227549637287919721\n            , Prelude.bvNat 64 291242102765847046 ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp_invariant\n            [ Prelude.bvNat 64 8505329371266088957\n            , Prelude.bvNat 64 17002214543764226050\n            , Prelude.bvNat 64 6865905132761471162\n            , Prelude.bvNat 64 8632934651105793861\n            , Prelude.bvNat 64 6631298214892334189\n            , Prelude.bvNat 64 1582556514881692819 ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp_invariant\n            [ Prelude.bvNat 64 8921533702591418330\n            , Prelude.bvNat 64 15859389534032789116\n            , Prelude.bvNat 64 3389114680249073393\n            , Prelude.bvNat 64 15116930867080254631\n            , Prelude.bvNat 64 3288288975085550621\n            , Prelude.bvNat 64 1021049300055853010 ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp_invariant\n            [ Prelude.bvNat 64 9875771541238924739\n            , Prelude.bvNat 64 3094855109658912213\n            , Prelude.bvNat 64 5802897354862067244\n            , Prelude.bvNat 64 11677019699073781796\n            , Prelude.bvNat 64 1505592401347711080\n            , Prelude.bvNat 64 1505729768134575418 ])\n         Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 12260768510540316659\n            , Prelude.bvNat 64 6038201419376623626\n            , Prelude.bvNat 64 5156596810353639551\n            , Prelude.bvNat 64 12813724723179037911\n            , Prelude.bvNat 64 10288881524157229871\n            , Prelude.bvNat 64 708830206584151678 ])\n         (cryptol:/Parameters/to_Fp (Cryptol.TCNum 4) (Prelude.bvNat 4 4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 12260768510540316659\n            , Prelude.bvNat 64 6038201419376623626\n            , Prelude.bvNat 64 5156596810353639551\n            , Prelude.bvNat 64 12813724723179037911\n            , Prelude.bvNat 64 10288881524157229871\n            , Prelude.bvNat 64 708830206584151678 ])\n         cryptol:/Parameters/b)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 17644856173732828998\n            , Prelude.bvNat 64 754043588434789617\n            , Prelude.bvNat 64 10224657059481499349\n            , Prelude.bvNat 64 7488229067341005760\n            , Prelude.bvNat 64 11130996698012816685\n            , Prelude.bvNat 64 1267921511277847466 ])\n         cryptol:/implementation/Field/montgomery_factor_p)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 18129637713272545760\n            , Prelude.bvNat 64 11144507692959411567\n            , Prelude.bvNat 64 10108153527111632324\n            , Prelude.bvNat 64 9745270364868568433\n            , Prelude.bvNat 64 14587922135379007624\n            , Prelude.bvNat 64 469008097655535723 ])\n         cryptol:/HashToCurveE1/B')",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 3415322872136444497\n            , Prelude.bvNat 64 9675504606121301699\n            , Prelude.bvNat 64 13284745414851768802\n            , Prelude.bvNat 64 2873609449387478652\n            , Prelude.bvNat 64 2897906769629812789\n            , Prelude.bvNat 64 1536947672689614213 ])\n         cryptol:/HashToCurveE1/A')",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 8505329371266088957\n            , Prelude.bvNat 64 17002214543764226050\n            , Prelude.bvNat 64 6865905132761471162\n            , Prelude.bvNat 64 8632934651105793861\n            , Prelude.bvNat 64 6631298214892334189\n            , Prelude.bvNat 64 1582556514881692819 ])\n         cryptol:/Parameters/Fp.2.2.1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 9830232086645309404\n            , Prelude.bvNat 64 1112389714365644829\n            , Prelude.bvNat 64 8603885298299447491\n            , Prelude.bvNat 64 11361495444721768256\n            , Prelude.bvNat 64 5788602283869803809\n            , Prelude.bvNat 64 543934104870762216 ])\n         cryptol:/HashToCurveE1/Z)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = (n : Prelude.Nat)\n      -> Prelude.Nat\n      -> Prelude.Vec n Prelude.Bool\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/implementation/Field/fp_abs\n            [ Prelude.bvNat 64 9987108143941419098\n            , Prelude.bvNat 64 10981380979105458492\n            , Prelude.bvNat 64 12597673232421864513\n            , Prelude.bvNat 64 4365728511027233858\n            , Prelude.bvNat 64 2514197008840889506\n            , Prelude.bvNat 64 336850944957925653 ])\n         (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.1 cryptol:/HashToCurveE1/A'))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.PIntegralInteger\n      x@4 = Cryptol.PLiteralInteger\n      x@5 = Prelude.Vec 8 Prelude.Bool\n      x@6 = Prelude.Integer * Prelude.Integer\n    }\n in (s : Prelude.Vec 48 x@5)\n-> Prelude.EqTrue\n     (cryptol:/Cryptol/%5c%2f\n        (Cryptol.ecAt (Cryptol.TCNum 8) Prelude.Bool Prelude.Integer x@3\n           (Cryptol.ecAt (Cryptol.TCNum 48) x@5 Prelude.Integer x@3 s\n              (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@4))\n           (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@4))\n        (cryptol:/Maybe/maybe_cases x@6 Prelude.Bool\n           (cryptol:/implementation/serialization/uncompress_E1_imp s)\n           Prelude.True\n           (\\(p : x@6) ->\n              Cryptol.ecEq x@6\n                (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n                p\n                (cryptol:/implementation/serialization/uncompress_E1_OK s))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PEqInteger\n      x@3 = Cryptol.PZeroInteger\n      x@4 = Prelude.Integer * Prelude.Integer\n      x@5 = Prelude.Bool * x@4\n      x@6 = cryptol:/Maybe/nothing x@4 (x@3,x@3)\n      x@7 = Cryptol.PEqPair Prelude.Bool x@4 Cryptol.PEqBit\n              (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n    }\n in (s : Prelude.Vec 48 (Prelude.Vec 8 Prelude.Bool))\n-> Prelude.EqTrue\n     (cryptol:/Cryptol/==%3e\n        (Cryptol.ecEq x@5 x@7 (cryptol:/Serialization/uncompress_E1 s) x@6)\n        (Cryptol.ecEq x@5 x@7\n           (cryptol:/implementation/serialization/uncompress_E1_imp s)\n           x@6))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PEqInteger\n      x@3 = Prelude.Vec 8 Prelude.Bool\n      x@4 = Cryptol.TCNum 8\n      x@5 = Cryptol.TCNum 32\n    }\n in (msg : Prelude.Vec 32 x@3)\n-> (dst : Prelude.Vec 8 x@3)\n-> let { x@6 = (msg,dst)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Integer * Prelude.Integer)\n         (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n         (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer\n            cryptol:/Parameters/E\n            (cryptol:/Main/hash_to_curve_opt_impl x@5 x@4 x@6))\n         (cryptol:/HashToCurveE1/hash_to_curve_opt x@5 x@4 x@6))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PEqInteger\n      x@3 = cryptol:/Parameters/E\n      x@4 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p : (x@4 * x@4 * x@4))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Integer * Prelude.Integer)\n        (Cryptol.PEqPair Prelude.Integer Prelude.Integer x@2 x@2)\n        (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n           (cryptol:/implementation/CurveOperation/POINTonE1_abs\n              (llvm:/POINTonE1_times_c p)))\n        (cryptol:e1_scalar_mult#6740 cryptol:zz_minus_1_div_by_3#6816\n           (cryptol:/ShortWeierstrassCurve/affinify Prelude.Integer x@3\n              (cryptol:/implementation/CurveOperation/POINTonE1_abs p))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 2\n      x@5 = Cryptol.TCNum 3\n      x@6 = Prelude.Vec 2 Prelude.Integer\n      x@7 = Prelude.Vec 3 x@6\n      x@8 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n      x@9 = cryptol:/implementation/Fp12/w_frobenius_constant_2_part\n    }\n in (x : x@7)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqSeq x@5 x@6\n           (Cryptol.PEqSeq x@4 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1\n           (cryptol:/Parameters/Fp_2_to_Fp_6 x@9,x))\n        [ x@8.1\n            (Cryptol.ecAt x@5 x@6 Prelude.Integer x@2 x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@3),\n             x@9)\n        , x@8.1\n            (Cryptol.ecAt x@5 x@6 Prelude.Integer x@2 x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@3),\n             x@9)\n        , x@8.1\n            (Cryptol.ecAt x@5 x@6 Prelude.Integer x@2 x\n               (Cryptol.ecNumber x@4 Prelude.Integer x@3),\n             x@9) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 2\n      x@5 = Cryptol.TCNum 3\n      x@6 = Prelude.Vec 2 Prelude.Integer\n      x@7 = Prelude.Vec 3 x@6\n      x@8 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n      x@9 = cryptol:/implementation/Fp12/w_frobenius_constant_3_part\n    }\n in (x : x@7)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqSeq x@5 x@6\n           (Cryptol.PEqSeq x@4 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1\n           (cryptol:/Parameters/Fp_2_to_Fp_6 x@9,x))\n        [ x@8.1\n            (Cryptol.ecAt x@5 x@6 Prelude.Integer x@2 x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@3),\n             x@9)\n        , x@8.1\n            (Cryptol.ecAt x@5 x@6 Prelude.Integer x@2 x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@3),\n             x@9)\n        , x@8.1\n            (Cryptol.ecAt x@5 x@6 Prelude.Integer x@2 x\n               (Cryptol.ecNumber x@4 Prelude.Integer x@3),\n             x@9) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.TCNum 2\n      x@5 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : Prelude.Vec 2 x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp2_invariant x)\n        (cryptol:/Cryptol/%2f%5c\n           (cryptol:/implementation/Field/fp_invariant\n              (Cryptol.ecAt x@4 x@5 Prelude.Integer x@2 x\n                 (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@3)))\n           (cryptol:/implementation/Field/fp_invariant\n              (Cryptol.ecAt x@4 x@5 Prelude.Integer x@2 x\n                 (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@3)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@3\n      x@5 = Cryptol.TCNum 2\n      x@6 = Cryptol.TCNum 3\n      x@7 = Prelude.Vec 2 Prelude.Integer\n      x@8 = Prelude.Vec 3 x@7\n      x@9 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n      x@10 = cryptol:/Frobenius/w_frobenius_constant\n      x@11 = Cryptol.ecAtBack x@6 x@7 Prelude.Integer x@2 x@10 x@4\n    }\n in (x : x@8)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@8\n        (Cryptol.PEqSeq x@6 x@7\n           (Cryptol.PEqSeq x@5 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1 (x@10,x))\n        [ x@9.1 (Cryptol.ecAt x@6 x@7 Prelude.Integer x@2 x x@4,x@11)\n        , x@9.1\n            (Cryptol.ecAt x@6 x@7 Prelude.Integer x@2 x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@3),\n             x@11)\n        , x@9.1\n            (Cryptol.ecAt x@6 x@7 Prelude.Integer x@2 x\n               (Cryptol.ecNumber x@5 Prelude.Integer x@3),\n             x@11) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@3\n      x@5 = Cryptol.TCNum 2\n      x@6 = Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@3\n      x@7 = Prelude.Vec 2 Prelude.Integer\n      x@8 = cryptol:/Parameters/Fp_2\n      x@9 = Prelude.Vec 2 x@7\n    }\n in (x : x@9)\n-> (y : x@9)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@9\n        (Cryptol.PEqSeq x@5 x@7\n           (Cryptol.PEqSeq x@5 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:/implementation/Fp12/Fp_4.1 (x,y))\n        [ x@8.1\n            (Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 x x@4,\n             Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 y x@4)\n        , x@8.1\n            (Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 x x@6,\n             Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 y x@6) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@3\n      x@5 = Cryptol.TCNum 2\n      x@6 = Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@3\n      x@7 = Prelude.Vec 2 Prelude.Integer\n      x@8 = cryptol:/Parameters/Fp_2\n      x@9 = x@8.2.2.2.2.2.2.2\n      x@10 = Prelude.Vec 2 x@7\n    }\n in (x : x@10)\n-> (y : x@10)\n-> let { x@11 = Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 x x@4\n         x@12 = Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 y x@6\n         x@13 = Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 x x@6\n         x@14 = Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 y x@4\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@10\n         (Cryptol.PEqSeq x@5 x@7\n            (Cryptol.PEqSeq x@5 Prelude.Integer Cryptol.PEqInteger))\n         (cryptol:/implementation/Fp12/Fp_4.2.2.2.2.2.2.2.1 (x,y))\n         [ x@8.1 (x@9.1 (x@11,x@12),x@9.1 (x@13,x@14))\n         , x@8.1\n             (x@9.1 (cryptol:/Parameters/u_plus_1,x@9.1 (x@11,x@14)),\n              x@9.1 (x@13,x@12)) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@3\n      x@5 = Cryptol.TCNum 2\n      x@6 = Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@3\n      x@7 = Prelude.Vec 2 Prelude.Integer\n      x@8 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.2\n      x@9 = Prelude.Vec 2 x@7\n    }\n in (x : x@9)\n-> (y : x@9)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@9\n        (Cryptol.PEqSeq x@5 x@7\n           (Cryptol.PEqSeq x@5 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:/implementation/Fp12/Fp_4.2.2.2.2.2.2.2.2.2.2.2 (x,y))\n        [ x@8.2\n            (Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 x x@4,\n             Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 y x@4)\n        , x@8.2\n            (Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 x x@6,\n             Cryptol.ecAt x@5 x@7 Prelude.Integer x@2 y x@6) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.PIntegralInteger\n      x@3 = Cryptol.PLiteralInteger\n      x@4 = Prelude.Vec 8 Prelude.Bool\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (s : Prelude.Vec 96 x@4)\n-> Prelude.EqTrue\n     (cryptol:/Cryptol/%5c%2f\n        (Cryptol.ecAt (Cryptol.TCNum 8) Prelude.Bool Prelude.Integer x@2\n           (Cryptol.ecAt (Cryptol.TCNum 96) x@4 Prelude.Integer x@2 s\n              (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@3))\n           (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@3))\n        (cryptol:/Maybe/maybe_cases x@6 Prelude.Bool\n           (cryptol:/implementation/SerializationP2/uncompress_E2_imp s)\n           Prelude.True\n           (\\(p : x@6) ->\n              Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7) p\n                (cryptol:/implementation/SerializationP2/uncompress_E2_OK s))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 0\n      x@3 = Cryptol.TCNum 1\n      x@4 = Cryptol.TCNum 4\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@3 x@4) (Cryptol.TCNum 5)\n      x@9 = Cryptol.tcAdd x@3 x@2\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@10 = cryptol:/ShortWeierstrassCurve/affinify x@5\n                  cryptol:/Parameters/E'\n                  p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@2\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@9 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@9 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@9))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e2_order#6883 x@10))\n            x@10)\n         (cryptol:mult_w5_result_term#6926 x@4 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 0\n      x@3 = Cryptol.TCNum 1\n      x@4 = Cryptol.TCNum 4\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@3 x@4) (Cryptol.TCNum 5)\n      x@9 = Cryptol.tcAdd x@3 x@2\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@10 = cryptol:affinify_E'#6889 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:mult_w5_result_term#6926 x@4 e p)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@2\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@9 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@9 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@9))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e2_order#6883 x@10))\n            x@10))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 0\n      x@3 = Cryptol.TCNum 1\n      x@4 = Cryptol.TCNum 4\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@3 x@4) (Cryptol.TCNum 5)\n      x@9 = Cryptol.tcAdd x@3 x@2\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> (p1 : x@6)\n-> let { x@10 = cryptol:booth#6713 x@4 e\n         x@11 = cryptol:e2_order#6883 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884 x@10 p1)\n         (Prelude.ite x@6\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@11\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@4 e)\n                  cryptol:shift#6702))\n            (cryptol:e2_scalar_mult#6884\n               (cryptol:booth_with_add'#6937 x@2\n                  (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                     (Cryptol.seq x@9 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@8 x@9 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@8 x@9))\n                     (cryptol:booth_parts#6712 x@4 e))\n                  x@11)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@6\n                -> x@6)\n               cryptol:e2_scalar_mult#6884\n               x@10\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 0\n      x@3 = Prelude.Vec 8 Prelude.Bool\n      x@4 = Cryptol.TCNum 16\n      x@5 = Prelude.Vec 256 Prelude.Bool\n    }\n in (salt : x@5)\n-> (IKM : Prelude.Vec 16 x@3)\n-> (info : Prelude.Vec 0 x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/KeyGen/KeyGenStep x@4 x@2 salt IKM info)\n        (cryptol:/Main/vec256_abs\n           (cryptol:/Main/KeyGenStep_rep x@4 x@2 salt IKM info)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 0\n      x@3 = Prelude.Vec 8 Prelude.Bool\n      x@4 = Cryptol.TCNum 16\n    }\n in (IKM : Prelude.Vec 16 x@3)\n-> (info : Prelude.Vec 0 x@3)\n-> let { x@5 = (IKM,info)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool)\n         (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n         (cryptol:/Main/pow256_abs (cryptol:/Main/KeyGen_rep x@4 x@2 x@5))\n         (cryptol:/KeyGen/KeyGen x@4 x@2 x@5))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 0\n      x@3 = Prelude.Vec 8 Prelude.Bool\n      x@4 = Cryptol.TCNum 32\n      x@5 = Prelude.Vec 256 Prelude.Bool\n    }\n in (salt : x@5)\n-> (IKM : Prelude.Vec 32 x@3)\n-> (info : Prelude.Vec 0 x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/KeyGen/KeyGenStep x@4 x@2 salt IKM info)\n        (cryptol:/Main/vec256_abs\n           (cryptol:/Main/KeyGenStep_rep x@4 x@2 salt IKM info)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 0\n      x@3 = Prelude.Vec 8 Prelude.Bool\n      x@4 = Cryptol.TCNum 32\n    }\n in (IKM : Prelude.Vec 32 x@3)\n-> (info : Prelude.Vec 0 x@3)\n-> let { x@5 = (IKM,info)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool)\n         (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n         (cryptol:/Main/pow256_abs (cryptol:/Main/KeyGen_rep x@4 x@2 x@5))\n         (cryptol:/KeyGen/KeyGen x@4 x@2 x@5))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 100\n      x@4 = Cryptol.TCNum 20\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) (Cryptol.TCNum 5)\n      x@9 = Cryptol.tcAdd x@2 x@4\n    }\n in (e : Prelude.Vec 100 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@10 = cryptol:affinify_E'#6889 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:mult_w5_result_term#6926 x@3 e p)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@4\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@9 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@9 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@9))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e2_order#6883 x@10))\n            x@10))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 16\n      x@4 = Cryptol.TCNum 15\n      x@5 = Cryptol.tcAdd x@2 x@4\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@4 e)\n        (cryptol:plain#6701 x@3\n           (Prelude.coerce (Cryptol.seq x@5 Prelude.Bool)\n              (Prelude.Vec 16 Prelude.Bool)\n              (Cryptol.seq_cong1 x@5 x@3 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@5 x@3))\n              (Cryptol.ecCat x@2 x@4 Prelude.Bool [Prelude.False] e))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 18\n      x@4 = Cryptol.TCNum 17\n      x@5 = Cryptol.tcAdd x@2 x@4\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@4 e)\n        (cryptol:plain#6701 x@3\n           (Prelude.coerce (Cryptol.seq x@5 Prelude.Bool)\n              (Prelude.Vec 18 Prelude.Bool)\n              (Cryptol.seq_cong1 x@5 x@3 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@5 x@3))\n              (Cryptol.ecCat x@2 x@4 Prelude.Bool [Prelude.False] e))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 2\n      x@4 = Cryptol.TCNum 12\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq x@3 Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n      x@9 = Cryptol.tcAdd x@2 x@3\n    }\n in (e : Prelude.Vec 12 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@10 = cryptol:affinify_E'#6889 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:mult_w5_result_term#6926 x@4 e p)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@3\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@9 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@9 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@9))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e2_order#6883 x@10))\n            x@10))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 2\n      x@4 = Cryptol.TCNum 14\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq x@3 Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcAdd x@2 x@3\n      x@9 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 14 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@10 = cryptol:affinify_E'#6889 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:mult_w5_result_term#6926 x@4 e p)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@3\n               (Prelude.coerce (Cryptol.seq x@9 Prelude.Integer)\n                  (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@9 x@8 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@9 x@8))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e2_order#6883 x@10))\n            x@10))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 25\n      x@4 = Cryptol.TCNum 26\n      x@5 = Cryptol.tcAdd x@2 x@3\n    }\n in (e : Prelude.Vec 25 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@3 e)\n        (cryptol:plain#6701 x@4\n           (Prelude.coerce (Cryptol.seq x@5 Prelude.Bool)\n              (Prelude.Vec 26 Prelude.Bool)\n              (Cryptol.seq_cong1 x@5 x@4 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@5 x@4))\n              (Cryptol.ecCat x@2 x@3 Prelude.Bool [Prelude.False] e))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 15\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n      x@9 = Cryptol.tcAdd x@2 x@3\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@10 = cryptol:/ShortWeierstrassCurve/affinify x@5\n                  cryptol:/Parameters/E'\n                  p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@3\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@9 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@9 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@9))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e2_order#6883 x@10))\n            x@10)\n         (cryptol:mult_w5_result_term#6926 x@4 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 15\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n      x@9 = Cryptol.tcAdd x@2 x@3\n    }\n in (e : Prelude.Vec 15 Prelude.Bool)\n-> (p1 : x@6)\n-> let { x@10 = cryptol:booth#6713 x@4 e\n         x@11 = cryptol:e2_order#6883 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884 x@10 p1)\n         (Prelude.ite x@6\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@11\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@4 e)\n                  cryptol:shift#6702))\n            (cryptol:e2_scalar_mult#6884\n               (cryptol:booth_with_add'#6937 x@3\n                  (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                     (Cryptol.seq x@9 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@8 x@9 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@8 x@9))\n                     (cryptol:booth_parts#6712 x@4 e))\n                  x@11)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@6\n                -> x@6)\n               cryptol:e2_scalar_mult#6884\n               x@10\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 17\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcAdd x@2 x@3\n      x@9 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@10 = cryptol:/ShortWeierstrassCurve/affinify x@5\n                  cryptol:/Parameters/E'\n                  p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@3\n               (Prelude.coerce (Cryptol.seq x@9 Prelude.Integer)\n                  (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@9 x@8 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@9 x@8))\n                  (cryptol:booth_parts#6712 x@4 e))\n               (cryptol:e2_order#6883 x@10))\n            x@10)\n         (cryptol:mult_w5_result_term#6926 x@4 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 3\n      x@4 = Cryptol.TCNum 17\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcAdd x@2 x@3\n      x@9 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@4) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 17 Prelude.Bool)\n-> (p1 : x@6)\n-> let { x@10 = cryptol:booth#6713 x@4 e\n         x@11 = cryptol:e2_order#6883 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884 x@10 p1)\n         (Prelude.ite x@6\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@11\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@4 e)\n                  cryptol:shift#6702))\n            (cryptol:e2_scalar_mult#6884\n               (cryptol:booth_with_add'#6937 x@3\n                  (Prelude.coerce (Cryptol.seq x@9 Prelude.Integer)\n                     (Cryptol.seq x@8 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@9 x@8 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@9 x@8))\n                     (cryptol:booth_parts#6712 x@4 e))\n                  x@11)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@6\n                -> x@6)\n               cryptol:e2_scalar_mult#6884\n               x@10\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 32\n      x@4 = Cryptol.TCNum 31\n      x@5 = Cryptol.tcAdd x@2 x@4\n    }\n in (e : Prelude.Vec 31 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@4 e)\n        (cryptol:plain#6701 x@3\n           (Prelude.coerce (Cryptol.seq x@5 Prelude.Bool)\n              (Prelude.Vec 32 Prelude.Bool)\n              (Cryptol.seq_cong1 x@5 x@3 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@5 x@3))\n              (Cryptol.ecCat x@2 x@4 Prelude.Bool [Prelude.False] e))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 39\n      x@4 = Cryptol.TCNum 40\n      x@5 = Cryptol.tcAdd x@2 x@3\n    }\n in (e : Prelude.Vec 39 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@3 e)\n        (cryptol:plain#6701 x@4\n           (Prelude.coerce (Cryptol.seq x@5 Prelude.Bool)\n              (Prelude.Vec 40 Prelude.Bool)\n              (Cryptol.seq_cong1 x@5 x@4 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@5 x@4))\n              (Cryptol.ecCat x@2 x@3 Prelude.Bool [Prelude.False] e))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.TCNum 4\n      x@5 = Cryptol.tcAdd x@2 x@4\n    }\n in (e : Prelude.Vec 4 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@4 e)\n        (cryptol:plain#6701 x@3\n           (Prelude.coerce (Cryptol.seq x@5 Prelude.Bool)\n              (Prelude.Vec 5 Prelude.Bool)\n              (Cryptol.seq_cong1 x@5 x@3 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@5 x@3))\n              (Cryptol.ecCat x@2 x@4 Prelude.Bool [Prelude.False] e))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcAdd x@2 x@2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) x@3\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@9 = cryptol:/ShortWeierstrassCurve/affinify x@5\n                 cryptol:/Parameters/E'\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@2\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e2_order#6883 x@9))\n            x@9)\n         (cryptol:mult_w5_result_term#6926 x@3 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcAdd x@2 x@2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) x@3\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@9 = cryptol:affinify_E'#6889 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:mult_w5_result_term#6926 x@3 e p)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@2\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e2_order#6883 x@9))\n            x@9))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 5\n      x@4 = Cryptol.tcAdd x@2 x@2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) x@3\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> (p1 : x@6)\n-> let { x@9 = cryptol:booth#6713 x@3 e\n         x@10 = cryptol:e2_order#6883 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884 x@9 p1)\n         (Prelude.ite x@6\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@10\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@3 e)\n                  cryptol:shift#6702))\n            (cryptol:e2_scalar_mult#6884\n               (cryptol:booth_with_add'#6937 x@2\n                  (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                     (Cryptol.seq x@4 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@8 x@4 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@8 x@4))\n                     (cryptol:booth_parts#6712 x@3 e))\n                  x@10)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@6\n                -> x@6)\n               cryptol:e2_scalar_mult#6884\n               x@9\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.TCNum 5\n      x@5 = Cryptol.tcAdd x@2 x@4\n    }\n in (e : Prelude.Vec 5 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@4 e)\n        (cryptol:plain#6701 x@3\n           (Prelude.coerce (Cryptol.seq x@5 Prelude.Bool)\n              (Prelude.Vec 6 Prelude.Bool)\n              (Cryptol.seq_cong1 x@5 x@3 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@5 x@3))\n              (Cryptol.ecCat x@2 x@4 Prelude.Bool [Prelude.False] e))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.TCNum 7\n      x@5 = Cryptol.tcAdd x@2 x@3\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@3 e)\n        (cryptol:plain#6701 x@4\n           (Prelude.coerce (Cryptol.seq x@5 Prelude.Bool)\n              (Prelude.Vec 7 Prelude.Bool)\n              (Cryptol.seq_cong1 x@5 x@4 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@5 x@4))\n              (Cryptol.ecCat x@2 x@3 Prelude.Bool [Prelude.False] e))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.tcAdd x@2 x@2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@9 = cryptol:/ShortWeierstrassCurve/affinify x@5\n                 cryptol:/Parameters/E'\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@2\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e2_order#6883 x@9))\n            x@9)\n         (cryptol:mult_w5_result_term#6926 x@3 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.tcAdd x@2 x@2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@9 = cryptol:affinify_E'#6889 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:mult_w5_result_term#6926 x@3 e p)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@2\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e2_order#6883 x@9))\n            x@9))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 6\n      x@4 = Cryptol.tcAdd x@2 x@2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 6 Prelude.Bool)\n-> (p1 : x@6)\n-> let { x@9 = cryptol:booth#6713 x@3 e\n         x@10 = cryptol:e2_order#6883 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884 x@9 p1)\n         (Prelude.ite x@6\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@10\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@3 e)\n                  cryptol:shift#6702))\n            (cryptol:e2_scalar_mult#6884\n               (cryptol:booth_with_add'#6937 x@2\n                  (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                     (Cryptol.seq x@4 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@8 x@4 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@8 x@4))\n                     (cryptol:booth_parts#6712 x@3 e))\n                  x@10)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@6\n                -> x@6)\n               cryptol:e2_scalar_mult#6884\n               x@9\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 64\n      x@4 = Cryptol.TCNum 12\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcAdd x@2 x@4\n      x@9 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 64 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@10 = cryptol:affinify_E'#6889 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:mult_w5_result_term#6926 x@3 e p)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@4\n               (Prelude.coerce (Cryptol.seq x@9 Prelude.Integer)\n                  (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@9 x@8 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@9 x@8))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e2_order#6883 x@10))\n            x@10))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 7\n      x@4 = Cryptol.tcAdd x@2 x@2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 7 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@9 = cryptol:affinify_E'#6889 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:mult_w5_result_term#6926 x@3 e p)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@2\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e2_order#6883 x@9))\n            x@9))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 9\n      x@4 = Cryptol.TCNum 10\n      x@5 = Cryptol.tcAdd x@2 x@3\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toInt#6695 x@3 e)\n        (cryptol:plain#6701 x@4\n           (Prelude.coerce (Cryptol.seq x@5 Prelude.Bool)\n              (Prelude.Vec 10 Prelude.Bool)\n              (Cryptol.seq_cong1 x@5 x@4 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@5 x@4))\n              (Cryptol.ecCat x@2 x@3 Prelude.Bool [Prelude.False] e))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 9\n      x@4 = Cryptol.tcAdd x@2 x@2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> (p : (x@5 * x@6))\n-> let { x@9 = cryptol:/ShortWeierstrassCurve/affinify x@5\n                 cryptol:/Parameters/E'\n                 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884\n            (cryptol:booth_with_add'#6937 x@2\n               (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                  (Cryptol.seq x@4 Prelude.Integer)\n                  (Cryptol.seq_cong1 x@8 x@4 Prelude.Integer\n                     (Prelude.unsafeAssert Cryptol.Num x@8 x@4))\n                  (cryptol:booth_parts#6712 x@3 e))\n               (cryptol:e2_order#6883 x@9))\n            x@9)\n         (cryptol:mult_w5_result_term#6926 x@3 e p))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 1\n      x@3 = Cryptol.TCNum 9\n      x@4 = Cryptol.tcAdd x@2 x@2\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = x@5 * x@5\n      x@7 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@8 = Cryptol.tcCeilDiv (Cryptol.tcAdd x@2 x@3) (Cryptol.TCNum 5)\n    }\n in (e : Prelude.Vec 9 Prelude.Bool)\n-> (p1 : x@6)\n-> let { x@9 = cryptol:booth#6713 x@3 e\n         x@10 = cryptol:e2_order#6883 p1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6 (Cryptol.PEqPair x@5 x@5 x@7 x@7)\n         (cryptol:e2_scalar_mult#6884 x@9 p1)\n         (Prelude.ite x@6\n            (Cryptol.ecGt Prelude.Integer Cryptol.PCmpInteger x@10\n               (Cryptol.ecPlus Prelude.Integer Cryptol.PRingInteger\n                  (cryptol:toInt#6695 x@3 e)\n                  cryptol:shift#6702))\n            (cryptol:e2_scalar_mult#6884\n               (cryptol:booth_with_add'#6937 x@2\n                  (Prelude.coerce (Cryptol.seq x@8 Prelude.Integer)\n                     (Cryptol.seq x@4 Prelude.Integer)\n                     (Cryptol.seq_cong1 x@8 x@4 Prelude.Integer\n                        (Prelude.unsafeAssert Cryptol.Num x@8 x@4))\n                     (cryptol:booth_parts#6712 x@3 e))\n                  x@10)\n               p1)\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               (x@6\n                -> x@6)\n               cryptol:e2_scalar_mult#6884\n               x@9\n               p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 2 x@3\n    }\n in (x : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq x@2 x@3\n           (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:redc_mont_fp4#7895 x)\n        (cryptol:/implementation/CryptolHelpers/apply x@4 x@4\n           cryptol:redc_mont_fp4#7895\n           (cryptol:fp4_reduce_mod_p#7903 x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2\n              (Prelude.Vec 3\n                 (Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))))\n      x@6 = cryptol:/Parameters/Fp_12.2.2.2.2.2.2.2\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@4)\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:redc_mont_fp12#7863\n           (x@6.1 (cryptol:fp12_abs_nom#7846 x,cryptol:fp12_abs_nom#7846 y)))\n        (cryptol:toM_12#7878\n           (x@6.1\n              (cryptol:/implementation/Field/fp12_abs x,\n               cryptol:/implementation/Field/fp12_abs y))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (a : x@5)\n-> (xyz : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:fp12_reduce_mod_p#7891\n           (cryptol:/implementation/Fp12/mul_by_xy00z0_fp12 a xyz))\n        (cryptol:/Parameters/Fp_12.2.2.2.2.2.2.2.1\n           (a,cryptol:/implementation/Fp12/fp6_to_fp12_xy00z0 xyz)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (a : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:inverse_fp12'#7919 a)\n        (cryptol:/implementation/Fp12/inverse_fp12_imp a))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> let { x@6 = cryptol:/implementation/Fp12/fp12_mul x y\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqSeq x@2 x@4\n            (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n               (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n         (cryptol:/Parameters/Fp_12.2.2.2.2.2.2.2.1 (x,y))\n         [ cryptol:fp6_reduce_mod_p#7882 (Cryptol.eListSel x@4 x@2 x@6 0)\n         , cryptol:fp6_reduce_mod_p#7882 (Cryptol.eListSel x@4 x@2 x@6 1) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> let { x@6 = cryptol:/implementation/Fp12/fp12_mul x y\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@5\n         (Cryptol.PEqSeq x@2 x@4\n            (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n               (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n         [ cryptol:fp6_reduce_mod_p#7882 (Cryptol.eListSel x@4 x@2 x@6 0)\n         , cryptol:fp6_reduce_mod_p#7882 (Cryptol.eListSel x@4 x@2 x@6 1) ]\n         (cryptol:/Parameters/Fp_12.2.2.2.2.2.2.2.1 (x,y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:/Frobenius/fp12_frobenius\n           (cryptol:/Frobenius/fp12_frobenius\n              (cryptol:/Frobenius/fp12_frobenius x)))\n        (cryptol:/implementation/Fp12/fp12_frobenius3 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:/Frobenius/fp12_frobenius\n           (cryptol:/Frobenius/fp12_frobenius x))\n        (cryptol:/implementation/Fp12/fp12_frobenius2 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:/Parameters/Fp_12.2.2.2.2.2.2.2.2.2.2.1 x)\n        (cryptol:/implementation/Fp12/fp12_sqr x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:/implementation/Field/fp12_abs\n           (cryptol:/implementation/Field/fp12_rep x))\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:/implementation/Fp12/cyclotomic_sqr_fp12 x)\n        (cryptol:/implementation/Fp12/cyclotomic_sqr_fp12_imp x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:redc_mont_fp12#7863 x)\n        (cryptol:/implementation/CryptolHelpers/apply x@5 x@5\n           cryptol:redc_mont_fp12#7863\n           (cryptol:fp12_reduce_mod_p#7891 x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x' : x@5)\n-> (y' : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:redc_mont_fp12#7863\n           (cryptol:/Parameters/Fp_12.2.2.2.2.2.2.2.1 (x',y')))\n        (cryptol:redc_mont_fp12#7863\n           (cryptol:/implementation/Fp12/fp12_mul x' y')))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n    }\n in (x\n       : Prelude.Vec 2\n           (Prelude.Vec 3\n              (Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@4)\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:redc_mont_fp12#7863 (cryptol:fp12_abs_nom#7846 x))\n        (cryptol:/implementation/Field/fp12_abs x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n    }\n in (xyz\n       : Prelude.Vec 3\n           (Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@4)\n        (Cryptol.PEqSeq x@2 x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@3\n              (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger)))\n        (cryptol:/implementation/Fp12/fp6_to_fp12_xy00z0\n           (cryptol:fp6_abs_nom#7830 xyz))\n        (cryptol:fp12_abs_nom#7846\n           (cryptol:/implementation/Fp12/xy00z0_expander xyz)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = cryptol:/implementation/Fp12/Fp_4.2.2.2.2.2.2.2.2.2.2\n    }\n in (x\n       : Prelude.Vec 2\n           (Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@3)\n        (Cryptol.PEqSeq x@2 x@3\n           (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:toM_4#7907 (x@4.1 (cryptol:/implementation/Fp12/fp4_abs x)))\n        (cryptol:redc_mont_fp4#7895 (x@4.1 (cryptol:fp4_abs_nom#7911 x))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = x@3 * x@3\n      x@5 = Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger\n      x@6 = Cryptol.PZeroSeq x@2 Prelude.Integer Cryptol.PZeroInteger\n      x@7 = Prelude.Bool * x@4\n      x@8 = cryptol:/Maybe/nothing x@4 (x@6,x@6)\n      x@9 = Cryptol.PEqPair Prelude.Bool x@4 Cryptol.PEqBit\n              (Cryptol.PEqPair x@3 x@3 x@5 x@5)\n    }\n in (s : Prelude.Vec 96 (Prelude.Vec 8 Prelude.Bool))\n-> Prelude.EqTrue\n     (cryptol:/Cryptol/==%3e\n        (Cryptol.ecEq x@7 x@9 (cryptol:uncompress_E2#7424 s) x@8)\n        (Cryptol.ecEq x@7 x@9\n           (cryptol:/implementation/SerializationP2/uncompress_E2_imp s)\n           x@8))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 2\n      x@3 = Prelude.Vec 2 Prelude.Integer\n    }\n in (a0 : x@3)\n-> (a1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@3)\n        (Cryptol.PEqSeq x@2 x@3\n           (Cryptol.PEqSeq x@2 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:fp4_reduce_mod_p#7903\n           (cryptol:/implementation/Fp12/sqr_fp4_imp a0 a1))\n        (cryptol:/implementation/Fp12/Fp_4.2.2.2.2.2.2.2.2.2.2.1 [a1, a0]))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 3\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n      x@6 = x@5.2.2\n    }\n in (x : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq x@2 x@3\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1 (cryptol:/Parameters/v,x))\n        [ x@6.1 (Cryptol.eListSel x@3 x@2 x 1)\n        , x@6.1 (Cryptol.eListSel x@3 x@2 x 2)\n        , x@5.1 (Cryptol.eListSel x@3 x@2 x 0,cryptol:/Parameters/u_plus_1) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 3\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n      x@6 = x@5.2.2\n    }\n in (x : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq x@2 x@3\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1 (cryptol:/Parameters/v,x))\n        [ x@6.1 (Cryptol.eListSel x@3 x@2 x 1)\n        , x@6.1 (Cryptol.eListSel x@3 x@2 x 2)\n        , x@5.1 (cryptol:/Parameters/u_plus_1,Cryptol.eListSel x@3 x@2 x 0) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 3\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 3 x@3\n      x@5 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2\n    }\n in (x : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq x@2 x@3\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.2.1 x)\n        [ x@5.1 (Cryptol.eListSel x@3 x@2 x 0)\n        , x@5.1 (Cryptol.eListSel x@3 x@2 x 1)\n        , x@5.1 (Cryptol.eListSel x@3 x@2 x 2) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 3\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = cryptol:/Parameters/Fp_2\n      x@5 = Prelude.Vec 3 x@3\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq x@2 x@3\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:/Parameters/Fp_6.1 (x,y))\n        [ x@4.1 (Cryptol.eListSel x@3 x@2 x 0,Cryptol.eListSel x@3 x@2 y 0)\n        , x@4.1 (Cryptol.eListSel x@3 x@2 x 1,Cryptol.eListSel x@3 x@2 y 1)\n        , x@4.1 (Cryptol.eListSel x@3 x@2 x 2,Cryptol.eListSel x@3 x@2 y 2) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Cryptol.TCNum 512\n      x@3 = Prelude.Vec 512 Prelude.Bool\n      x@4 = Cryptol.TCNum 256\n      x@5 = Cryptol.tcAdd x@4 x@4\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool) (Cryptol.PEqSeqBool x@4)\n        (cryptol:/Main/mul_mont_r_bv (cryptol:/Main/redc_r_bv x)\n           (cryptol:/Main/vec256_abs cryptol:/Main/RR_rep))\n        (cryptol:/Cryptol/drop x@4 x@4 Prelude.Bool\n           (Prelude.coerce x@3 (Cryptol.seq x@5 Prelude.Bool)\n              (Cryptol.seq_cong1 x@2 x@5 Prelude.Bool\n                 (Prelude.unsafeAssert Cryptol.Num x@2 x@5))\n              (Cryptol.ecMod x@3 (Cryptol.PIntegralSeqBool x@2) x\n                 (cryptol:/Cryptol/zext x@2 x@4 cryptol:/Main/bv_r)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Integer\n      -> Prelude.Integer\n      x@3 = Prelude.Integer * Prelude.Integer\n      x@4 = x@3\n      -> Prelude.Integer\n      x@5 = cryptol:/Parameters/E\n      x@6 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p : (x@6 * x@6 * x@6))\n-> let { x@7 = cryptol:/implementation/CurveOperation/POINTonE1_abs\n                 (llvm:/POINTonE1_times_c p)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer x@5\n            x@7)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective Prelude.Integer\n               x@5\n               (cryptol:/implementation/CurveOperation/POINTonE1_abs p))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer * x@4 * x@4 * Prelude.Integer * Prelude.Integer * x@2 * (x@3\n                                                                                                           -> Prelude.Bool) * (Prelude.Integer\n                                                                                                                               -> Prelude.Bool) * x@4 * x@2 * x@2 * x@2 * x@4)\n               ((Prelude.Integer * x@3)\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective\n                  Prelude.Integer)\n               x@5\n               x@7)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Nat\n      -> Prelude.Integer\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n      x@5 = Prelude.natToInt 2\n    }\n in (x : Prelude.Vec 3 x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (Prelude.at 3 x@3 (cryptol:fp6_abs_nom#7830 x) 0)\n        (cryptol:fp2_abs_nom#7831\n           (Prelude.ite x@4 (Prelude.intLe (Prelude.natToInt 0) x@5)\n              (Prelude.at 3 x@4 x (Prelude.intToNat x@5))\n              (Prelude.at 3 x@4 x 0))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Nat\n      -> Prelude.Integer\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.natToInt 2\n    }\n in (x : Prelude.Vec 3 x@3)\n-> let { x@5 = cryptol:fp6_reduce_mod_p#7882 x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:fp2_reduce_mod_p#7883 (Prelude.at 3 x@3 x 2))\n         (Prelude.ite x@3 (Prelude.intLe (Prelude.natToInt 0) x@4)\n            (Prelude.at 3 x@3 x@5 (Prelude.intToNat x@4))\n            (Prelude.at 3 x@3 x@5 0)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Nat\n      -> Prelude.Integer\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.Vec 2 Prelude.Integer\n      x@5 = Prelude.Vec 6 x@3\n      x@6 = Prelude.Vec 2 x@5\n      x@7 = Prelude.natToInt 2\n    }\n in (x : Prelude.Vec 3 x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqVec 2 x@5 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64)))\n        (Prelude.at 3 x@6 (cryptol:fp6_rep_nom#7828 x) 0)\n        (cryptol:fp2_rep_nom#7829\n           (Prelude.ite x@4 (Prelude.intLe (Prelude.natToInt 0) x@7)\n              (Prelude.at 3 x@4 x (Prelude.intToNat x@7))\n              (Prelude.at 3 x@4 x 0))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Nat\n      -> Prelude.Integer\n      x@3 = Prelude.Vec 64 Prelude.Bool\n      x@4 = Prelude.natToInt 1\n      x@5 = Prelude.Vec 2 Prelude.Integer\n      x@6 = Prelude.Vec 6 x@3\n      x@7 = Prelude.Vec 2 x@6\n    }\n in (x : Prelude.Vec 3 x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqVec 2 x@6 (Cryptol.PEqVec 6 x@3 (Cryptol.PEqWord 64)))\n        (Prelude.at 3 x@7 (cryptol:fp6_rep_nom#7828 x) 1)\n        (cryptol:fp2_rep_nom#7829\n           (Prelude.ite x@5 (Prelude.intLe (Prelude.natToInt 0) x@4)\n              (Prelude.at 3 x@5 x (Prelude.intToNat x@4))\n              (Prelude.at 3 x@5 x 0))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Nat\n      -> Prelude.Integer\n      x@3 = Prelude.natToInt 1\n      x@4 = Prelude.Vec 2 Prelude.Integer\n      x@5 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (Prelude.at 3 x@4 (cryptol:fp6_abs_nom#7830 x) 1)\n        (cryptol:fp2_abs_nom#7831\n           (Prelude.ite x@5 (Prelude.intLe (Prelude.natToInt 0) x@3)\n              (Prelude.at 3 x@5 x (Prelude.intToNat x@3))\n              (Prelude.at 3 x@5 x 0))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Nat\n      -> Prelude.Integer\n      x@3 = Prelude.natToInt 1\n      x@4 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : Prelude.Vec 3 x@4)\n-> let { x@5 = cryptol:fp6_reduce_mod_p#7882 x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@4 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:fp2_reduce_mod_p#7883 (Prelude.at 3 x@4 x 1))\n         (Prelude.ite x@4 (Prelude.intLe (Prelude.natToInt 0) x@3)\n            (Prelude.at 3 x@4 x@5 (Prelude.intToNat x@3))\n            (Prelude.at 3 x@4 x@5 0)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : Prelude.Vec 2 x@2)\n-> let { x@3 = Prelude.at 2 x@2 x 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fpx2_invariant x@3)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Field/fp2x2_invariant x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool\n               cryptol:/implementation/Field/fpx2_invariant\n               x@3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : Prelude.Vec 2 x@2)\n-> let { x@3 = Prelude.at 2 x@2 x 1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fpx2_invariant x@3)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Field/fp2x2_invariant x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool\n               cryptol:/implementation/Field/fpx2_invariant\n               x@3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp2x2_invariant [x, y])\n        (cryptol:/Cryptol/%2f%5c\n           (cryptol:/implementation/Field/fpx2_invariant x)\n           (cryptol:/implementation/Field/fpx2_invariant y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@3 = Prelude.at 3 x@2 x 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2x2_invariant x@3)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Field/fp6x2_invariant x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool\n               cryptol:/implementation/Field/fp2x2_invariant\n               x@3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@3 = Prelude.at 3 x@2 x 1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2x2_invariant x@3)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Field/fp6x2_invariant x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool\n               cryptol:/implementation/Field/fp2x2_invariant\n               x@3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@3 = Prelude.at 3 x@2 x 2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2x2_invariant x@3)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Field/fp6x2_invariant x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool\n               cryptol:/implementation/Field/fp2x2_invariant\n               x@3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (p : (x@2 * x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE2_invariant\n           (llvm:/POINTonE2_times_minus_z p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@4 = Prelude.at 3 x@3 (cryptol:/implementation/Field/fp6x2_rep x) 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2x2_abs x@4)\n         (Prelude.ite x@2 (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1 x)\n            (Prelude.at 3 x@2 x 2)\n            (cryptol:/implementation/CryptolHelpers/apply x@3 x@2\n               cryptol:/implementation/Field/fp2x2_abs\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@4 = Prelude.at 3 x@3 (cryptol:/implementation/Field/fp6x2_rep x) 1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2x2_abs x@4)\n         (Prelude.ite x@2 (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1 x)\n            (Prelude.at 3 x@2 x 1)\n            (cryptol:/implementation/CryptolHelpers/apply x@3 x@2\n               cryptol:/implementation/Field/fp2x2_abs\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@4 = Prelude.at 3 x@3 (cryptol:/implementation/Field/fp6x2_rep x) 2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2x2_abs x@4)\n         (Prelude.ite x@2 (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1 x)\n            (Prelude.at 3 x@2 x 0)\n            (cryptol:/implementation/CryptolHelpers/apply x@3 x@2\n               cryptol:/implementation/Field/fp2x2_abs\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : x@2)\n-> (y : x@2)\n-> (z : x@2)\n-> let { x@4 = [ cryptol:/implementation/Field/fp2x2_rep x\n         , cryptol:/implementation/Field/fp2x2_rep y\n         , cryptol:/implementation/Field/fp2x2_rep z ]\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp6x2_invariant x@4)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1 [x, y, z])\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply (Prelude.Vec 3 x@3)\n               Prelude.Bool\n               cryptol:/implementation/Field/fp6x2_invariant\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : x@3)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 3 x@2)\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/Field/fp6x2_abs [x, y, z])\n        [ cryptol:/implementation/Field/fp2x2_abs z\n        , cryptol:/implementation/Field/fp2x2_abs y\n        , cryptol:/implementation/Field/fp2x2_abs x ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (p1 : (x@2 * x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Cryptol/all (Cryptol.TCNum 16) (x@3 * x@3 * x@3)\n           cryptol:/implementation/CurveOperation/POINTonE2_invariant\n           (cryptol:precomputed_table#6902 p1))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@4 = Prelude.at 3 x@3 (cryptol:/implementation/Field/fp6_rep x) 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs x@4)\n         (Prelude.ite x@2 (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.1 x)\n            (Prelude.at 3 x@2 x 2)\n            (cryptol:/implementation/CryptolHelpers/apply x@3 x@2\n               cryptol:/implementation/Field/fp2_abs\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@4 = Prelude.at 3 x@3 (cryptol:/implementation/Field/fp6_rep x) 1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs x@4)\n         (Prelude.ite x@2 (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.1 x)\n            (Prelude.at 3 x@2 x 1)\n            (cryptol:/implementation/CryptolHelpers/apply x@3 x@2\n               cryptol:/implementation/Field/fp2_abs\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@4 = Prelude.at 3 x@3 (cryptol:/implementation/Field/fp6_rep x) 2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2_abs x@4)\n         (Prelude.ite x@2 (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.1 x)\n            (Prelude.at 3 x@2 x 0)\n            (cryptol:/implementation/CryptolHelpers/apply x@3 x@2\n               cryptol:/implementation/Field/fp2_abs\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3\n              (Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 3 x@2)\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:redc_mont_fp6#7858\n           (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.2.1\n              (cryptol:fp6_abs_nom#7830 x,cryptol:fp6_abs_nom#7830 y)))\n        (cryptol:toM_6#7867\n           (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1\n              (cryptol:/implementation/Field/fp6_abs x,\n               cryptol:/implementation/Field/fp6_abs y))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n      x@5 = x@4.2.2.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x,x@5.1))\n        (x@5.2.2.2.2.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n      x@5 = x@4.2.2.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x@5.1,x))\n        (x@5.2.2.2.2.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n      x@5 = x@4.2.2.2.2.2.2.2\n    }\n in (a0 : x@3)\n-> (a1 : x@3)\n-> (b0 : x@3)\n-> (b1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/fp12_mul_0 a0 a1 b0 b1))\n        (x@4.1 (x@5.1 (x@5.1 (a1,b1),cryptol:/Parameters/v),x@5.1 (a0,b0))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n      x@5 = x@4.2.2.2.2.2.2.2\n    }\n in (a0 : x@3)\n-> (a1 : x@3)\n-> (b0 : x@3)\n-> (b1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/fp12_mul_1 a0 a1 b0 b1))\n        (x@4.1 (x@5.1 (a0,b1),x@5.1 (a1,b0))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n      x@5 = x@4.2.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@5.1 (x@4.1 (x,y)))\n        (x@4.1 (x@5.1 x,x@5.1 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n      x@5 = x@4.2.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@5.2.2.2 (x,y))\n        (x@4.1 (x,x@5.1 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n    }\n in (x : x@3)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x@4.1 (x,y),z))\n        (x@4.1 (x,x@4.1 (y,z))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:redc_mont_fp6#7858 (x@4.1 (x,y)))\n        (x@4.1 (cryptol:redc_mont_fp6#7858 x,cryptol:redc_mont_fp6#7858 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:toM_6#7867 (x@4.1 (x,y)))\n        (x@4.1 (cryptol:toM_6#7867 x,cryptol:toM_6#7867 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x,x@4.2.2.2.2.2.2.2.2.2.1 y))\n        (x@4.1 (x,y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x@4.2.2.2.2.2.2.2.2.2.1 x,y))\n        (x@4.1 (x,y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/Fp12/inverse_fp6_imp x)\n        (x@4.1 (x@4.2.1,x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2\n      x@5 = x@4.2.2.2.2.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@5.1 (x,x@4.1))\n        (x@5.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2\n      x@5 = x@4.2.2.2.2.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@5.1 (x@4.1,x))\n        (x@5.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2\n      x@5 = x@4.1\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.2.2.2.2.1 (x,x@5))\n        x@5)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2\n      x@5 = x@4.1\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.2.2.2.2.1 (x@5,x))\n        x@5)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2\n      x@5 = x@4.2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x,x@5.1 y))\n        (x@5.1 (x@4.1 (x,y))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2\n    }\n in (a : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.2.2.2.1 a)\n        (x@4.1 (a,a)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> (z : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x@4.1 (x,y),z))\n        (x@4.1 (x,x@4.1 (y,z))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:redc_mont_fp6#7858 (x@4.1 (x,y)))\n        (cryptol:toM_6#7867\n           (x@4.1 (cryptol:redc_mont_fp6#7858 x,cryptol:redc_mont_fp6#7858 y))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x,x@4.2.2.1 y))\n        (x@4.1 (x,y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x@4.2.2.1 x,y))\n        (x@4.1 (x,y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.2.2.2.1 x)\n        (x@4.1 (x,x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x@4.1 x))\n        (x@4.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n      x@4 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (x@4.1 (x@4.2.1 x))\n        (x@4.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (a : x@3)\n-> (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/mul_by_xy0_fp6x2 a x y))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1\n           (a,[cryptol:/Parameters/Fp_2.2.2.2.1, x, y])))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (a : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/sqr_fp6_imp a))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.2.2.2.1 a))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (args : (x@3 * x@3))\n-> let { x@4 = cryptol:/Parameters/Fp_6.1 args\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n            (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n               Cryptol.PEqInteger))\n         (cryptol:fp6_abs_nom#7830 (cryptol:fp6_rep_nom#7828 x@4))\n         x@4)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : (x@3 * x@3))\n-> let { x@4 = Prelude.at 3 x@2 (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1 x) 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.1 x@4)\n         x@4)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : (x@3 * x@3))\n-> let { x@4 = Prelude.at 3 x@2 (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1 x) 1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.1 x@4)\n         x@4)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : (x@3 * x@3))\n-> let { x@4 = Prelude.at 3 x@2 (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1 x) 2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.1 x@4)\n         x@4)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : (x@3 * x@3))\n-> let { x@4 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1 x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n            (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n               Cryptol.PEqInteger))\n         (cryptol:/implementation/Field/fp6_abs\n            (cryptol:/implementation/Field/fp6_rep x@4))\n         x@4)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/Fp_6x2.1 (x,y)))\n        (cryptol:/Parameters/Fp_6.1\n           (cryptol:fp6_reduce_mod_p#7882 x,cryptol:fp6_reduce_mod_p#7882 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.2.1 (x,y)))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1\n           (cryptol:fp6_reduce_mod_p#7882 x,cryptol:fp6_reduce_mod_p#7882 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.2.2.2.2.2 (x,y)))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.2.2.2.2\n           (cryptol:fp6_reduce_mod_p#7882 x,cryptol:fp6_reduce_mod_p#7882 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/fp6x2_mul x y))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1\n           (cryptol:fp6_reduce_mod_p#7882 x,cryptol:fp6_reduce_mod_p#7882 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:/Frobenius/fp6_frobenius\n           (cryptol:/Frobenius/fp6_frobenius\n              (cryptol:/Frobenius/fp6_frobenius x)))\n        (cryptol:/implementation/Fp12/fp6_frobenius3 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:/Frobenius/fp6_frobenius (cryptol:/Frobenius/fp6_frobenius x))\n        (cryptol:/implementation/Fp12/fp6_frobenius2 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:redc_mont_fp6#7858 (cryptol:fp6_reduce_mod_p#7882 x))\n        (cryptol:redc_mont_fp6#7858 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:redc_mont_fp6#7858 x)\n        (cryptol:/implementation/CryptolHelpers/apply x@3 x@3\n           cryptol:redc_mont_fp6#7858\n           (cryptol:fp6_reduce_mod_p#7882 x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqVec 3 x@2\n           (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:/implementation/Fp12/nest x@3 cryptol:/Frobenius/fp6_frobenius\n           x\n           (Prelude.bvNat 64 1))\n        (cryptol:/Frobenius/fp6_frobenius x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqVec 3 x@2\n           (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:/implementation/Fp12/nest x@3 cryptol:/Frobenius/fp6_frobenius\n           x\n           (Prelude.bvNat 64 2))\n        (cryptol:/Frobenius/fp6_frobenius (cryptol:/Frobenius/fp6_frobenius x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqVec 3 x@2\n           (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger))\n        (cryptol:/implementation/Fp12/nest x@3 cryptol:/Frobenius/fp6_frobenius\n           x\n           (Prelude.bvNat 64 3))\n        (cryptol:/Frobenius/fp6_frobenius\n           (cryptol:/Frobenius/fp6_frobenius\n              (cryptol:/Frobenius/fp6_frobenius x))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqVec 3 x@2\n           (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger))\n        [Prelude.at 3 x@2 x 0, Prelude.at 3 x@2 x 1, Prelude.at 3 x@2 x 2]\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> let { x@4 = cryptol:/implementation/Field/fp6x2_rep x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n            (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n               Cryptol.PEqInteger))\n         (cryptol:/implementation/Field/fp6x2_abs x@4)\n         (Prelude.ite x@3 (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1 x)\n            x\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Vec 3\n                  (Prelude.Vec 2\n                     (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))))\n               x@3\n               cryptol:/implementation/Field/fp6x2_abs\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = Prelude.Vec 3 x@2\n    }\n in (x : x@3)\n-> let { x@4 = cryptol:/implementation/Fp12/inverse_fp6_imp x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n            (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n               Cryptol.PEqInteger))\n         (cryptol:/implementation/Field/fp6_abs\n            (cryptol:/implementation/Field/fp6_rep x@4))\n         x@4)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@5 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (p : (x@5 * x@5 * x@5))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (x@2 * x@2) (Cryptol.PEqPair x@2 x@2 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@2 x@3\n           (cryptol:/implementation/CurveOperation/POINTonE2_abs\n              (llvm:/POINTonE2_times_minus_z p)))\n        (cryptol:e2_scalar_mult#6884\n           (Cryptol.ecNeg Prelude.Integer Cryptol.PRingInteger cryptol:z#7151)\n           (cryptol:/ShortWeierstrassCurve/affinify x@2 x@3\n              (cryptol:/implementation/CurveOperation/POINTonE2_abs p))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp_2\n      x@4 = cryptol:/Parameters/u_plus_1\n      x@5 = x@3.2.2.2\n      x@6 = x@5.1\n      x@7 = x@5.2.2.2.2\n      x@8 = x@7.2.2.2\n    }\n in (a2 : x@2)\n-> (a1 : x@2)\n-> (a0 : x@2)\n-> let { x@9 = x@8.2 (x@8.1 a0,x@7.1 (x@4,x@7.1 (a1,a2)))\n         x@10 = x@8.2 (x@7.1 (x@4,x@8.1 a2),x@7.1 (a0,a1))\n         x@11 = x@8.2 (x@8.1 a1,x@7.1 (a0,a2))\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 3 x@2)\n         (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n            (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n               Cryptol.PEqInteger))\n         (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1\n            ([a2, a1, a0],[x@11, x@10, x@9]))\n         [ x@6\n         , x@6\n         , x@3.1\n             (x@7.1 (x@4,x@3.1 (x@7.1 (x@10,a2),x@7.1 (x@11,a1))),\n              x@7.1 (x@9,a0)) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp_2.2.2\n      x@4 = x@3.2\n      x@5 = x@4.2.2\n    }\n in (z : Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))\n-> let { x@6 = cryptol:/implementation/Field/fp2_abs z\n         x@7 = (x@6,x@4.1)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@5.1 x@7)\n         (Prelude.ite Prelude.Bool\n            (Cryptol.ecEq x@2\n               (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n               x@6\n               x@3.1)\n            Prelude.False\n            (cryptol:/implementation/CryptolHelpers/apply (x@2 * x@2)\n               Prelude.Bool\n               x@5.1\n               x@7)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp_2.2.2.2.1\n      x@4 = Prelude.Vec 3 x@2\n    }\n in (x : x@4)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:fp6_reduce_mod_p#7882\n           (cryptol:/implementation/Fp12/mul_by_0y0_fp6x2 x y))\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.1 (x,[x@3, y, x@3])))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp_6.2.2.2\n      x@4 = x@3.1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 3 x@2)\n         (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n            (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n               Cryptol.PEqInteger))\n         (x@3.2.2.2.2.2.1 x@4)\n         x@4)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.2.2.2\n    }\n in (a\n       : Prelude.Vec 3\n           (Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 3 x@2)\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:toM_6#7867 (x@3.1 (cryptol:/implementation/Field/fp6_abs a)))\n        (cryptol:redc_mont_fp6#7858 (x@3.1 (cryptol:fp6_abs_nom#7830 a))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@4 = Prelude.at 3 x@2 x 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.1 x@4)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1 x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool x@3.1\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@4 = Prelude.at 3 x@2 x 1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.1 x@4)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1 x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool x@3.1\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2\n    }\n in (x : Prelude.Vec 3 x@2)\n-> let { x@4 = Prelude.at 3 x@2 x 2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.1 x@4)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1 x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool x@3.1\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@5 = x@2 * x@3\n    }\n in (p1 : x@5)\n-> (booth_index : Prelude.Vec 64 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqPair x@2 x@3 x@4 (Cryptol.PEqPair x@2 x@2 x@4 x@4))\n        (cryptol:/implementation/CurveOperation/POINTonE2_abs\n           (cryptol:booth'#6913 (cryptol:precomputed_table#6902 p1)\n              booth_index))\n        (cryptol:small_mult#6904 (cryptol:booth_exponent#6922 booth_index) p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (s : Prelude.Vec 96 (Prelude.Vec 8 Prelude.Bool))\n-> Prelude.EqTrue\n     (cryptol:/Maybe/maybe_cases x@3 Prelude.Bool\n        (cryptol:/implementation/SerializationP2/uncompress_E2_imp s)\n        Prelude.True\n        (\\(P : x@3) ->\n           cryptol:/Maybe/maybe_cases x@3 Prelude.Bool\n             (cryptol:uncompress_E2#7424 s)\n             Prelude.False\n             (\\(Q : x@3) ->\n                Cryptol.ecEq x@3 (Cryptol.PEqPair x@2 x@2 x@4 x@4) P Q)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n      x@3 = x@2 * x@2\n      x@4 = x@3\n      -> x@2\n      x@5 = x@2\n      -> x@2\n      x@6 = cryptol:/Parameters/E'\n      x@7 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (p : (x@7 * x@7 * x@7))\n-> let { x@8 = cryptol:/implementation/CurveOperation/POINTonE2_abs\n                 (llvm:/POINTonE2_times_minus_z p)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/ShortWeierstrassCurve/is_point_projective x@2 x@6 x@8)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/ShortWeierstrassCurve/is_point_projective x@2 x@6\n               (cryptol:/implementation/CurveOperation/POINTonE2_abs p))\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (x@2 * x@2 * x@4 * x@4 * x@2 * x@2 * x@5 * (x@3\n                                                           -> Prelude.Bool) * (x@2\n                                                                               -> Prelude.Bool) * x@4 * x@5 * x@5 * x@5 * x@4)\n               ((x@2 * x@3)\n                -> Prelude.Bool)\n               (cryptol:/ShortWeierstrassCurve/is_point_projective x@2)\n               x@6\n               x@8)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (p1 : (x@2 * x@2 * x@2))\n-> (booth_index : Prelude.Vec 64 Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE2_invariant\n           (cryptol:booth'#6913 (cryptol:precomputed_table#6902 p1)\n              booth_index))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x\n       : Prelude.Vec 3\n           (Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 3 x@2)\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:redc_mont_fp6#7858 (cryptol:fp6_abs_nom#7830 x))\n        (cryptol:/implementation/Field/fp6_abs x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : Prelude.Vec 3 x@2)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1\n           (cryptol:/implementation/Fp12/mul_by_xy0_fp6x2 x y z))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : Prelude.Vec 3 x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1\n           (cryptol:/implementation/Fp12/mul_by_0y0_fp6x2 x y))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : Prelude.Vec 3 x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_reduce_mod_p#7883 (Prelude.at 3 x@2 x 0))\n        (Prelude.at 3 x@2 (cryptol:fp6_reduce_mod_p#7882 x) 0))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : Prelude.Vec 3 x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_reduce_mod_p#7883 (Prelude.at 3 x@2 x 1))\n        (Prelude.at 3 x@2 (cryptol:fp6_reduce_mod_p#7882 x) 1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : Prelude.Vec 3 x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_reduce_mod_p#7883 (Prelude.at 3 x@2 x 2))\n        (Prelude.at 3 x@2 (cryptol:fp6_reduce_mod_p#7882 x) 2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@2)\n-> (y : x@2)\n-> (z : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 3 x@2)\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n              Cryptol.PEqInteger))\n        (cryptol:/implementation/Field/fp6_abs\n           [ cryptol:/implementation/Field/fp2_rep x\n           , cryptol:/implementation/Field/fp2_rep y\n           , cryptol:/implementation/Field/fp2_rep z ])\n        [z, y, x])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Fp12/nest x@2 cryptol:/Frobenius/fp2_frobenius\n           x\n           (Prelude.bvNat 64 1))\n        (cryptol:/Frobenius/fp2_frobenius x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Fp12/nest x@2 cryptol:/Frobenius/fp2_frobenius\n           x\n           (Prelude.bvNat 64 2))\n        (cryptol:/Frobenius/fp2_frobenius (cryptol:/Frobenius/fp2_frobenius x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Fp12/nest x@2 cryptol:/Frobenius/fp2_frobenius\n           x\n           (Prelude.bvNat 64 3))\n        (cryptol:/Frobenius/fp2_frobenius\n           (cryptol:/Frobenius/fp2_frobenius\n              (cryptol:/Frobenius/fp2_frobenius x))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@2)\n-> let { x@3 = cryptol:/implementation/Field/fp2x2_rep x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@2\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/implementation/Field/fp2x2_abs x@3)\n         (Prelude.ite x@2 (cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2.1 x)\n            x\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool)))\n               x@2\n               cryptol:/implementation/Field/fp2x2_abs\n               x@3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 3 x@2)\n         (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n            (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n               Cryptol.PEqInteger))\n         (cryptol:fp6_reduce_mod_p#7882\n            cryptol:/implementation/Fp12/Fp_6x2.2.2.1)\n         cryptol:/Parameters/Fp_6.2.2.1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 2 Prelude.Integer\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 3 x@2)\n         (Cryptol.PEqSeq (Cryptol.TCNum 3) x@2\n            (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer\n               Cryptol.PEqInteger))\n         (cryptol:fp6_reduce_mod_p#7882\n            cryptol:/implementation/Fp12/Fp_6x2.2.2.2.1)\n         cryptol:/Parameters/Fp_6.2.2.2.1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n      x@3 = cryptol:/Parameters/Fp_6\n    }\n in (p : (x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.2.2.2.2.2.2.1 (x@3.1 p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n      x@3 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2\n    }\n in (p : (x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.1 (x@3.2.1 p)) Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n      x@3 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2\n    }\n in (p : (x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.1 (x@3.2.2.2.2.2 p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n      x@3 = cryptol:/implementation/Fp12/Fp_6x2\n    }\n in (p : (x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.2.2.2.2.2.2.1 (x@3.1 p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n      x@3 = cryptol:/implementation/Fp12/Fp_6x2\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.2.2.2.2.2.2.1 (x@3.1 (x,y)))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n      x@3 = cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2\n    }\n in (p : (x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.1 (x@3.2.1 p)) Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n      x@3 = cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2\n    }\n in (p : (x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.1 (x@3.2.2.2.2.2 p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n      x@3 = cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.1 (x@3.2.1 (x,y)))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n      x@3 = cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@3.1 (x@3.2.2.2.2.2 (x,y)))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp6_invariant\n           (cryptol:/implementation/Field/fp6_rep\n              (cryptol:/Parameters/Fp_6.1 (x,y))))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1\n           (cryptol:/implementation/Fp12/fp6x2_mul x y))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n      x@3 = x@2 * x@2\n    }\n in (q : (x@2 * x@3))\n-> let { x@4 = (q.1,q.2.1)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/CurveOperation/POINTonE1_affine_invariant x@4)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/CurveOperation/POINTonE1_invariant q)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@3 Prelude.Bool\n               cryptol:/implementation/CurveOperation/POINTonE1_affine_invariant\n               x@4)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p : (x@2 * x@2 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE1_invariant\n           (llvm:/POINTonE1_times_c p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p : (x@2 * x@2 * x@2))\n-> let { x@3 = p.2.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp_invariant x@3)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/CurveOperation/POINTonE1_invariant p)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply x@2 Prelude.Bool\n               cryptol:/implementation/Field/fp_invariant\n               x@3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Cryptol/all (Cryptol.TCNum 16) (x@2 * x@2 * x@2)\n           cryptol:/implementation/CurveOperation/POINTonE1_invariant\n           (cryptol:precomputed_table#6761 p1))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)\n    }\n in (x : x@2)\n-> (y : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp2_invariant [x, y])\n        (cryptol:/Cryptol/%2f%5c (cryptol:/implementation/Field/fp_invariant x)\n           (cryptol:/implementation/Field/fp_invariant y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.PIntegralInteger\n      x@4 = Cryptol.PLiteralInteger\n      x@5 = Cryptol.TCNum 2\n      x@6 = Prelude.Vec 6 x@2\n    }\n in (x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@6)\n        (Cryptol.PEqSeq x@5 x@6\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (Prelude.map Prelude.Integer x@6\n           (\\(y : Prelude.Integer) -> cryptol:/implementation/Field/fp_rep y)\n           2\n           x)\n        [ cryptol:/implementation/Field/fp_rep\n            (Cryptol.ecAt x@5 Prelude.Integer Prelude.Integer x@3 x\n               (Cryptol.ecNumber (Cryptol.TCNum 0) Prelude.Integer x@4))\n        , cryptol:/implementation/Field/fp_rep\n            (Cryptol.ecAt x@5 Prelude.Integer Prelude.Integer x@3 x\n               (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer x@4)) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.TCNum 2\n      x@4 = Cryptol.TCNum 64\n      x@5 = Cryptol.TCNum 6\n      x@6 = Prelude.Vec 6 x@2\n      x@7 = Prelude.Vec 2 x@6\n      x@8 = Cryptol.PEqSeq x@3 x@6\n              (Cryptol.PEqSeq x@5 x@2 (Cryptol.PEqSeqBool x@4))\n      x@9 = x@7 * x@7\n      x@10 = Cryptol.PZeroSeq x@3 x@6\n               (Cryptol.PZeroSeq x@5 x@2 (Cryptol.PZeroSeqBool x@4))\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@9 (Cryptol.PEqPair x@7 x@7 x@8 x@8)\n         (cryptol:/implementation/CurveOperation/POINTonE2_affine_rep\n            (cryptol:/ShortWeierstrassCurve/point_O\n               (Prelude.Vec 2 Prelude.Integer)\n               cryptol:/Parameters/E'))\n         (Cryptol.ecZero x@9 (x@10,x@10)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.TCNum 2\n      x@4 = Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)\n      x@5 = Prelude.Vec 6 x@2\n      x@6 = Prelude.Vec 2 x@5\n      x@7 = Prelude.Vec 3 x@6\n      x@8 = Prelude.Vec 2 x@7\n    }\n in (a : x@8)\n-> (b : x@8)\n-> let { x@9 = cryptol:/implementation/Fp12/fp12_mul\n                 (cryptol:fp12_abs_nom#7846 a)\n                 (cryptol:fp12_abs_nom#7846 b)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@8\n         (Cryptol.PEqSeq x@3 x@7\n            (Cryptol.PEqSeq (Cryptol.TCNum 3) x@6\n               (Cryptol.PEqSeq x@3 x@5\n                  (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                     (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))))\n         (cryptol:/implementation/Field/fp12_rep\n            (cryptol:/Parameters/Fp_12.2.2.2.2.2.2.2.1\n               (cryptol:/implementation/Field/fp12_abs a,\n                cryptol:/implementation/Field/fp12_abs b)))\n         [ (\\(z : x@4) ->\n              cryptol:fp6_rep_nom#7828 (cryptol:redc_mont_fp6#7858 z))\n             (Cryptol.eListSel x@4 x@3 x@9 1)\n         , (\\(z : x@4) ->\n              cryptol:fp6_rep_nom#7828 (cryptol:redc_mont_fp6#7858 z))\n             (Cryptol.eListSel x@4 x@3 x@9 0) ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.TCNum 2\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = Prelude.Vec 3 x@5\n      x@7 = Prelude.Vec 2 x@6\n      x@8 = cryptol:/Parameters/Fp_12.2.2.2.2.2.2.2\n    }\n in (x : x@7)\n-> (y : x@7)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqSeq x@3 x@6\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@5\n              (Cryptol.PEqSeq x@3 x@4\n                 (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                    (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))))\n        (cryptol:/implementation/Field/fp12_rep\n           (x@8.1\n              (cryptol:/implementation/Field/fp12_abs x,\n               cryptol:/implementation/Field/fp12_abs y)))\n        (cryptol:fp12_rep_nom#7850\n           (cryptol:redc_mont_fp12#7863\n              (x@8.1\n                 (cryptol:fp12_abs_nom#7846 x,cryptol:fp12_abs_nom#7846 y)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.TCNum 2\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = Prelude.Vec 3 x@5\n      x@7 = Prelude.Vec 2 x@6\n    }\n in (a : x@7)\n-> (xyz : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqSeq x@3 x@6\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@5\n              (Cryptol.PEqSeq x@3 x@4\n                 (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                    (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))))\n        (cryptol:/implementation/Field/fp12_rep\n           (cryptol:/Parameters/Fp_12.2.2.2.2.2.2.2.1\n              (cryptol:/implementation/Field/fp12_abs a,\n               cryptol:/implementation/Field/fp12_abs\n                 (cryptol:/implementation/Fp12/xy00z0_expander xyz))))\n        (cryptol:fp12_rep_nom#7850\n           (cryptol:redc_mont_fp12#7863\n              (cryptol:/implementation/Fp12/mul_by_xy00z0_fp12\n                 (cryptol:fp12_abs_nom#7846 a)\n                 (cryptol:fp6_abs_nom#7830 xyz)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.TCNum 2\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = Prelude.Vec 3 x@5\n      x@7 = Prelude.Vec 2 x@6\n    }\n in (x : x@7)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqSeq x@3 x@6\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@5\n              (Cryptol.PEqSeq x@3 x@4\n                 (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                    (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))))\n        (cryptol:/implementation/Field/fp12_normalize x)\n        (Prelude.ite x@7 (cryptol:/implementation/Field/fp12_invariant x) x\n           (cryptol:/implementation/CryptolHelpers/apply x@7 x@7\n              cryptol:/implementation/Field/fp12_normalize\n              x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.TCNum 2\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = Prelude.Vec 3 x@5\n      x@7 = Prelude.Vec 2 x@6\n    }\n in (x : x@7)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqSeq x@3 x@6\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@5\n              (Cryptol.PEqSeq x@3 x@4\n                 (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                    (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))))\n        (cryptol:/implementation/Field/fp12_rep\n           (cryptol:/implementation/Field/fp12_abs x))\n        (Prelude.ite x@7 (cryptol:/implementation/Field/fp12_invariant x) x\n           (cryptol:/implementation/Field/fp12_normalize x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.TCNum 2\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = Prelude.Vec 3 x@5\n    }\n in (x : Prelude.Vec 2 (Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@6)\n        (Cryptol.PEqSeq x@3 x@6\n           (Cryptol.PEqSeq (Cryptol.TCNum 3) x@5\n              (Cryptol.PEqSeq x@3 x@4\n                 (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                    (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))))\n        (cryptol:/implementation/Field/fp12_rep x)\n        (cryptol:fp12_rep_nom#7850 (cryptol:toM_12#7878 x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.TCNum 2\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (a0 : x@5)\n-> (a1 : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@5)\n        (Cryptol.PEqSeq x@3 x@5\n           (Cryptol.PEqSeq x@3 x@4\n              (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                 (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))))\n        (cryptol:/implementation/Fp12/fp4_rep\n           (cryptol:/implementation/Fp12/Fp_4.2.2.2.2.2.2.2.2.2.2.1\n              (cryptol:/implementation/Fp12/fp4_abs [a0, a1])))\n        (cryptol:fp4_rep_nom#7915\n           (cryptol:redc_mont_fp4#7895\n              (cryptol:/implementation/Fp12/sqr_fp4_imp\n                 (cryptol:fp2_abs_nom#7831 a0)\n                 (cryptol:fp2_abs_nom#7831 a1)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.TCNum 2\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : Prelude.Vec 2 (Prelude.Vec 2 Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@5)\n        (Cryptol.PEqSeq x@3 x@5\n           (Cryptol.PEqSeq x@3 x@4\n              (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                 (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))))\n        (cryptol:/implementation/Fp12/fp4_rep x)\n        (cryptol:fp4_rep_nom#7915 (cryptol:toM_4#7907 x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Cryptol.TCNum 64\n      x@4 = Cryptol.TCNum 6\n      x@5 = Prelude.Vec 6 x@2\n      x@6 = Cryptol.PEqSeq x@4 x@2 (Cryptol.PEqSeqBool x@3)\n      x@7 = x@5 * x@5\n      x@8 = Cryptol.PZeroSeq x@4 x@2 (Cryptol.PZeroSeqBool x@3)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@7 (Cryptol.PEqPair x@5 x@5 x@6 x@6)\n         (cryptol:/implementation/CurveOperation/POINTonE1_affine_rep\n            (cryptol:/ShortWeierstrassCurve/point_O Prelude.Integer\n               cryptol:/Parameters/E))\n         (Cryptol.ecZero x@7 (x@8,x@8)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 12 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 12) x@2\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fpx2_rep\n           (cryptol:/implementation/Field/fpx2_abs x))\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 12 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 12) x@2\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Types/vec768_rep\n           (cryptol:/implementation/Types/vec768_abs x))\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = Cryptol.PEqVec 2 x@4 (Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64))\n      x@7 = x@5 * x@5\n      x@8 = Prelude.replicate 2 x@4\n              (Prelude.replicate 6 x@2 (Prelude.bvNat 64 0))\n    }\n in (p1 : (x@3 * x@3 * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (x@5 * x@7)\n        (Cryptol.PEqPair x@5 x@7 x@6 (Cryptol.PEqPair x@5 x@5 x@6 x@6))\n        (cryptol:/implementation/CurveOperation/POINTonE2_rep\n           (cryptol:small_nonnegative_mult#6903 (Prelude.natToInt 0) p1))\n        (x@8,x@8,x@8))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = Cryptol.PEqVec 2 x@4 (Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64))\n      x@7 = x@5 * x@5\n      x@8 = x@5 * x@7\n      x@9 = Prelude.replicate 2 x@4\n              (Prelude.replicate 6 x@2 (Prelude.bvNat 64 0))\n    }\n in (p1 : (x@3 * x@3 * x@3))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 17 x@8)\n        (Cryptol.PEqVec 17 x@8\n           (Cryptol.PEqPair x@5 x@7 x@6 (Cryptol.PEqPair x@5 x@5 x@6 x@6)))\n        (Prelude.append 1 16 x@8 [x@9,x@9,x@9]\n           (cryptol:precomputed_table#6902 p1))\n        (Prelude.map Prelude.Integer x@8\n           (\\(i : Prelude.Integer) ->\n              cryptol:/implementation/CurveOperation/POINTonE2_rep\n                (cryptol:small_nonnegative_mult#6903 i p1))\n           17\n           (Prelude.gen 17 Prelude.Integer\n              (\\(i : Prelude.Nat) -> Prelude.natToInt (Prelude.addNat i 0)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 4 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqSeq (Cryptol.TCNum 4) x@2\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/Main/vec256_rep (cryptol:/Main/vec256_abs x))\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64)\n      x@5 = x@3 * x@3\n      x@6 = Prelude.replicate 6 x@2 (Prelude.bvNat 64 0)\n    }\n in (p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (x@3 * x@5)\n        (Cryptol.PEqPair x@3 x@5 x@4 (Cryptol.PEqPair x@3 x@3 x@4 x@4))\n        (cryptol:/implementation/CurveOperation/POINTonE1_rep\n           (cryptol:small_nonnegative_mult#6762 (Prelude.natToInt 0) p1))\n        (x@6,x@6,x@6))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64)\n      x@5 = x@3 * x@3\n      x@6 = x@3 * x@5\n      x@7 = Prelude.replicate 6 x@2 (Prelude.bvNat 64 0)\n    }\n in (p1 : (Prelude.Integer * Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 17 x@6)\n        (Cryptol.PEqVec 17 x@6\n           (Cryptol.PEqPair x@3 x@5 x@4 (Cryptol.PEqPair x@3 x@3 x@4 x@4)))\n        (Prelude.append 1 16 x@6 [x@7,x@7,x@7]\n           (cryptol:precomputed_table#6761 p1))\n        (Prelude.map Prelude.Integer x@6\n           (\\(i : Prelude.Integer) ->\n              cryptol:/implementation/CurveOperation/POINTonE1_rep\n                (cryptol:small_nonnegative_mult#6762 i p1))\n           17\n           (Prelude.gen 17 Prelude.Integer\n              (\\(i : Prelude.Nat) -> Prelude.natToInt (Prelude.addNat i 0)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64)\n      x@5 = x@3 * x@3\n      x@6 = x@3 * x@5\n    }\n in (p1 : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqPair x@3 x@5 x@4 (Cryptol.PEqPair x@3 x@3 x@4 x@4))\n        (cryptol:/implementation/CurveOperation/POINTonE1_rep\n           (cryptol:/implementation/CurveOperation/POINTonE1_abs p1))\n        (Prelude.ite x@6\n           (cryptol:/implementation/CurveOperation/POINTonE1_invariant p1)\n           p1\n           (cryptol:/implementation/CurveOperation/POINTonE1_normalize p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64)\n      x@5 = x@3 * x@3\n      x@6 = x@3 * x@5\n    }\n in (x : x@6)\n-> let { x@7 = x.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@6\n         (Cryptol.PEqPair x@3 x@5 x@4 (Cryptol.PEqPair x@3 x@3 x@4 x@4))\n         (x.1,x@7.1,x@7.2)\n         x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64)\n      x@5 = x@3 * x@3\n    }\n in (x : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5 (Cryptol.PEqPair x@3 x@3 x@4 x@4) (x.1,x.2) x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Prelude.Vec 2 x@3\n      x@5 = Cryptol.PEqVec 2 x@3 (Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64))\n      x@6 = x@4 * x@4\n      x@7 = x@4 * x@6\n    }\n in (p1 : x@7)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@7\n        (Cryptol.PEqPair x@4 x@6 x@5 (Cryptol.PEqPair x@4 x@4 x@5 x@5))\n        (cryptol:/implementation/CurveOperation/POINTonE2_rep\n           (cryptol:/implementation/CurveOperation/POINTonE2_abs p1))\n        (Prelude.ite x@7\n           (cryptol:/implementation/CurveOperation/POINTonE2_invariant p1)\n           p1\n           (cryptol:/implementation/CurveOperation/POINTonE2_normalize p1)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Prelude.Vec 2 x@3\n      x@5 = Cryptol.PEqVec 2 x@3 (Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64))\n      x@6 = x@4 * x@4\n      x@7 = x@4 * x@6\n    }\n in (x : x@7)\n-> let { x@8 = x.2\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@7\n         (Cryptol.PEqPair x@4 x@6 x@5 (Cryptol.PEqPair x@4 x@4 x@5 x@5))\n         (x.1,x@8.1,x@8.2)\n         x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Prelude.Vec 2 x@3\n      x@5 = Cryptol.PEqVec 2 x@3 (Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64))\n      x@6 = x@4 * x@4\n    }\n in (x : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6 (Cryptol.PEqPair x@4 x@4 x@5 x@5) (x.1,x.2) x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Prelude.Vec 2 x@3\n      x@5 = Prelude.Vec 3 x@4\n    }\n in (a : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) x@3\n              (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                 (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))))\n        (cryptol:/implementation/Field/fp6_rep\n           (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.2.2.2.2.1\n              (cryptol:/implementation/Field/fp6_abs a)))\n        (cryptol:fp6_rep_nom#7828\n           (cryptol:redc_mont_fp6#7858\n              (cryptol:/implementation/Fp12/sqr_fp6_imp\n                 (cryptol:fp6_abs_nom#7830 a)))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Prelude.Vec 2 x@3\n    }\n in (x : Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 3 x@4)\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) x@3\n              (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                 (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))))\n        (cryptol:/implementation/Field/fp6_rep x)\n        (cryptol:fp6_rep_nom#7828 (cryptol:toM_6#7867 x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n      x@4 = Prelude.Vec 2 x@3\n    }\n in (x : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqVec 2 x@3 (Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64)))\n        [Prelude.at 2 x@3 x 0, Prelude.at 2 x@3 x 1]\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 x@3)\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) x@3\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (cryptol:/implementation/Field/fp2_rep [x, y])\n        [ cryptol:/implementation/Field/fp_rep y\n        , cryptol:/implementation/Field/fp_rep x ])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Prelude.vecEq 6 x@2 (Prelude.vecEq 64 Prelude.Bool Prelude.boolEq) x x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Prelude.vecEq 6 x@2 (Prelude.vecEq 64 Prelude.Bool Prelude.boolEq) y y)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant x)\n        (Cryptol.ecEq x@3\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n           x\n           (cryptol:add_rep#7371 x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant x)\n        (Cryptol.ecEq x@3\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n           x\n           (cryptol:add_rep#7422 x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.Vec 6 x@2\n    }\n in (x : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64))\n        [ Prelude.at 6 x@2 x 0\n        , Prelude.at 6 x@2 x 1\n        , Prelude.at 6 x@2 x 2\n        , Prelude.at 6 x@2 x 3\n        , Prelude.at 6 x@2 x 4\n        , Prelude.at 6 x@2 x 5 ]\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = Prelude.natToInt 0\n      x@4 = Prelude.Vec 2 Prelude.Integer\n      x@5 = Prelude.Vec 6 x@2\n      x@6 = Prelude.Vec 2 x@5\n    }\n in (x : Prelude.Vec 3 x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqVec 2 x@5 (Cryptol.PEqVec 6 x@2 (Cryptol.PEqWord 64)))\n        (Prelude.at 3 x@6 (cryptol:fp6_rep_nom#7828 x) 2)\n        (cryptol:fp2_rep_nom#7829\n           (Prelude.ite x@4 (Prelude.intLe x@3 x@3)\n              (Prelude.at 3 x@4 x (Prelude.intToNat x@3))\n              (Prelude.at 3 x@4 x 0))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = cryptol:/Parameters/Fp\n      x@4 = Prelude.Vec 6 x@2\n    }\n in (x : x@4)\n-> (y : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:/implementation/Field/fp_rep\n           (x@3.1\n              (cryptol:/implementation/Field/fp_abs x,\n               cryptol:/implementation/Field/fp_abs y)))\n        (cryptol:rep_384#7433\n           (x@3.1 (cryptol:abs_384#7435 x,cryptol:abs_384#7435 y))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = cryptol:/Parameters/Fp_2\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n    }\n in (x : x@5)\n-> (y : x@5)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) x@4\n           (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n              (Cryptol.PEqSeqBool (Cryptol.TCNum 64))))\n        (cryptol:/implementation/Field/fp2_rep\n           (x@3.1\n              (cryptol:/implementation/Field/fp2_abs x,\n               cryptol:/implementation/Field/fp2_abs y)))\n        (cryptol:fp2_rep_nom#7829\n           (x@3.1 (cryptol:fp2_abs_nom#7831 x,cryptol:fp2_abs_nom#7831 y))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n      x@3 = cryptol:/Parameters/Fp_6\n      x@4 = Prelude.Vec 6 x@2\n      x@5 = Prelude.Vec 2 x@4\n      x@6 = Prelude.Vec 3 x@5\n    }\n in (x : x@6)\n-> (y : x@6)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@6\n        (Cryptol.PEqSeq (Cryptol.TCNum 3) x@5\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) x@4\n              (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n                 (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))))\n        (cryptol:/implementation/Field/fp6_rep\n           (x@3.1\n              (cryptol:/implementation/Field/fp6_abs x,\n               cryptol:/implementation/Field/fp6_abs y)))\n        (cryptol:fp6_rep_nom#7828\n           (x@3.1 (cryptol:fp6_abs_nom#7830 x,cryptol:fp6_abs_nom#7830 y))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 64 Prelude.Bool\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 6 x@2)\n        (Cryptol.PEqSeq (Cryptol.TCNum 6) x@2\n           (Cryptol.PEqSeqBool (Cryptol.TCNum 64)))\n        (cryptol:rep_384#7433 (cryptol:toM#7869 x))\n        (cryptol:/implementation/Field/fp_rep x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 8 Prelude.Bool\n      x@3 = Cryptol.TCNum 16\n      x@4 = Cryptol.TCNum 80\n    }\n in (IKM : Prelude.Vec 80 x@2)\n-> (info : Prelude.Vec 16 x@2)\n-> let { x@5 = (IKM,info)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool)\n         (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n         (cryptol:/Main/pow256_abs (cryptol:/Main/KeyGen_rep x@4 x@3 x@5))\n         (cryptol:/KeyGen/KeyGen x@4 x@3 x@5))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 8 Prelude.Bool\n      x@3 = Cryptol.TCNum 16\n      x@4 = Prelude.Vec 256 Prelude.Bool\n      x@5 = Cryptol.TCNum 80\n    }\n in (salt : x@4)\n-> (IKM : Prelude.Vec 80 x@2)\n-> (info : Prelude.Vec 16 x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/KeyGen/KeyGenStep x@5 x@3 salt IKM info)\n        (cryptol:/Main/vec256_abs\n           (cryptol:/Main/KeyGenStep_rep x@5 x@3 salt IKM info)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 8 Prelude.Bool\n      x@3 = Cryptol.TCNum 32\n      x@4 = Cryptol.TCNum 4\n      x@5 = Prelude.Vec 256 Prelude.Bool\n    }\n in (salt : x@5)\n-> (IKM : Prelude.Vec 32 x@2)\n-> (info : Prelude.Vec 4 x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@5 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/KeyGen/KeyGenStep x@3 x@4 salt IKM info)\n        (cryptol:/Main/vec256_abs\n           (cryptol:/Main/KeyGenStep_rep x@3 x@4 salt IKM info)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 8 Prelude.Bool\n      x@3 = Cryptol.TCNum 32\n      x@4 = Cryptol.TCNum 4\n    }\n in (IKM : Prelude.Vec 32 x@2)\n-> (info : Prelude.Vec 4 x@2)\n-> let { x@5 = (IKM,info)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool)\n         (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n         (cryptol:/Main/pow256_abs (cryptol:/Main/KeyGen_rep x@3 x@4 x@5))\n         (cryptol:/KeyGen/KeyGen x@3 x@4 x@5))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 8 Prelude.Bool\n      x@3 = Cryptol.TCNum 7\n      x@4 = Cryptol.TCNum 33\n    }\n in (IKM : Prelude.Vec 33 x@2)\n-> (info : Prelude.Vec 7 x@2)\n-> let { x@5 = (IKM,info)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 256 Prelude.Bool)\n         (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n         (cryptol:/Main/pow256_abs (cryptol:/Main/KeyGen_rep x@4 x@3 x@5))\n         (cryptol:/KeyGen/KeyGen x@4 x@3 x@5))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.Vec 8 Prelude.Bool\n      x@3 = Cryptol.TCNum 7\n      x@4 = Prelude.Vec 256 Prelude.Bool\n      x@5 = Cryptol.TCNum 33\n    }\n in (salt : x@4)\n-> (IKM : Prelude.Vec 33 x@2)\n-> (info : Prelude.Vec 7 x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/KeyGen/KeyGenStep x@5 x@3 salt IKM info)\n        (cryptol:/Main/vec256_abs\n           (cryptol:/Main/KeyGenStep_rep x@5 x@3 salt IKM info)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.natToInt 0\n      x@3 = Prelude.Vec 2 Prelude.Integer\n      x@4 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : Prelude.Vec 3 x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (Prelude.at 3 x@3 (cryptol:fp6_abs_nom#7830 x) 2)\n        (cryptol:fp2_abs_nom#7831\n           (Prelude.ite x@4 (Prelude.intLe x@2 x@2)\n              (Prelude.at 3 x@4 x (Prelude.intToNat x@2))\n              (Prelude.at 3 x@4 x 0))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = Prelude.natToInt 0\n      x@3 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : Prelude.Vec 3 x@3)\n-> let { x@4 = cryptol:fp6_reduce_mod_p#7882 x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:fp2_reduce_mod_p#7883 (Prelude.at 3 x@3 x 0))\n         (Prelude.ite x@3 (Prelude.intLe x@2 x@2)\n            (Prelude.at 3 x@3 x@4 (Prelude.intToNat x@2))\n            (Prelude.at 3 x@3 x@4 0)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = cryptol:/Parameters/Fp.2.2\n      x@3 = x@2.2\n      x@4 = x@3.2.2\n    }\n in (z : Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n-> let { x@5 = cryptol:/implementation/Field/fp_abs z\n         x@6 = (x@5,x@3.1)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@4.1 x@6)\n         (Prelude.ite Prelude.Bool\n            (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger x@5 x@2.1)\n            Prelude.False\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer)\n               Prelude.Bool\n               x@4.1\n               x@6)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n-> let { x@3 = (cryptol:/implementation/Field/fp_abs x,\n                cryptol:/implementation/Field/montgomery_factor_p)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@2.1 x@3)\n         (Prelude.ite Prelude.Integer\n            (cryptol:/implementation/Field/fp_invariant x)\n            (cryptol:/Parameters/to_Fp (Cryptol.TCNum 384)\n               (cryptol:/implementation/Types/vec384_abs x))\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Integer * Prelude.Integer)\n               Prelude.Integer\n               x@2.1\n               x@3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = cryptol:/Parameters/Fp_2\n      x@3 = Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n    }\n in (x : x@3)\n-> (y : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:abs_384x#7434\n           (cryptol:/implementation/Field/fp2_rep\n              (x@2.1\n                 (cryptol:/implementation/Field/fp2_abs x,\n                  cryptol:/implementation/Field/fp2_abs y))))\n        (x@2.1 (cryptol:fp2_abs_nom#7831 x,cryptol:fp2_abs_nom#7831 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n      x@2 = cryptol:/Parameters/Fp_6.2.2.2.2.2.2\n    }\n in (p : Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@2.1 (x@2.2.2.2.2.1 p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n        (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Field/fp2_abs\n           [ cryptol:/implementation/Field/fp_rep x\n           , cryptol:/implementation/Field/fp_rep y ])\n        [y, x])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Integer)\n-> let { x@2 = cryptol:/implementation/Field/fpx2_rep x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fpx2_invariant x@2)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Fp12/Fpx2.2.2.2.2.2.2.1 x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))\n               Prelude.Bool\n               cryptol:/implementation/Field/fpx2_invariant\n               x@2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 2 (Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer)))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp12_invariant\n           (cryptol:/implementation/Field/fp12_rep x))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_abs_nom#7831 x)\n        (cryptol:abs_384x#7434 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:redc_mont_fp2#7854 (cryptol:fp2_abs_nom#7831 x))\n        (cryptol:/implementation/Field/fp2_abs x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool)))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.1\n           (cryptol:/implementation/Field/fp2_abs x))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant\n           (Prelude.at 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n              (cryptol:/implementation/Field/fp2_rep x)\n              0))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant\n           (Prelude.at 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n              (cryptol:/implementation/Field/fp2_rep x)\n              1))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fp_abs\n           (Prelude.at 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n              (cryptol:/implementation/Field/fp2_rep x)\n              0))\n        (Prelude.at 2 Prelude.Integer x 1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 2 Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:/implementation/Field/fp_abs\n           (Prelude.at 2 (Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n              (cryptol:/implementation/Field/fp2_rep x)\n              1))\n        (Prelude.at 2 Prelude.Integer x 0))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 2 Prelude.Integer)\n-> let { x@2 = cryptol:/implementation/Field/fp2x2_rep x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp2x2_invariant x@2)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2.1 x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Vec 2 (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool)))\n               Prelude.Bool\n               cryptol:/implementation/Field/fp2x2_invariant\n               x@2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Parameters/Fp_6.2.2.2.2.2.2.1\n           (cryptol:/implementation/Fp12/inverse_fp6_imp x))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 3 (Prelude.Vec 2 Prelude.Integer))\n-> let { x@2 = cryptol:/implementation/Field/fp6x2_rep x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n         (cryptol:/implementation/Field/fp6x2_invariant x@2)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Fp12/Fp_6x2.2.2.2.2.2.2.1 x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply\n               (Prelude.Vec 3\n                  (Prelude.Vec 2\n                     (Prelude.Vec 12 (Prelude.Vec 64 Prelude.Bool))))\n               Prelude.Bool\n               cryptol:/implementation/Field/fp6x2_invariant\n               x@2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Parameters/Fp.2.2.2.2.2.2.1\n           (cryptol:/implementation/Field/fp_abs x))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/Field/fp_invariant x)\n        (Cryptol.ecLt Prelude.Integer Cryptol.PCmpInteger\n           (cryptol:/Parameters/to_Fp (Cryptol.TCNum 384)\n              (cryptol:/implementation/Types/vec384_abs x))\n           (Cryptol.ecNumber\n              (Cryptol.TCNum\n                 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787)\n              Prelude.Integer\n              Cryptol.PLiteralInteger)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Nat\n      -> sort 0\n      -> sort 0\n    }\n in (x : Prelude.Vec 6 (Prelude.Vec 64 Prelude.Bool))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:redc_mont_384#7427 (cryptol:abs_384#7435 x))\n        (cryptol:/implementation/Field/fp_abs x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n      x@3 = x@2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x,x@3.1))\n        (x@3.2.2.2.2.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n      x@3 = x@2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x@3.1,x))\n        (x@3.2.2.2.2.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n      x@3 = x@2.2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (x@2.1 (x,y)))\n        (x@2.1 (x@3.1 x,x@3.1 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n      x@3 = x@2.2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.2.2.2 (x,y))\n        (x@2.1 (x,x@3.1 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n    }\n in (p : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@2.2.2.2.2.2.2.1 (x@2.1 p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n    }\n in (p : (x@1 * x@1))\n-> let { x@3 = x@2.1 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (x@2.2.2.2.2.2.2.2.2.2.1 x@3)\n         x@3)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x@2.1 (x,y),z))\n        (x@2.1 (x,x@2.1 (y,z))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:redc_mont_fp2#7854 (x@2.1 (x,y)))\n        (x@2.1 (cryptol:redc_mont_fp2#7854 x,cryptol:redc_mont_fp2#7854 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x,x@2.2.2.2.2.2.2.2.2.2.1 y))\n        (x@2.1 (x,y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Fp12/inverse_fp2_imp x)\n        (x@2.1 (x@2.2.1,x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2\n      x@3 = x@2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> let { x@4 = x@3.1 (x,y)\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (x@3.1 (x@2.1,x@4))\n         x@4)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2\n      x@3 = x@2.2.2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (x,x@2.1))\n        (x@3.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2\n      x@3 = x@2.2.2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (x@2.1,x))\n        (x@3.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2\n      x@3 = x@2.1\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.2.2.2.2.1 (x,x@3))\n        x@3)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2\n      x@3 = x@2.1\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.2.2.2.2.1 (x@3,x))\n        x@3)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2\n      x@3 = x@2.2.2\n      x@4 = x@3.2\n    }\n in (p : (x@1 * x@1 * x@1))\n-> let { x@5 = p.2\n         x@6 = x@5.2\n    }\n in Prelude.EqTrue\n      (cryptol:/Cryptol/==%3e\n         (Cryptol.ecCompl Prelude.Bool Cryptol.PLogicBit (x@3.1 (x@6,x@2.1)))\n         (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n            (cryptol:/ShortWeierstrassCurve/is_point_projective x@1\n               cryptol:/Parameters/E'\n               p)\n            (cryptol:/Cryptol/%2f%5c (x@4.1 p.1)\n               (cryptol:/Cryptol/%2f%5c (x@4.1 x@5.1)\n                  (cryptol:/Cryptol/%2f%5c (x@4.1 x@6)\n                     (cryptol:/implementation/CurveOperation/POINTonE2_on_curve\n                        p))))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2\n    }\n in (p : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_affine x@1\n           cryptol:/Parameters/E'\n           p)\n        (cryptol:/Cryptol/%2f%5c (x@2.1 p.1)\n           (cryptol:/Cryptol/%2f%5c (x@2.1 p.2)\n              (cryptol:/implementation/CurveOperation/POINTonE2_affine_on_curve\n                 p))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2\n    }\n in (p : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@2.1 (x@2.2.1 p)) Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2\n    }\n in (p : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@2.1 (x@2.2.2.2.2.2 p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (p : (x@1 * x@1))\n-> let { x@3 = x@2.1 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (x@2.2.2.1 x@3)\n         x@3)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x,x@2.1 (y,z)))\n        (x@2.1 (x@2.1 (x,y),z)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x@2.1 (x,y),z))\n        (x@2.1 (x,x@2.1 (y,z))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:redc_mont_fp2#7854 (x@2.1 (x,y)))\n        (cryptol:toM_2#7868\n           (x@2.1 (cryptol:redc_mont_fp2#7854 x,cryptol:redc_mont_fp2#7854 y))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x,y))\n        (cryptol:/implementation/CryptolHelpers/apply (x@1 * x@1) x@1 x@2.1\n           (y,x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.2.2.2.1 x)\n        (x@2.1 (x,x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.1 (x@2.1 x))\n        (x@2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2\n    }\n in (p : (x@1 * x@1))\n-> let { x@3 = x@2.2.2 p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (x@2.1 x@3)\n         x@3)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/Parameters/u_plus_1\n      x@3 = cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@3.1 (x,x@2))\n        (x@3.1 (x@2,x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/implementation/Fp12/Fp_2x2\n    }\n in (p : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@2.2.2.2.2.2.2.1 (x@2.1 p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/implementation/Fp12/Fp_2x2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@2.2.2.2.2.2.2.1 (x@2.1 (x,y)))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2\n    }\n in (p : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@2.1 (x@2.2.1 p)) Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2\n    }\n in (p : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@2.1 (x@2.2.2.2.2.2 p))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@2.1 (x@2.2.1 (x,y)))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@2.1 (x@2.2.2.2.2.2 (x,y)))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2.2\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (x@2.2.2.2.1 x)\n        (x@2.1 (x,x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (P : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/HashToG2/times_minus_z P)\n        (cryptol:/implementation/CurveOperation/POINTonE2_abs\n           (llvm:/POINTonE2_times_minus_z\n              (cryptol:/implementation/CurveOperation/POINTonE2_rep P))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_add_affine x@1\n           cryptol:/Parameters/Fp_2\n           p1\n           p2)\n        (cryptol:point_add_affine_fp2#6899 p1 p2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_dadd_affine x@1\n           cryptol:/Parameters/Fp_2\n           p1\n           p2)\n        (cryptol:point_dadd_affine_fp2#6897 p1 p2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> (p2 : x@4)\n-> (a4 : x@1)\n-> (c : Prelude.Bool)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_dadd x@1\n           cryptol:/Parameters/Fp_2\n           p1\n           p2\n           a4\n           c)\n        (cryptol:point_dadd_fp2#6898 p1 p2 a4 c))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> (p2 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_add x@1\n           cryptol:/Parameters/Fp_2\n           p1\n           p2)\n        (cryptol:point_add_fp2#6900 p1 p2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_double x@1\n           cryptol:/Parameters/Fp_2\n           p1)\n        (cryptol:point_double_fp2#6896 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n      x@4 = x@1 * x@2\n    }\n in (p1 : x@4)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@4\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/point_neg x@1\n           cryptol:/Parameters/Fp_2\n           p1)\n        (cryptol:point_neg_fp2#6895 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : (x@1 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 cryptol:/Parameters/E' p1)\n        (cryptol:affinify_E'#6889 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/add x@1 cryptol:/Parameters/E' p1 p2)\n        (cryptol:add_E'#6894 p1 p2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> (p2 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:add'#6691 x@1 x@3 cryptol:/Parameters/E' p1 p2)\n        (cryptol:add'_E'#6893 p1 p2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (x@1 * x@2)\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/ShortWeierstrassCurve/projectify x@1 cryptol:/Parameters/E'\n           p1)\n        (cryptol:projectify_E'#6888 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:/ShortWeierstrassCurve/neg x@1 cryptol:/Parameters/E' p1)\n        (cryptol:neg_E'#6891 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (x : x@1)\n-> (y : x@1)\n-> (z : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (x@1 * x@2)\n        (Cryptol.PEqPair x@1 x@2 x@3 (Cryptol.PEqPair x@1 x@1 x@3 x@3))\n        (cryptol:/implementation/CurveOperation/POINTonE2_abs\n           (cryptol:/implementation/Field/fp2_rep x,\n            cryptol:/implementation/Field/fp2_rep y,\n            cryptol:/implementation/Field/fp2_rep z))\n        (x,y,z))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:e2_scalar_mult#6884 (Prelude.natToInt 0) p1)\n        (cryptol:/ShortWeierstrassCurve/point_O x@1 cryptol:/Parameters/E'))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@3 x@3)\n        (cryptol:e2_scalar_mult#6884 (Prelude.natToInt 1) p1)\n        p1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (P : (x@1 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/HashToCurveE2Aux/clear_cofactor_bls12381_g2\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 P))\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/HashToG2/clear_cofactor_E2_impl P)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (P : (x@1 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/HashToG2/psi_psi_double_impl P))\n        (cryptol:/HashToCurveE2Aux/psi_psi_double\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 P)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (P : (x@1 * x@2))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3\n           (cryptol:/implementation/HashToG2/times_minus_z P))\n        (cryptol:e2_scalar_mult#6884 cryptol:/HashToCurveE2Aux/pos_c1\n           (cryptol:/ShortWeierstrassCurve/affinify x@1 x@3 P)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (P : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/G2SubGroupCheck/psi\n           (cryptol:/ShortWeierstrassCurve/neg x@1 x@3 P))\n        (cryptol:/ShortWeierstrassCurve/neg x@1 x@3\n           (cryptol:/G2SubGroupCheck/psi P)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (P : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:/ShortWeierstrassCurve/neg x@1 x@3\n           (cryptol:/ShortWeierstrassCurve/neg x@1 x@3 P))\n        (P.1,cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.1 P.2))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = cryptol:/Parameters/E'\n      x@4 = Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@2)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@2 (Cryptol.PEqPair x@1 x@1 x@4 x@4)\n        (cryptol:e2_scalar_mult#6884\n           (Cryptol.ecNumber (Cryptol.TCNum 1) Prelude.Integer\n              Cryptol.PLiteralInteger)\n           p1)\n        (cryptol:/ShortWeierstrassCurve/add x@1 x@3 p1\n           (cryptol:/ShortWeierstrassCurve/point_O x@1 x@3)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@1 * x@2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p : x@3)\n-> let { x@5 = cryptol:small_nonnegative_mult#6903 (Prelude.natToInt 0) p\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@3\n         (Cryptol.PEqPair x@1 x@2 x@4 (Cryptol.PEqPair x@1 x@1 x@4 x@4))\n         (cryptol:point_neg_fp2#6895 x@5)\n         x@5)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@1 * x@2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair x@1 x@2 x@4 (Cryptol.PEqPair x@1 x@1 x@4 x@4))\n        (cryptol:/implementation/CurveOperation/POINTonE2_abs\n           (cryptol:/implementation/CurveOperation/POINTonE2_rep p1))\n        p1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n      x@2 = x@1 * x@1\n      x@3 = x@1 * x@2\n      x@4 = Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger\n    }\n in (p1 : x@3)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@3\n        (Cryptol.PEqPair x@1 x@2 x@4 (Cryptol.PEqPair x@1 x@1 x@4 x@4))\n        (cryptol:small_nonnegative_mult#6903 (Prelude.natToInt 1) p1)\n        p1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (args : (x@1 * x@1))\n-> let { x@2 = cryptol:/Parameters/Fp_2.1 args\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:abs_384x#7434 (cryptol:fp2_rep_nom#7829 x@2))\n         x@2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (args : (x@1 * x@1))\n-> let { x@2 = cryptol:/Parameters/Fp_2.1 args\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:fp2_abs_nom#7831 (cryptol:fp2_rep_nom#7829 x@2))\n         x@2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (p : (x@1 * x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Field/fp2_abs\n           (cryptol:/implementation/CurveOperation/POINTonE2_rep p).2.2)\n        p.2.2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (p1 : (x@1 * x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_projective x@1\n           cryptol:/Parameters/E'\n           p1)\n        (cryptol:is_point_projective_E'#6886 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (p1 : (x@1 * x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/implementation/CurveOperation/POINTonE2_invariant\n           (cryptol:/implementation/CurveOperation/POINTonE2_rep p1))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (p1 : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_O x@1 cryptol:/Parameters/E'\n           p1)\n        (cryptol:is_point_O_E'#6890 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (p1 : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_affine x@1\n           cryptol:/Parameters/E'\n           p1)\n        (cryptol:is_point_affine_E'#6887 p1))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (s : x@1)\n-> (inp : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:sqrt_align_fp2_coeff#6847 s inp)\n        (cryptol:sqrt_align_fp2_coeff'#6850 s inp))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.1 x)\n        (cryptol:ef_add_fp#6835 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 x)\n        (cryptol:ef_mul_fp#6837 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : (x@1 * x@1))\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.2.2 x)\n        (cryptol:ef_sub_fp#6834 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.1 (x,y))\n        (Cryptol.ecEq x@1\n           (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n           x\n           y))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2.2.1 (x,y))\n        (cryptol:mul_382x#7430 x y))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_reduce_mod_p#7883\n           (cryptol:/implementation/Fp12/Fp_2x2.1 (x,y)))\n        (cryptol:/Parameters/Fp_2.1\n           (cryptol:fp2_reduce_mod_p#7883 x,cryptol:fp2_reduce_mod_p#7883 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_reduce_mod_p#7883\n           (cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2.2.1 (x,y)))\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1\n           (cryptol:fp2_reduce_mod_p#7883 x,cryptol:fp2_reduce_mod_p#7883 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:fp2_reduce_mod_p#7883\n           (cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2.2.2.2.2.2 (x,y)))\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.2.2\n           (cryptol:fp2_reduce_mod_p#7883 x,cryptol:fp2_reduce_mod_p#7883 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.1 x)\n        (cryptol:ef_neg_fp#6833 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.2.1 x)\n        (cryptol:ef_sq_fp#6836 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2.2.1\n           (x,cryptol:/implementation/Fp12/u_plus_1x2))\n        (cryptol:mul_by_u_plus_1_fp2x2#7824 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Psi/qi_x_abs x)\n        (cryptol:qi_x_imp#7140 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/implementation/Psi/qi_y_abs x)\n        (cryptol:qi_y_imp#7144 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:abs_384x#7434 (cryptol:/implementation/Field/fp2_rep x))\n        (cryptol:toM_2#7868 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqVec 2 Prelude.Integer Cryptol.PEqInteger)\n        [Prelude.at 2 Prelude.Integer x 0, Prelude.at 2 Prelude.Integer x 1]\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 2 Prelude.Integer\n    }\n in (x : x@1)\n-> let { x@2 = cryptol:/Frobenius/fp2_frobenius x\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq x@1\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/Frobenius/fp2_frobenius\n            (cryptol:/Frobenius/fp2_frobenius x@2))\n         x@2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 256 Prelude.Bool\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqSeqBool (Cryptol.TCNum 256))\n        (cryptol:/Main/vec256_abs (cryptol:/Main/vec256_rep x))\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 384 Prelude.Bool\n      x@2 = Cryptol.TCNum 384\n      x@3 = Cryptol.PIntegralSeqBool x@2\n    }\n in (x : x@1)\n-> (y : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (Cryptol.ecLt x@1 (Cryptol.PCmpSeqBool x@2) x y)\n        (Cryptol.ecLt Prelude.Integer Cryptol.PCmpInteger\n           (Cryptol.ecToInteger x@1 x@3 x)\n           (Cryptol.ecToInteger x@1 x@3 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 384 Prelude.Bool\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqSeqBool (Cryptol.TCNum 384))\n        (cryptol:/implementation/Types/vec384_abs\n           (cryptol:/implementation/Types/vec384_rep x))\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = Prelude.Vec 768 Prelude.Bool\n    }\n in (x : x@1)\n-> Prelude.EqTrue\n     (Cryptol.ecEq x@1 (Cryptol.PEqSeqBool (Cryptol.TCNum 768))\n        (cryptol:/implementation/Types/vec768_abs\n           (cryptol:/implementation/Types/vec768_rep x))\n        x)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n      x@2 = x@1.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x,x@2.1))\n        (x@2.2.2.2.2.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n      x@2 = x@1.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@2.1,x))\n        (x@2.2.2.2.2.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n      x@2 = x@1.2.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@2.1 (x@1.1 (x,y)))\n        (x@1.1 (x@2.1 x,x@2.1 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n      x@2 = x@1.2.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@2.2.2.2 (x,y))\n        (x@1.1 (x,x@2.1 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@1.1 (x,y),z))\n        (x@1.1 (x,x@1.1 (y,z))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:redc_mont_384#7427 (x@1.1 (x,y)))\n        (x@1.1 (cryptol:redc_mont_384#7427 x,cryptol:redc_mont_384#7427 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:toM#7869 (x@1.1 (x,y)))\n        (x@1.1 (cryptol:toM#7869 x,cryptol:toM#7869 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x,y))\n        (cryptol:/implementation/CryptolHelpers/apply\n           (Prelude.Integer * Prelude.Integer)\n           Prelude.Integer\n           x@1.1\n           (y,x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2\n      x@2 = x@1.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@2.1 (x,x@1.1))\n        (x@2.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2\n      x@2 = x@1.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@2.1 (x@1.1,x))\n        (x@2.2.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2\n      x@2 = x@1.1\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.2.2.2.2.1 (x,x@2))\n        x@2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2\n      x@2 = x@1.1\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.2.2.2.2.1 (x@2,x))\n        x@2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2\n      x@2 = x@1.1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.2.2.2.2.2.1 x@2)\n         x@2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2\n      x@2 = x@1.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 ([x, y],[x@1.1, z]))\n        [x@2.1 (x,z), x@2.1 (y,z)])",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2\n      x@2 = x@1.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n        (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n        [x@2.1 (x,z), x@2.1 (y,z)]\n        (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.1 ([x, y],[x@1.1, z])))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2\n    }\n in (u : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (x@1.2.2.1\n           ((cryptol:/HashToCurveE1Aux/map_to_curve_simple_swu_3mod4 u).2.1,\n            x@1.1))\n        Prelude.False)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (cryptol:toM#7869 x@1)\n         x@1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2\n    }\n in (p : (Prelude.Integer * Prelude.Integer))\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit\n        (cryptol:/ShortWeierstrassCurve/is_point_affine Prelude.Integer\n           cryptol:/Parameters/E\n           p)\n        (cryptol:/Cryptol/%2f%5c (x@1.1 p.1)\n           (cryptol:/Cryptol/%2f%5c (x@1.1 p.2)\n              (cryptol:/implementation/CurveOperation/POINTonE1_affine_on_curve\n                 p))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> (z : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@1.1 (x,y),z))\n        (x@1.1 (x,x@1.1 (y,z))))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x,y))\n        (cryptol:/implementation/CryptolHelpers/apply\n           (Prelude.Integer * Prelude.Integer)\n           Prelude.Integer\n           x@1.1\n           (y,x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.2.2.2.1 x)\n        (x@1.1 (x,x)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@1.1 x))\n        (x@1.2.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger (x@1.1 (x@1.2.1 x))\n        (x@1.1 x))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:redc_mont_384#7427 (x@1.2 (x,y)))\n        (x@1.2 (cryptol:redc_mont_384#7427 x,cryptol:redc_mont_384#7427 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n        (cryptol:toM#7869 (x@1.2 (x,y)))\n        (x@1.2 (cryptol:toM#7869 x,cryptol:toM#7869 y)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/Fp_2.2.2.2\n      x@2 = x@1.1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (x@1.2.2.2.2.2.1 x@2)\n         x@2)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/b\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Integer Cryptol.PEqInteger\n         (cryptol:/Parameters/Fp.2.2.2.2.2.2.2.2.2.1 x@1)\n         x@1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/Parameters/b'\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq (Prelude.Vec 2 Prelude.Integer)\n         (Cryptol.PEqSeq (Cryptol.TCNum 2) Prelude.Integer Cryptol.PEqInteger)\n         (cryptol:/Parameters/Fp_2.2.2.2.2.2.2.2.2.2.1 x@1)\n         x@1)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/implementation/Fp12/Fpx2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@1.2.2.2.2.2.2.1 (x@1.1 (x,y)))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/implementation/Fp12/Fpx2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@1.1 (x@1.2.1 (x,y)))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/implementation/Fp12/Fpx2.2.2.2.2.2.2\n    }\n in (x : Prelude.Integer)\n-> (y : Prelude.Integer)\n-> Prelude.EqTrue\n     (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@1.1 (x@1.2.2.2.2.2 (x,y)))\n        Prelude.True)",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/implementation/Fp12/Fpx2.2.2.2.2.2.2\n    }\n in (x : Prelude.Vec 2 Prelude.Integer)\n-> let { x@2 = Prelude.at 2 Prelude.Integer x 0\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@1.1 x@2)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2.1 x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               Prelude.Bool\n               x@1.1\n               x@2)))",
    "type": "property"
  },
  {
    "status": "verified",
    "loc": "unknown",
    "term": "let { x@1 = cryptol:/implementation/Fp12/Fpx2.2.2.2.2.2.2\n    }\n in (x : Prelude.Vec 2 Prelude.Integer)\n-> let { x@2 = Prelude.at 2 Prelude.Integer x 1\n    }\n in Prelude.EqTrue\n      (Cryptol.ecEq Prelude.Bool Cryptol.PEqBit (x@1.1 x@2)\n         (Prelude.ite Prelude.Bool\n            (cryptol:/implementation/Fp12/Fp_2x2.2.2.2.2.2.2.1 x)\n            Prelude.True\n            (cryptol:/implementation/CryptolHelpers/apply Prelude.Integer\n               Prelude.Bool\n               x@1.1\n               x@2)))",
    "type": "property"
  }
]
