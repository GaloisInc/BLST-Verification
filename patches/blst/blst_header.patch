diff --git a/bindings/blst.h b/bindings/blst.h
index 3a333b1..72b6c1c 100644
--- a/bindings/blst.h
+++ b/bindings/blst.h
@@ -168,10 +168,10 @@ bool blst_p1_is_equal(const blst_p1 *a, const blst_p1 *b);
 bool blst_p1_is_inf(const blst_p1 *a);
 const blst_p1 *blst_p1_generator();
 
-bool blst_p1_affine_on_curve(const blst_p1_affine *p);
-bool blst_p1_affine_in_g1(const blst_p1_affine *p);
+limb_t blst_p1_affine_on_curve(const blst_p1_affine *p);
+limb_t blst_p1_affine_in_g1(const blst_p1_affine *p);
 bool blst_p1_affine_is_equal(const blst_p1_affine *a, const blst_p1_affine *b);
-bool blst_p1_affine_is_inf(const blst_p1_affine *a);
+limb_t blst_p1_affine_is_inf(const blst_p1_affine *a);
 const blst_p1_affine *blst_p1_affine_generator();
 
 typedef struct { blst_fp2 x, y, z; } blst_p2;
@@ -194,10 +194,10 @@ bool blst_p2_is_equal(const blst_p2 *a, const blst_p2 *b);
 bool blst_p2_is_inf(const blst_p2 *a);
 const blst_p2 *blst_p2_generator();
 
-bool blst_p2_affine_on_curve(const blst_p2_affine *p);
-bool blst_p2_affine_in_g2(const blst_p2_affine *p);
+limb_t blst_p2_affine_on_curve(const blst_p2_affine *p);
+limb_t blst_p2_affine_in_g2(const blst_p2_affine *p);
 bool blst_p2_affine_is_equal(const blst_p2_affine *a, const blst_p2_affine *b);
-bool blst_p2_affine_is_inf(const blst_p2_affine *a);
+limb_t blst_p2_affine_is_inf(const blst_p2_affine *a);
 const blst_p2_affine *blst_p2_affine_generator();
 
 /*
@@ -279,11 +279,25 @@ void blst_miller_loop_lines(blst_fp12 *ret, const blst_fp6 Qlines[68],
 #ifdef __BLST_CGO__
 typedef limb_t blst_pairing;
 #else
-typedef struct {} blst_pairing;
+#ifndef N_MAX
+# define N_MAX 8
+#endif
+
+typedef union { blst_p1 e1; blst_p1 e2; } AggregatedSignature;
+typedef struct blst_pairing_st {
+    unsigned int ctrl;
+    unsigned int nelems;
+    const void *DST;
+    size_t DST_len;
+    blst_fp12 GT;
+    AggregatedSignature AggrSign;
+    blst_p2_affine Q[N_MAX];
+    blst_p1_affine P[N_MAX];
+} blst_pairing;
 #endif
 
 size_t blst_pairing_sizeof();
-void blst_pairing_init(blst_pairing *new_ctx, bool hash_or_encode,
+void blst_pairing_init(blst_pairing *new_ctx, int hash_or_encode,
                        const byte *DST DEFNULL, size_t DST_len DEFNULL);
 const byte *blst_pairing_get_dst(const blst_pairing *ctx);
 void blst_pairing_commit(blst_pairing *ctx);
@@ -318,7 +332,7 @@ BLST_ERROR blst_pairing_mul_n_aggregate_pk_in_g1(blst_pairing *ctx,
                                                  const byte *aug DEFNULL,
                                                  size_t aug_len DEFNULL);
 BLST_ERROR blst_pairing_merge(blst_pairing *ctx, const blst_pairing *ctx1);
-bool blst_pairing_finalverify(const blst_pairing *ctx,
+limb_t blst_pairing_finalverify(const blst_pairing *ctx,
                               const blst_fp12 *gtsig DEFNULL);
 
 
@@ -343,7 +357,7 @@ void blst_aggregated_in_g2(blst_fp12 *out, const blst_p2_affine *signature);
  */
 BLST_ERROR blst_core_verify_pk_in_g1(const blst_p1_affine *pk,
                                      const blst_p2_affine *signature,
-                                     bool hash_or_encode,
+                                     int hash_or_encode,
                                      const byte *msg, size_t msg_len,
                                      const byte *DST DEFNULL,
                                      size_t DST_len DEFNULL,
@@ -351,7 +365,7 @@ BLST_ERROR blst_core_verify_pk_in_g1(const blst_p1_affine *pk,
                                      size_t aug_len DEFNULL);
 BLST_ERROR blst_core_verify_pk_in_g2(const blst_p2_affine *pk,
                                      const blst_p1_affine *signature,
-                                     bool hash_or_encode,
+                                     int hash_or_encode,
                                      const byte *msg, size_t msg_len,
                                      const byte *DST DEFNULL,
                                      size_t DST_len DEFNULL,
