// tests for the Polynomial module

import Common::Field
import Polynomial
import PrimeField

// check that all coefficients are in their field
is_OK: {t,k} (fin k) => FieldRep t -> [k]t ->Bool
is_OK F p = all F.is_val p

poly_mul_0:  {t,k} (fin k, k>=1) => FieldRep t -> [k]t ->Bool
poly_mul_0 F x = poly_equal F (poly_mul F x (poly_0 F), poly_0 F)

poly_mul_1:  {t,k} (fin k, k>=1) => FieldRep t -> [k]t ->Bool
poly_mul_1 F x = poly_equal F (poly_mul F x (poly_1 F), x)

poly_mul_commutes:  {t,k} (fin k, k>=1) => FieldRep t -> [k]t -> [k]t ->Bool
poly_mul_commutes F x y =
    is_OK F x /\ is_OK F y ==> poly_equal F (poly_mul F x y, poly_mul F y x)

poly_mul_mod_commutes:  {t,k} (fin k, k>=1) => FieldRep t -> [k]t -> [k]t ->Bool
poly_mul_mod_commutes F x y =
    is_OK F x /\ is_OK F y ==> poly_equal F (poly_mul F x y, poly_mul F y x)

poly_div_mod_prop: {k,t} (fin k, k >= 1) => FieldRep t -> [k]t -> [k]t ->  Bool
poly_div_mod_prop F x y =
    is_OK F y /\ is_OK F x /\ ~ (poly_equal F (y, poly_0 F)) ==>
    poly_equal F (x, poly_add F (poly_mul F q y) r) where (q,r) = poly_div_mod F x y

poly_inverse_mod_prop: {k,t} (fin k, k >= 1) => FieldRep t -> [k]t -> [k]t -> Bool
// only when q represents an irreducible polynomial
poly_inverse_mod_prop F q p =
    (is_OK F q) /\ is_OK F p /\ ~ (poly_equal F (p, poly_0 F)) ==>
    poly_equal F (poly_mul_mod F p (poly_inverse_mod F p q) q, poly_1 F)


F7 = prime_field`{7}
F29 = prime_field_bv (29:[5])

// Some monomorphic test cases

property mul_0_F7 = poly_mul_0`{k=4} F7
property mul_1_F7 = poly_mul_1`{k=4} F7
property mul_commutes_F7 = poly_mul_commutes`{k=5} F7
property mul_mod_commutes_F7 = poly_mul_mod_commutes`{k=4} F7

property div_mod_F7 = poly_div_mod_prop`{k=3} F7
property div_mod_F7' = poly_div_mod_prop`{k=8} F7

property inverse_mod_F7  p = poly_inverse_mod_prop`{k=3} F7 p [1,1,3] // q=x^2+x+3 is irreducible in F7
property inverse_mod_F7' p = poly_inverse_mod_prop`{k=4} F7 p [1,1,2,3] // x^3+x^2+2x+3 is irreducible in F7

property mul_0_F29 = poly_mul_0`{k=4} F29
property mul_1_F29 = poly_mul_1`{k=4} F29
property mul_commutes_F29 = poly_mul_commutes`{k=5} F29
property mul_mod_commutes_F29 = poly_mul_mod_commutes`{k=4} F29

property div_mod_F29 = poly_div_mod_prop`{k=3} F29

property inverse_mod_F29 p = poly_inverse_mod_prop`{k=3} F29 p [2,3,5]
property inverse_mod_F29' p = poly_inverse_mod_prop`{k=4} F29 p [1,0,1,4]
