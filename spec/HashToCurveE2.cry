/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/
module HashToCurveE2 = HashToCurveGeneric where

// NOTE: Our ExtensionField and Polynonial modules represents elements
// of extension fields as polynomials, and those as lists of elements
// of a base field in descending order by degree, so that [a,b,c]
// represents ax^2 + bx+c.
//
// Section 2.1 of the specification states that they are represented
// "in ascending order by degree" so that [a,b,c] represents a+bx +
// cx^2.  So we need reversals when transcribing the spec's defintions
// into our Cryptol model, whenever lists of elements are used. These are
// notes in the definitions belo0w

import Parameters as P
import FieldExtras
import ShortWeierstrassCurve as EC

type _p = P::p // characteristic
type _q = P::p * P::p // cardinality, here p^2
type _t_F = P::t_Fp_2 // field representation type
_F = P::Fp_2 // the field structure, containing the operations
type _m = 2 // extension degree
_base_to_F xs = reverse xs // Our polynomials are big-endian; the spec is little-endian

_C = P::E' // {base_field = F, a = F.field_zero, b = P::b'}

// From Section 4. Utility Functions
CMOV (a,b,c) = if c==False then a else b

// extra field operations

_is_square x =  _F.is_equal (y, _F.field_zero) \/ _F.is_equal (y, _F.field_unit) where
    y = F_expt`{n = width _q} _F x `((_q-1)/2)

// Alternative implementation from G.5
// TODO

// sqrt from Appendix G.3 (q = 9 mod 8)
_sqrt x = z where
    tv1 = F_expt`{n=(width _q) - 3} _F x `((_q+7)/16)
    tv2 = _F.mul (c1, tv1)
    tv3 = _F.mul (c2, tv1)
    tv4 = _F.mul (c3, tv1)
    e1 =  _F.is_equal (_F.sq tv2, x)
    e2 =  _F.is_equal (_F.sq tv3, x)

    tv1_1 = CMOV (tv1, tv2, e1)
    tv2_1 = CMOV (tv4, tv3, e2)
    e3 = _F.is_equal (_F.sq tv2_1, x)
    z = CMOV (tv1_1, tv2_1, e3)

    // Need constants c1,c2,c3 with c1^2 = -1, c2^2 = c1, c3^3 = -c1
    // As Fp_2 = Fp(u) with u^2 +1 = 0, c1 = u does the first
    c1 = [1,0]
    // Now pick a particular k (thanks to SageMath) so that 2 k^2 = -1 (mod p)
    k: P::t_Fp
    k = 1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257
    // Then (k(u+1))^2 = k^2(2u) = -u and
    //      (k(u-1))^2 = k^2(-2u) = u
    c2 = [k, P::Fp.neg k] // k*(u-1)
    c3 = [k, k] // k*(u+1)

// sgn0 for m=2, from Section 4.1 
_sgn0 [x_1, x_0] =  sign_0 || (zero_0 && sign_1) where
    // [x_1, x_0] because Section 2.1 asks for a little-endian order of elements
    x_0' = P::from_Fp x_0
    x_1' = P::from_Fp x_1
    sign_0 = [x_0'!0] // least-signiifcant bit
    zero_0 = [x_0' == 0] // represent the Boolean as 0 or 1
    sign_1 = [x_1'!0]  

_inv0 x = F_expt`{n=width _q} _F x `(_q-2) // but could be F.div (_F.field_unit, x)

// for the isogenous curve
private
    to_Fp  = P::to_Fp


// Constants from Section 8.8.2
_Z = _F.neg [1, 2] // -(2+I)
// A' = [to_Fp 240, 0]: t_F // 240 * I
_A' = to_Fp2 (0,240)
//B' = [to_Fp 1012, to_Fp 1012]: t_F  // 1012 * (1+I)
_B' = to_Fp2 (1012,1012)

h_eff = 0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551

_clear_cofactor P = EC::mult _C h_eff P

_iso_map: (_t_F, _t_F) -> (_t_F, _t_F)
_iso_map (x', y') = (x, y) where
    x_powers = [_F.field_unit] # [_F.mul(x', xi) | xi <- x_powers]
    x_num = F_sum _F [_F.mul(ki, xi) | ki <- k1s | xi <- x_powers]
    x_den = _F.add (x_powers@2, F_sum _F [_F.mul(ki, xi) | ki <- k2s | xi <- x_powers])
    y_num = F_sum _F [_F.mul(ki, xi) | ki <- k3s | xi <- x_powers]
    y_den = _F.add (x_powers@3, F_sum _F [_F.mul(ki, xi) | ki <- k4s | xi <- x_powers])
    x = _F.div (x_num, x_den)
    y = _F.mul (y', _F.div(y_num, y_den))

to_Fp2: ([384], [384]) -> P::t_Fp_2
to_Fp2 (a,b) = [to_Fp b, to_Fp a] // a+b*I

k1s = map to_Fp2 
   [ (0x05c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6,
      0x05c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6)

    , (0,
       0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a)

    , (0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e,
       0x08ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d)

    , (0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1, 0)
    ]

k2s = map to_Fp2
    [ (0, 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63),
       (zext 0xc,
        0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f) ]

k3s = map to_Fp2
    [ (0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706,
       0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706)

    , (0, 0x05c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be)

    , (0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c,
       0x08ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f)

    , (0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10, 0)
    ]


k4s = map to_Fp2
    [ (0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb,
       0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb)

    , (0, 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3)

    , (zext 0x12,
       0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99)
    ]
