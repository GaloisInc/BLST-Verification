/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/
// Three representation of a finite field with p elements, where p is prime.
//
// The first uses Integers, the second the modular type `Z n`, and 
// the third uses bit vectors.
//
// In the second, then, "p" is a type parameter, while in the other two it
// is a value parameter.

module PrimeField where

import Common::Field
import Common::ModDivZ
import Common::mod_arith

/**
 * A finite field with a prime number of elements, represented
 * using Integers
 *
 * The constructor does not check that `p` is prime, so the caller should.
 */
prime_field_integer: Integer -> FieldRep Integer
prime_field_integer p =
    { is_val x = 0 <= x /\ x < p
    , normalize x = x % p
    , add (x, y) =  mod_add_Z (p,x,y)
    , sub (x, y) = mod_sub_Z (p,x,y)
    , neg x = mod_neg_Z (p,x)
    , mul (x,y) = mod_mul_Z (p,x,y)
    , sq x = mod_sq_Z (p, x)
    , half x = mod_half_Z (p,x)
    , div (x,y) = mod_div_Z (p,x,y)
    , field_zero = 0
    , field_unit = 1
    , is_equal (x, y) = x==y
    }

mod_add_Z: (Integer,Integer,Integer) -> Integer
mod_add_Z (p,x,y) = (x + y) % p

mod_sub_Z: (Integer,Integer,Integer) -> Integer
mod_sub_Z (p,x,y) = (x - y) % p

mod_mul_Z: (Integer,Integer,Integer) -> Integer
mod_mul_Z (p,x,y) = (x * y) % p

mod_neg_Z: (Integer,Integer) -> Integer
mod_neg_Z (p, x) = (-x)%p

mod_sq_Z: (Integer,Integer) -> Integer
mod_sq_Z (p,x) = mod_mul_Z (p, x, x)

mod_half_Z: (Integer,Integer)-> Integer
mod_half_Z (p, x) = if (x%2==0) then x/2 else (x+p)/2

/* Not "obviously terminating" 
mod_pow_Z: (Integer,Integer,Integer) -> Integer
mod_pow_Z (p, x, e) = mod_pow_loop (x, e%(p-1)) where // handles negative exponents, x^(p-1) = 1 or 0
  mod_pow_loop (b, e') =
    if e' == 0 then 1
     | (e'%2) == 0 then mod_pow_loop (mod_sq_Z (p, b), e'/2)
    else mod_mul_Z (p, b, mod_pow_loop (mod_sq_Z (p, b), e'/2))
*/

/* Returns x/y in F_p using Euler's binary gcd algorithm. */
/* Taken from [HMV] */
mod_div_Z : (Integer,Integer,Integer) -> Integer
mod_div_Z (p,x,y) = egcd(p,0,y%p,x%p)
  where
    /* In code below, a is always odd. */
    egcd(a,ra,b,rb) =
      if b == 0 then
        ra
      else if (b % 2) == 0 then /* b is even. */
        egcd(a, ra, b / 2, mod_half_Z(p, rb))
      else if a < b then
        egcd(a, ra, (b - a) / 2, mod_half_Z (p, (rb-ra)%p))
      else
        egcd(b, rb, (a - b) / 2, mod_half_Z (p, (ra-rb)%p))


/**
 * A finite field with a prime number of elements, represented
 * using modular types: `prime_field`k is represented with type `Z k`.
 *
 * The constructor does not check that `k` is prime, so the caller should.
 */
prime_field: {k} (fin k, k >= 3, k > 2*(k/2)) =>  FieldRep (Z k)
prime_field =
    { is_val x = True
    , normalize x = x
    , add (x, y) = x + y
    , sub (x, y) = x - y
    , neg x = -x
    , mul (x,y) = x*y
    , sq x = x*x
    , half x = moddiv x 2
    , div (x,y) = moddiv x y
    , field_zero = 0
    , field_unit = 1
    , is_equal (x, y) = x==y
    }


/**
 * A finite field with a prime number of elements, represented using
 * bit-vector types: `prime_field (k:[n])` is represented with type `[n]`.
 *
 * The constructor does not check that `m` is prime, so the caller should.
 */
prime_field_bv: {n} (fin n, n >= 1) => [n] -> FieldRep [n]
prime_field_bv m =
    { is_val x = x < m
    , normalize x = (x % m)
    , add (x, y) = mod_add (m,x,y)
    , sub (x, y) = mod_sub (m,x,y)
    , neg x = mod_neg (m, x)
    , mul (x,y) = mod_mul (m, x, y)
    , sq x = mod_mul (m, x, x)
    , half x = mod_half (m, x)
    , div (x,y) = mod_div (m, x, y)
    , field_zero = 0
    , field_unit = 1
    , is_equal (x, y) = x==y // does this need to handle unnormalized values?
    }
