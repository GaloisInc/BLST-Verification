/*
 * Copyright (c) 2021 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

module implementation::CoreVerifyPKInG1 where

import Parameters (Fp_12, t_Fp, t_Fp_2, BP, E')
import ShortWeierstrassCurve (AffinePoint, affinify)
import implementation::PairingImpl (miller_loop_opt)
import implementation::HashToG2 (hash_to_curve_E2_opt_impl)
import implementation::FinalExp (final_exponentiation_impl)
import implementation::PairingImpl (miller_loop_opt_checked)
import ExpandMessage
import Frobenius (fp12_conjugate)
import HashToCurveE2

core_verify_pk_in_g1_impl : {msg_len,dst_len,aug_len}
  (fin msg_len, fin dst_len, fin aug_len
  , Expandable (msg_len+aug_len) dst_len
  , dst_len <= 255) =>
  AffinePoint t_Fp -> AffinePoint t_Fp_2 -> [msg_len][8] -> [dst_len][8] -> [aug_len][8] -> Bool

core_verify_pk_in_g1_impl pk sig msg dst aug = Fp_12.is_equal(gt, Fp_12.field_unit) where
    Q = affinify E' (hash_to_curve_E2_opt_impl (aug#msg, dst))
    gtPQ = miller_loop_opt_checked pk Q
    gtSig = fp12_conjugate (miller_loop_opt_checked BP sig)
    gt = final_exponentiation_impl (Fp_12.mul (gtSig, gtPQ))

core_verify_pk_in_g1 : {msg_len,dst_len,aug_len}
  (fin msg_len, fin dst_len, fin aug_len
  , Expandable (msg_len+aug_len) dst_len
  , dst_len <= 255) =>
  AffinePoint t_Fp -> AffinePoint t_Fp_2 -> [msg_len][8] -> [dst_len][8] -> [aug_len][8] -> Bool

core_verify_pk_in_g1 pk sig msg dst aug = Fp_12.is_equal(c1, c2) where
    c1 = bls_ate_pairing pk (hash_to_curve (aug#msg, dst))
    c2 = bls_ate_pairing BP sig
