/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/


// Implementation types for blst
//

module implementation::Types where

type Vec256 = [4][64]
type Vec384 = [384]
//type Vec384 = [6][64]
type Vec512 = [8][64]
type Vec768 = [768]
//type Vec768 = [12][64]
type Pow256 = [32][8]
type Limb = [64]
type Size_t = [64]

// Vectors represent numbers, using a little-endian representation

/**
 * The integer (bitvector) represented by a vector (Vec256, Vec384, ...)
 */
//vec_abs: {n} (fin n) => [n*64] -> [n*64]
//vec_abs x = x
vec_abs: {n} (fin n) => [n]Limb -> [n*64]
vec_abs limbs = join (reverse limbs)

vec256_abs = vec_abs`{256/64}
vec384_abs : Vec384 -> Vec384
vec384_abs x = x
//vec384_abs = vec_abs`{384/64}
vec512_abs = vec_abs`{512/64}
vec768_abs : Vec768 -> Vec768
vec768_abs x = x
//vec768_abs = vec_abs`{768/64}

/**
 * A vector representing a given (bitvector) integer.  The integer should be non-negative.
 */
//vec_rep: {n} (fin n) => [n*64] -> [n*64]
//vec_rep x = x
vec_rep:  {n} (fin n) => [n*64] -> [n]Limb
vec_rep x = reverse (split x)

vec256_rep = vec_rep`{256/64}
vec384_rep : Vec384 -> Vec384
vec384_rep x = x
//vec384_rep = vec_rep`{384/64}
vec768_rep : Vec768 -> Vec768
vec768_rep x = x
//vec768_rep = vec_rep`{768/64}

/**
 * Represent a Boolean as a limb, with value 1 for true, 0 for false
 */
bool_to_limb: Bool -> Limb
bool_to_limb b = if b then (1:Limb) else 0

select: {t} t -> t-> Bit -> t
select a b c = if c then a else b

// "Scalars" represent integers as a sequence of bytes, and allow for the
// the exact number of used bits to be given
// The bytes are in little-endian order

scalar_to_integer: {n} (fin n, n >= 1, n <= 2^^60) => [n][8] -> Limb -> Integer
scalar_to_integer bytes n_bits = vs!0 where
    bits = join (reverse bytes)
    vs = [0] # [ if j < n_bits then 2*v + (if b then 1 else 0) else 0
               | b <- bits // bits from the MSB down
               | j <- reverse [0 .. 8*n - 1] // bit number
               | v <- vs ] // accumulated value
