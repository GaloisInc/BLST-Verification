/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/
module implementation::Keygen where

// Definitions needed for the code proof of blst_keygen

import Parameters as P
import Primitive::Keyless::Hash::SHA256
import Primitive::Symmetric::KDF::HKDF256
import rfc8017

import Common::bv

import implementation::Types
import implementation::Field

// Implementation types - now in implementation::Types
//
/*
type Vec256 = [4][64]
type Vec384 = [6][64]
type Vec512 = [8][64]

type Limb = [64]

type Pow256 = [32][8]

// Vectors represent numbers, using a little-endian representation

/**
 * The integer represented by a vector (Vec256, Vec384, ...)
 */
vec_abs: {n} (fin n) => [n]Limb -> [n*64]
vec_abs limbs = join (reverse limbs)

vec256_abs x = vec_abs`{256/64} x
vec512_abs = vec_abs`{512/64}

/**
 * A vector representing a given integer.  The integer should be non-negative.
 */
vec_rep:  {n} (fin n) => [n*64] -> [n]Limb
vec_rep x = reverse (split x)

vec256_rep x = vec_rep`{256/64} x
*/

// Pow256 uses a little-endian representation

pow256_abs: Pow256 -> [256]
pow256_abs x = join (reverse x)

// for Montgomery mod r

r_modulus = toInteger P::r // 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001 // r

r_R = 2^^256

r_R_inv = toInteger 0x1bbe869330009d577204078a4f77266aab6fca8f09dc705f13f75b69fe75c040

r_RR = 2^^512

// Montgomery representation of values; Integer form

r_R_reduced = r_R % r_modulus
r_RR_reduced = r_RR % r_modulus
r_R_inv_reduced = r_R_inv % r_modulus

r_to_mont x = (x*r_R) % r_modulus

r_from_mont x = (x*r_R_inv) % r_modulus

r_add_mont x y = (x+y) % r_modulus

r_mul_mont x y = (x*y*r_R_inv) % r_modulus

property keygen_finish_integer x = r_mul_mont (r_from_mont x) (2^^512 % r_modulus) == (x % r_modulus)

// ... and bitvector form

bv_r = (fromInteger r_modulus):[256] // = 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
bv_R = (fromInteger r_R_reduced):[256]
bv_R_inv = (fromInteger r_R_inv):[256] // = 0x1bbe869330009d577204078a4f77266aab6fca8f09dc705f13f75b69fe75c040
bv_RR = (fromInteger r_RR_reduced):[256]

mul_mont_r_bv: [256] -> [256] -> [256]
mul_mont_r_bv a b = safe_mod (bv_r, safe_product (zext a, safe_product (b, bv_R_inv)))

redc_r_bv: [512] -> [256]
redc_r_bv x = safe_mod (bv_r, safe_product (x, zext bv_R_inv))

property keygen_finish_bv x =
  safe_mod (bv_r, x) == mul_mont_r_bv (redc_r_bv x) bv_RR

// concretized versions

// r_modulus_rep = 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001

mul_mont_256_rep: Vec256 -> Vec256 -> Vec256
mul_mont_256_rep x y = vec256_rep (mul_mont_r_bv (vec256_abs x) (vec256_abs y))

r_redc_rep: Vec512 -> Vec256
r_redc_rep x = vec256_rep (redc_r_bv (vec512_abs x))

r_RR_rep: Vec256 // representing R^2 mod r
r_RR_rep = [14526898881837571181, 3129137299524312099, 419701826671360399, 524908885293268753]

// property p2 x = mul_mont_256_rep (from_mont_rep x) RR == (x % r_modulus_rep)

limbs_from_be_bytes_rep48: [48][8] -> [6]Limb
limbs_from_be_bytes_rep48 bytes = reverse (split (join bytes))

le_bytes_from_limbs_rep4: Vec256 -> Pow256
le_bytes_from_limbs_rep4 limbs = reverse (split (join (reverse limbs)))

property le_bytes_from_limbs_rep4_prop limbs =
    pow256_abs (le_bytes_from_limbs_rep4 limbs) == vec256_abs limbs

/**
 * KeyGen as implemented in the code
 */
KeyGenStep_rep: {IKM_len, info_len} (validHMACSizes 20 (1+IKM_len)
                                    , validHMACSizes 32 (35+info_len)
                                    ) =>
        [256] -> [IKM_len][8] -> [info_len][8] -> Vec256
KeyGenStep_rep salt IKM key_info = SK where
    type L = (3 * 256) /^ 16 // (ceil lg2 r) = 256, so L = 3*16=48
    PRK = HKDF_Extract (split salt) (IKM # [0]) // I2OSP`{xLen=1} 0)
    OKM = HKDF_Expand`{L=L} PRK (key_info # I2OSP`{xLen=2} `L)
    OKM_vec = (limbs_from_be_bytes_rep48 OKM) # [0,0]
    SK = mul_mont_256_rep (r_redc_rep OKM_vec) r_RR_rep

KeyGenLoop_rep: {IKM_len, info_len} (validHMACSizes 20 (1+IKM_len)
                                    , validHMACSizes 32 (35+info_len)
                                    ) =>
        [256] -> [IKM_len][8] -> [info_len][8] -> [inf]Vec256
KeyGenLoop_rep salt IKM info = keys where
    salts = [salt] # [sha salt' | salt' <- salts]
    keys = [zero] #
           // hang on to a nonzero key, try again with revised salt otherwise
           [if k == zero then key_gen_step salt' else k | k <- keys | salt' <- salts]
    key_gen_step s = KeyGenStep_rep s IKM info

KeyGen_rep: {IKM_len, info_len} ( validHMACSizes 20 (1+IKM_len)
                                , validHMACSizes 32 (35+info_len)
                                ) =>
        ([IKM_len][8], [info_len][8]) -> Pow256
KeyGen_rep (IKM, key_info) = le_bytes_from_limbs_rep4 SK_vec where
    SK_vec = (KeyGenLoop_rep (sha (join "BLS-SIG-KEYGEN-SALT-")) IKM key_info) @ 4
