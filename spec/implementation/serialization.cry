module implementation::serialization where

import Parameters (p, E, E', t_Fp, to_Fp, t_Fp_2, Fp, Fp_2)
import ShortWeierstrassCurve as EC
import rfc8017
import Maybe
import FieldExtras (F_expt)
import BLSFieldExtras
import implementation::Types
import implementation::Field

uncompress_E1_x: [48][8] -> [384]
uncompress_E1_x s_string = x where
    s_string' = [(s_string@0) && 0x1F] # tail s_string
    // Step 6
    x = join s_string' // OS2IP(s_string')

uncompress_E1_x_fp: [48][8] -> t_Fp
uncompress_E1_x_fp s_string =
    Fp.mul (fp_abs (vec384_rep (uncompress_E1_x s_string)), montgomery_factor_p)

uncompress_E1_y2: [48][8] -> t_Fp
uncompress_E1_y2 s_string = y2 where
    // x = to_Fp (uncompress_E1_x s_string)
    x = Fp.mul ( fp_abs (vec384_rep (uncompress_E1_x s_string))
               , montgomery_factor_p) // we will prove this = to_Fp ...
    y2 = Fp.add (Fp.mul (Fp.sq x, x), 4)
