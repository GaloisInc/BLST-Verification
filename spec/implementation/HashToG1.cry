/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

import Parameters (Fp, t_Fp)
import ShortWeierstrassCurve (ProjectivePoint)
import BLSFieldExtras (sqrt_fp)
import ExpandMessage (Expandable)
import implementation::CurveOperation (point_dadd, point_add, point_double)
import HashToCurveE1
import HashToCurveE1Aux as Aux

// the SWU map

// Projective version of map_to_curve_simple_swu_3mod4:
map_to_curve_simple_swu_3mod4_impl : t_Fp -> ProjectivePoint t_Fp
map_to_curve_simple_swu_3mod4_impl u = (Fp.mul (xn, xd), Fp.mul (y, gxd), xd) where
  (xn, xd, y, _) = Aux::map_to_curve_simple_swu_3mod4 u
  gxd = Fp.mul(xd, Fp.sq xd) // xd^3

// This is what the implementation does:
map_to_curve_simple_swu_impl : t_Fp -> ProjectivePoint t_Fp
map_to_curve_simple_swu_impl u = res where
  c2 = sqrt (Fp.neg (Fp.mul (Fp.sq Z, Z))) // sqrt(-Z^3)

  // x numerator
  tv1 = Fp.sq u
  tv3 = Fp.mul (Z, tv1)
  tv2 = Fp.add (Fp.sq tv3, tv3)
  x1n = Fp.mul (Fp.add (tv2, Fp.field_unit), B')
  x2n = Fp.mul(tv3, x1n)

  // x denumerator
  xd = Fp.mul(Fp.neg A', tv2)
  e1 = Fp.is_equal(xd, Fp.field_zero)
  xd_b = if e1 then Fp.mul(Z, A') else xd

  // y numerator
  tv2_a = Fp.sq xd_b
  gxd = Fp.mul(xd_b, tv2_a)
  tv2_b = Fp.mul(A',  tv2_a)
  gx1 = Fp.sq x1n
  gx1_a = Fp.add(gx1, tv2_b)
  gx1_b = Fp.mul(gx1_a,  x1n)
  tv2_c = Fp.mul(B', gxd)
  gx1_c = Fp.add(gx1_b, tv2_c)
  tv4 = Fp.sq gxd
  tv2_d = Fp.mul (gx1_c, gxd)
  tv4_b = Fp.mul (tv4, tv2_d)
  y1 = Fp.div (Fp.field_unit, sqrt_fp tv4_b) // note this is an exponentiation in the spec
  e2 = Fp.is_equal (Fp.sq (Fp.mul (y1, tv4_b)), tv4_b) // this appears in the body of recip_sqrt
  y1_b = Fp.mul(y1, tv2_d)

  y2 = Fp.mul(y1_b, c2)
  y2_b = Fp.mul(y2, tv1)
  y2_c = Fp.mul(y2_b, u)

  xn = if e2 then  x1n else x2n
  y = if e2 then y1_b else y2_c

  y_a = if sgn0(u) != sgn0(y) then Fp.neg y else y

  // convert to Jacobian coordinates:
  res = (Fp.mul (xn, xd_b), Fp.mul (y_a, gxd), xd_b)

// isogeny_map_to_E1

isogeny_map_to_E1_impl: ProjectivePoint t_Fp -> ProjectivePoint t_Fp
isogeny_map_to_E1_impl (X, Y, Z) = to_jacobian xn xd yn yd where
  zzs = Zz_powers Z
  xn = map_fp (kzzs#[last Aux::k1s]) X where
    kzzs = map_fp_times_Zz`{n=11} Aux::k1s zzs
  xd = Fp.mul (xs, last zzs) where
    xs = map_fp ((take`{front=9}kzzs)#[xkzz9]) X
    xkzz9 = Fp.add (X, last kzzs)
    kzzs = map_fp_times_Zz`{n=10} Aux::k2s zzs
  yn = Fp.mul (map_fp (kzzs#[last Aux::k3s]) X, Y) where
    kzzs = map_fp_times_Zz`{n=15} Aux::k3s zzs
  yd = Fp.mul (Fp.mul (xs, Z), last zzs) where
    xs = map_fp ((take`{front=14}kzzs)#[xkzz14]) X
    xkzz14 = Fp.add (X, last kzzs)
    kzzs = map_fp_times_Zz`{n=15} Aux::k4s zzs

Zz_powers : t_Fp -> [15]t_Fp // powers of ZZ in descending order
Zz_powers Z = reverse (take`{front=15} zzs) where
    zzs = [Fp.sq Z, Fp.sq (Fp.sq Z)]
      # (join`{parts=inf} [[Fp.mul (zi0, zi1), Fp.sq zi1] | zi0 <- zzs | zi1 <- tail zzs]) // TODO: why is parts=inf necessary here?

map_fp_times_Zz : {m1,m2,n} (fin n, fin m2, m1 >= n, m2 >= n) => [m1]t_Fp -> [m2]t_Fp -> [n]t_Fp
map_fp_times_Zz ks zzs = zipWith (curry Fp.mul) (take`{front=n}ks) (drop`{back=n}zzs)

map_fp kzzs x = last rs where
  rs = [last kzzs] # [Fp.add (Fp.mul (ri, x), kzzi) | kzzi <- tail (reverse kzzs) | ri <- rs]

// NOTE: this does not follow jacobian_to_projective_pair in G2SubGroupCheck.cry
to_jacobian xn xd yn yd = (X, Y, Z) where
  Z = Fp.mul (xd, yd)
  X = Fp.mul (Fp.mul (xn, yd) , Z)
  Y = Fp.mul (Fp.mul (Fp.sq Z, xd) , yn)

// clear_cofactor

dbl_n_add: ProjectivePoint t_Fp -> Integer -> ProjectivePoint t_Fp -> ProjectivePoint t_Fp
dbl_n_add out n p = point_dadd Fp (db n out) p Fp.field_zero True where
  db: Integer -> ProjectivePoint t_Fp -> ProjectivePoint t_Fp
  db k x =
    if k == 1 then point_double Fp x
    else point_double Fp (db (k-1) x)

clear_cofactor_impl: ProjectivePoint t_Fp -> ProjectivePoint t_Fp
clear_cofactor_impl p = out where
  out1 = point_double Fp p
  out2 = point_add Fp out1 p // NOTE: this is okay because (point_double p) != p or both are point_O
  out3 = dbl_n_add out2 2 p
  out4 = dbl_n_add out3 3 p
  out5 = dbl_n_add out4 9 p
  out6 = dbl_n_add out5 32 p
  out = dbl_n_add out6 16 p

// hash_to_curve

hash_to_curve_opt_impl: {msg_len, DST_len}
               (fin msg_len, fin DST_len
               , DST_len <= 255
               , Expandable msg_len DST_len
               , 8 *( ((lg2 p) + 128) /^ 8 ) >= 384
               ) =>
               ([msg_len][8], [DST_len][8]) -> ProjectivePoint t_Fp
hash_to_curve_opt_impl (msg,dst) = map_to_g1_impl u where
    u = hash_to_field`{count=2} msg dst

map_to_g1_impl: [2]t_Fp -> ProjectivePoint t_Fp
map_to_g1_impl uv = P where
    Q0 = map_to_curve_simple_swu_impl (uv@0)
    Q1 = map_to_curve_simple_swu_impl (uv@1)
    R = point_dadd Fp Q0 Q1 A' False // This is addition on the isogenous curve E'
    S = isogeny_map_to_E1_impl R
    P = clear_cofactor_impl S
