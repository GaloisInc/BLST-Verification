/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/
module FieldExtras where

import Common::Field

/**
 * Sum of a list of field elements
 */
F_sum: {t, n} (fin n) => FieldRep t -> [n]t -> t
F_sum F vs = sums!0 where
    sums = [F.field_zero] # [F.add (s, v) | s <- sums | v <- vs]

/**
 * Product of a list of field elements
 */
F_prod: {t, n} (fin n) => FieldRep t -> [n]t -> t
F_prod F vs = prods!0 where
    prods = [F.field_unit] # [F.mul (s, v) | s <- prods | v <- vs]

/**
 * F_expt F x e = x^e, computed in field F.
 */
F_expt: {t, n} (fin n) => FieldRep t -> t -> Integer -> t
F_expt F x e = powers ! 0 where
    powers = [F.field_unit] #
             [if b then F.mul (x, F.sq p) else F.sq p | p <- powers | b <- ((fromInteger e):[n])]

/**
 * Is a field element zero?
 */
F_is_zero: {t} FieldRep t -> t -> Bit
F_is_zero F x = F.is_equal (x, F.field_zero)

private
    kth_square: {k, t} (fin k, k>=1) => FieldRep t -> t -> t
    kth_square F x = squares@(`k) where
        squares = [x] # [F.sq y | y <- squares]

/**
 * k_expt`{k} F b e computes b^e in field f, using `k` bits of the exponent at a time.
 * This is not exactly Brauer's "2^k-ary" method, but is close.
 * This can be more efficient than the formal `F_expt` function that uses the convential
 * "square-and-multiply" algorithm.
 */
k_expt: {k, n, t} (fin k, fin n, k>=1, n>=1) => FieldRep t -> t -> [n*k] -> t
k_expt F b e = acc!0 where
    digits: [n][k]
    digits = split e
    small_powers = [F.field_unit] # [F.mul(b, sp) | sp <- small_powers] // 1, b, b^2, ...
    acc = [small_powers@(digits@0)] # [F.mul(small_powers@d, kth_square`{k} F a) | a <- acc | d <- tail digits]

// Multiplication by small constants

mul_by_2: {t} FieldRep t -> t -> t
mul_by_2 F x = F.add (x,x)

mul_by_3: {t} FieldRep t -> t -> t
mul_by_3 F x = F.add (x, F.add (x, x))

mul_by_4: {t} FieldRep t -> t -> t
mul_by_4 F x = mul_by_2 F (mul_by_2 F x)

mul_by_6: {t} FieldRep t -> t -> t
// mul_by_6 F x = F.add (y, F.add (y, y)) where y = mul_by_2 F x
mul_by_6 F x = mul_by_3 F (mul_by_2 F x)

mul_by_8: {t} FieldRep t -> t -> t
mul_by_8 F x = x8 where
  x2 = F.add (x, x)
  x4 = F.add (x2, x2)
  x8 = F.add (x4, x4)
