/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

// Point serialization, from draft-irtf-cfrg-pairing-friendly-curves-07
// Appendix C
//
module Serialization where

import Parameters (p, E, E', t_Fp, to_Fp, t_Fp_2, Fp, Fp_2)
import ShortWeierstrassCurve as EC
import rfc8017
import Maybe
import FieldExtras (F_expt)
import BLSFieldExtras (sqrt_fp, is_square_fp, sqrt_fp2, is_square_fp2)

//// Serialization (with compression)

sign_F_p: t_Fp -> Bit
sign_F_p y = y > `((p - 1)/2)

sign_F_p_2: t_Fp_2 -> Bit
sign_F_p_2(y') = if y'_1 == 0 then sign_F_p(y'_0) else y'_1 > `((p - 1)/2) where
    [y'_1, y'_0] = y'

metadata_bits_E1:  EC::AffinePoint t_Fp -> [3]
metadata_bits_E1 P = [C_bit, I_bit, S_bit] where
    C_bit = True
    I_bit = EC::is_point_O E P
    S_bit = if I_bit then False else sign_F_p y where (_,y) = P

m_byte_E1: EC::AffinePoint t_Fp -> [8]
m_byte_E1 P = (metadata_bits_E1 P) # zero

x_string_E1: EC::AffinePoint t_Fp -> [48][8]
x_string_E1 P = if EC::is_point_O E P
                then I2OSP(0)
                else I2OSP(x) where (x,_) = P

// See the note about the order of the x_i below, in deserialize_E2
x_string_E2: EC::AffinePoint t_Fp_2 -> [96][8]
x_string_E2 P = if EC::is_point_O E' P
                then I2OSP(0)
                else I2OSP`{xLen=48}(x_1) # I2OSP(x_0) where ([x_1, x_0],_) = P

serialize_E1: EC::AffinePoint t_Fp -> [48][8]
serialize_E1 P = x_string_E1 P || ([m_byte_E1 P]# zero)

serialize_E2: EC::AffinePoint t_Fp_2 -> [96][8]
serialize_E2 P = x_string_E2 P || ([m_byte]# zero) where
    C_bit = True
    I_bit = EC::is_point_O E' P
    S_bit = if I_bit then False else sign_F_p_2 y where (_,y) = P
    m_byte = [C_bit, I_bit, S_bit] # zero

//// Deserialization
// Strictly speaking, we should be able to deserialize an uncompressed representation,
// but the suites we look at all use compression.

// TODO: we need [96][8] because if the infinity bit is set, we must check all 96 bytes (except first 3 bits) are zero. We could also have a separate uncompress function.
// the C code can take a 96 bytes array whose last 48 are unintialized
// we deviate from the RFC: the RFC says "if the string has length...", but in the C code there's no concept of length of the string

deserialize_E1: [96][8] -> Maybe (EC::AffinePoint t_Fp)
deserialize_E1 s_string = ret where
    // Step 1.
    m_byte = (s_string@0) && 0xE0 // three highest bits
    C_bit = m_byte @ 0
    I_bit = m_byte @ 1
    S_bit = m_byte @ 2
    // Step 2 deferred (we check that C_bit is 1 later)
    // Step 3
    s_string' = take`{front=48} ([(s_string@0) && 0x1F] # tail s_string) // the last 48 bytes may be uninitialized for a compressed point. TODO should we assume they're zero? doesn't seem to make sense (extra work for the caller)
    // Step 6
    x = OS2IP(s_string')
    //Step 7 (on curve E)
    y2 = Fp.add (Fp.mul (x, Fp.sq x), 4)
    y = sqrt_fp y2
    Y_bit = sign_F_p y
    // Steps 2, 4, 8
    ret = if C_bit == False then nothing // Error, from Step 2; TODO what if I_bit is set? We could still return inf
           | I_bit then (if s_string' == zero then just (EC::point_O E) else nothing) // Step 4
           | ~ (is_square_fp y2) then nothing // from Step 7
           | S_bit == Y_bit then just (x,y)
          else just (x, Fp.neg y)

// draft-irtf-cfrg-bls-signature-04 specifies that the compressed representation is used for BLST
uncompress_E1: [48][8] -> Maybe (EC::AffinePoint t_Fp)
uncompress_E1 s_string = ret where
    // Step 1.
    m_byte = (s_string@0) && 0xE0 // three highest bits
    C_bit = m_byte @ 0
    I_bit = m_byte @ 1
    S_bit = m_byte @ 2
    // Step 2 deferred (we check that C_bit is 1 later)
    // Step 3
    s_string' = [(s_string@0) && 0x1F] # tail s_string
    // Step 6
    x = OS2IP(s_string')
    // TODO here the C implementation checks that x is smaller than the modulus
    //Step 7 (on curve E)
    y2 = Fp.add (Fp.mul (x, Fp.sq x), 4)
    y = sqrt_fp y2
    Y_bit = sign_F_p y
    // Steps 2, 4, 8
    ret = if (m_byte == 0x20 ) || (m_byte == 0x60) || (m_byte == 0xE0) then nothing
           | C_bit == False then nothing // Error, from Step 2
           | I_bit then (if s_string' == zero then just (EC::point_O E) else nothing) // Step 4
           | ~ (is_square_fp y2) then nothing // from Step 7
           | S_bit == Y_bit then just (x,y)
          else just (x, Fp.neg y)

deserialize_E2: [96][8] -> Maybe (EC::AffinePoint t_Fp_2)
deserialize_E2 s_string = ret where
    // Step 1.
    m_byte = (s_string@0) && 0xE0
    C_bit = m_byte @ 0
    I_bit = m_byte @ 1
    S_bit = m_byte @ 2
    // Step 2 deferred (we check that C_bit is 1 later)
    // Step 3
    s_string' = [(s_string@0) && 0x1F] # tail s_string
    // Step 6
    // Section 2.5 of draft-irtf-cfrg-pairing-friendly-curves-07 suggests this should be:
    //     x = map to_Fp (reverse (split`{parts=2} (OS2IP`{a=[2*384]}(s_string'))))
    // HOWEVER, the  cited ZCash scheme, and personal communications from R Wahby disagree:
    // we do not reverse the order of the parts.  So:
    x = map to_Fp (split`{parts=2} (OS2IP`{a=[2*384]}(s_string')))
    //Step 7 (on curve E')
    y2 = Fp_2.add (Fp_2.mul (x, Fp_2.sq x), [4,4]) // TODO: make the constant look nicer
    y = sqrt_fp2 y2
    Y_bit = sign_F_p_2 y
    // Steps 2, 4, 8
    ret = if m_byte == 0x20 \/ m_byte == 0x60 \/ m_byte == 0xE0 then nothing // Error, from Step 1
           | C_bit == False then nothing // Error, from Step 2
           | I_bit then (if s_string' == zero then just (EC::point_O E') else nothing) // Step 4
           | ~ (is_square_fp2 y2) then nothing // from Step 7
           | S_bit == Y_bit then just (x,y)
          else just (x, Fp_2.neg y)
