/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

// Definitions from draft-irtf-cfrg-bls-signature-04
//
// That specification describes a number of "parameters" that are used in its
// definitions, and later defines ciphersuites that instantiate those parameters.
//
// This module defines the specification in terms of the parameters, using a Cryptol
// parameterized module.  The instantiations are done in separate Crytpol files,
// as required by the language.

module BLSGeneric where

import Common::Field (FieldRep)
import ShortWeierstrassCurve as EC
import Parameters as P
import Maybe
import Primitive::Keyless::Hash::SHA256
import Primitive::Symmetric::KDF::HKDF256
import rfc8017

// Section 2.2, "parameters"

parameter
    // signature variant: not needed in the formalization

    // a pairing-friendly elliptic curve
    type t_F: * // representation type for field of the primary curve (signature)
    type t_F': * // representation type for field of the secondary curve (pubkey)
    type t_G: * // representation type for field of the pairing result
    G: FieldRep t_G

    // TODO: need equality for t_G  WHY?
    type constraint Eq t_G
    type constraint Zero t_G  // For Maybe t_G

    type pubkey_len: #
    type signature_len: #

    main_curve: EC::EllipticCurve t_F
    other_curve: EC::EllipticCurve t_F'

    // H, a hash function, is always HKDF, so not listed here

    // hash_to_point
    // TODO: why is this not working?
    // type DST_len: #
    DST: [43][8]

    hash_to_point: {msg_len} (Hashable msg_len) =>
               [msg_len][8] -> EC::AffinePoint t_F

    // other primitives "determined by the above parameters"

    P: EC::AffinePoint t_F' // base point
    // r -- is fixed in both BLS variants  Should we use it here as a parameter anyway??

    pairing: (EC::AffinePoint t_F, EC::AffinePoint t_F') -> t_G

    point_to_pubkey: EC::AffinePoint t_F' -> [pubkey_len]
    point_to_signature: EC::AffinePoint t_F -> [signature_len]

    pubkey_to_point: [pubkey_len] -> Maybe (EC::AffinePoint t_F') // can fail
    signature_to_point: [signature_len] -> Maybe (EC::AffinePoint t_F) // can fail

    pubkey_subgroup_check: EC::AffinePoint t_F' -> Bool
    signature_subgroup_check: EC::AffinePoint t_F -> Bool

//type constraint Hashable msg_len = (msg_len <= 255, 61 >= width (69 + msg_len + DST_len))
type constraint Hashable msg_len = (msg_len <= 255, 61 >= width (69 + msg_len + 43))

// TODO: Better name.  And maybe use instead of DST throughout?
// TODO: Do I even need reexport_DST?
reexport_DST = DST

// TODO: Better name.  Maybe param should be _pubkey_subgroup_check and this
// should be pubkey_subgroup_check
reexport_pubkey_subgroup_check = pubkey_subgroup_check
reexport_signature_subgroup_check = signature_subgroup_check

// 2.3 KeyGen

// ... KeyGen has been moved to its own module, called KeyGen, as it does not depend
//     on the parameters.


// 2.4 SkToPk

// TODO: This was 256, but the BLST sk_to_pk spec drops the first bit, so I
// made it 255 to match.  Why do the parameter lengths differ?
sk_to_pk: [255] -> [pubkey_len]
sk_to_pk sk = point_to_pubkey (EC::mult other_curve sk P)


// 2.5 KeyValidate

// The spec says to return VALID or INVALID; here we use True for VALID
KeyValidate: [pubkey_len] -> Bool
KeyValidate pk = ret where
    xP = pubkey_to_point pk  // step 1
    ret = maybe_cases xP
            False // xP is None, step 2
            (\y ->   (~ (EC::is_point_O other_curve y)) // Step 3
                  /\ reexport_pubkey_subgroup_check y) // Step 4

// 2.6 CoreSign

/* CoreSign: {msg_len} (Hashable msg_len) => [256] -> [msg_len][8] -> [signature_len] */
/* CoreSign sk message = signature where */
// TODO: Same note about dropped first bit...
CoreSign: {msg_len} (Hashable msg_len) => ([255], [msg_len][8]) -> [signature_len]
CoreSign (sk, message) = signature where
    Q = hash_to_point message
    R = EC::mult main_curve sk Q
    signature = point_to_signature R

// 2.7 CoreVerify

CoreVerify: {msg_len} (Hashable msg_len) => [pubkey_len] -> [msg_len][8] -> [signature_len] -> Bool
/* possible alternate definition
CoreVerify(PK, message, signature) = maybe False step3 (signature_to_point signature) where // lines 1, 2
    step3 R = if signature_subgroup_check R == False then False // line 3
               |  KeyValidate PK == False then False // line 4
              else maybe False (step5 R) (pubkey_to_point PK) // line 5, but dealing with "maybe-ness"
    step5 R xP = C1 == C2 where // line 9
         Q = hash_to_point message // line 6
         C1 = pairing (Q, xP) // line 7
         C2 = pairing (R, P) // line 8
*/
CoreVerify PK message signature =
    maybe_cases (signature_to_point signature)
        False // lines 1,2
        (\ R -> if reexport_signature_subgroup_check R == False then False  // line 3
                |  KeyValidate PK == False then False // line 4
                else maybe_cases (pubkey_to_point PK)
                    False // line 5
                    (\ xP -> (C1 == C2 where // line 9
                              Q = hash_to_point message // line
                              C1 = pairing (Q, xP) // line 7
                              C2 = pairing (R, P)))) // line 8

CoreAggregateVerify: {n, msg_len} (fin n, Hashable msg_len) =>
                     [n][pubkey_len] ->
                     [n][msg_len][8] ->
                     [signature_len] ->
                     Bool
CoreAggregateVerify PKs messages signature =
    maybe_cases (signature_to_point signature)  // line 1
        False                                   // line 2
        (\R -> if reexport_signature_subgroup_check R == False
               then False  // line 3
               else (maybe_cases mC1 False (\C1 -> C1 == C2) where  // line 11
                     mC1 = aggregate_loop  // lines 4-9
                     C2 = pairing (R, P)))  // line 10
    where
        aggregate_loop: Maybe t_G
        aggregate_loop = C1s ! 0 where  // lines 4-9
            C1s = [just G.field_unit] # [ aggregate_loop_body PK message C1 |
                                          PK <- PKs |
                                          message <- messages |
                                          C1 <- C1s ]

        aggregate_loop_body: (Hashable msg_len) =>
                             [pubkey_len] ->
                             [msg_len][8] ->
                             Maybe t_G ->
                             Maybe t_G
        aggregate_loop_body PK message mC1 =
            maybe_cases mC1 nothing (\C1 ->
                if KeyValidate PK == False then nothing  // line 6
                else maybe_cases (pubkey_to_point PK)
                    nothing  // line 7
                    (\ xP -> (just (G.mul (C1, (pairing (Q, xP)))) where  // line 9
                              Q = hash_to_point message)))  // line 8
