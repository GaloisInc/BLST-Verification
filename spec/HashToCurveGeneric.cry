/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/
// Hash-to-curve for BLS
// Two variants are used:
// BLS12381G1_XMD:SHA-256_SSWU_RO_ and  BLS12381G2_XMD:SHA-256_SSWU_RO_

module HashToCurveGeneric where

import rfc8017 (I2OSP, OS2IP)
import Primitive::Keyless::Hash::SHA256 as SHA256
import Common::Field
import Parameters (t_Fp, Fp, to_Fp)
import FieldExtras
import ShortWeierstrassCurve as EC
import ExpandMessage
import Common::bv

// NOTE: we use the trick described below around limitations of the Cryptol module system
// https://github.com/GaloisInc/cryptol/issues/1092

parameter
    type _p: # // the field characteristic
    type constraint fin _p
    type constraint width _p <= 384 // because we have already specialized to BLS12-381 below

    type _q: # // the number of elements in the field
    type constraint fin _q

    type _t_F: * // a type representing field elements in the extension
    _F: FieldRep _t_F // the field operatons, in the extension field

    type _m: # // extension degree
    type constraint fin _m

    // various constraints thrown up by the type checker
    type constraint 8 * ((128 + lg2 p) /^ 8) >= 384
    type constraint 2 * m <= 127

    // Convert a list of elements of F_p to an element of F_q
    _base_to_F: [m]t_Fp -> _t_F

    // The curve (will be E1 or E2)
    _C: EC::EllipticCurve _t_F

    _clear_cofactor: (_t_F, _t_F) -> (_t_F, _t_F) // EC::AffinePoint t_F -> EC::AffinePoint t_F

    // additional field operations
    _is_square: _t_F -> Bool
    _sqrt: _t_F -> _t_F
    _sgn0: _t_F -> Bit // 0 or 1
    _inv0: _t_F -> _t_F

    // for map_to_curve_simple_swu for AB=0
    _Z: _t_F
    _A': _t_F
    _B': _t_F
    _iso_map: (_t_F, _t_F) -> (_t_F, _t_F)

type p = _p
type q = _q
type t_F = _t_F
F: FieldRep t_F // the field operatons, in the extension field
F = _F
type m = _m // extension degree
base_to_F = _base_to_F
C = _C
clear_cofactor = _clear_cofactor
is_square = _is_square
sqrt = _sqrt
sgn0 = _sgn0
inv0 = _inv0
Z = _Z
A' = _A'
B' = _B'
iso_map = _iso_map

// Section 3

// Note: added the dst as an extra parameter; the spec does not really fully determine it.

// random oracle encoding (hash_to_curve)
hash_to_curve: {msg_len, DST_len}
               (fin msg_len, fin DST_len
               , DST_len <= 255
               , Expandable msg_len DST_len
               , 2 * m <= 127 // Needed for expand_message, otherwise output too large
               // , 2 * m * ((128+lg2 p)/^ 8) <= 255 // output length of expand_message must be low enough
               , 8 *( ((lg2 p) + 128) /^ 8 ) >= 384 // needed for drop TODO: FIX
               ) =>
               ([msg_len][8], [DST_len][8]) -> EC::AffinePoint t_F
hash_to_curve (msg,dst) = P where
    u = hash_to_field`{count=2} msg dst // spec does not mention the dst here
    Q0 = map_to_curve_simple_swu_AB0 (u@0)
    Q1 = map_to_curve_simple_swu_AB0 (u@1)
    R = EC::add C Q0 Q1
    P = clear_cofactor R

// ... however, there is an alternative way of doing it, described in Section 6.6.3
// where points are added before the isogeny is applied

hash_to_curve_opt: {msg_len, DST_len}
               (fin msg_len, fin DST_len
               , DST_len <= 255
               , Expandable msg_len DST_len
               , 2 * m <= 127 // Needed for expand_message, otherwise output too large
               // , 2 * m * ((128+lg2 p)/^ 8) <= 255 // output length of expand_message must be low enough
               , 8 *( ((lg2 p) + 128) /^ 8 ) >= 384 // needed for drop TODO: FIX
               ) =>
               ([msg_len][8], [DST_len][8]) -> EC::AffinePoint t_F
hash_to_curve_opt (msg,dst) = P where
    u = hash_to_field`{count=2} msg dst // spec does not mention the dst here
    Q0 = map_to_curve_simple_swu (u@0) //, Z, A', B')
    Q1 = map_to_curve_simple_swu (u@1) //, Z, A', B')
    R = EC::add Isogenous_Curve Q0 Q1
    P = clear_cofactor (iso_map R)


// 5.2

hash_to_field: {msg_len, DST_len, count}
               (fin msg_len, fin DST_len, fin count
               , DST_len <= 255
               , Expandable msg_len DST_len
               , count * m <= 127 // Needed for expand_message, otherwise output too large
               , 8 *( ((lg2 p) + 128) /^ 8 ) >= 384 // needed for drop TODO: FIX
               ) =>
               [msg_len][8] -> [DST_len][8] -> [count]t_F

hash_to_field msg DST = us where
      type k = 128 // for BLS12-381
      type L = ((lg2 p) + k) /^ 8 // 64 for BLS12-381
      uniform_bytes: [count * m * L][8]
      uniform_bytes = expand_message msg DST
      // The double loop in the Draft just splits pseduo_random_bytes into
      // "count" parts, each part consisting of m sub_parts,
      // each sub-part consisting of L bytes.
      parts: [count][m][L][8]
      parts = split (split uniform_bytes)
      //
      us = [ make_u_i part | part <- parts ]
      make_u_i: [m][L][8] -> t_F
      // "drop" here takes the 8*L-bit (i.e. 512-bit for BLS12-381) result and drops leading zeros to get to [384]
      make_u_i part = base_to_F [to_Fp (drop`{back=384} ((join bytes) % `p)) | bytes <- part]

hash_to_field_1: {msg_len, DST_len}
               (fin msg_len, fin DST_len
               , DST_len <= 255
               , Expandable msg_len DST_len
               , 8 *( ((lg2 p) + 128) /^ 8 ) >= 384 // needed for drop TODO: FIX
               ) =>
               [msg_len][8] -> [DST_len][8] -> [384]
hash_to_field_1 msg DST = us where
      type L = 64
      uniform_bytes: [L][8]
      uniform_bytes = expand_message msg DST
      us = drop`{back=384} ((join uniform_bytes) % `p)

// 6.6.2 Simplified SWU

map_to_curve_simple_swu: t_F -> (t_F, t_F)
map_to_curve_simple_swu u = ret where
    //1. tv1 = inv0(Z^2 * u^4 + Z * u^2)
    tv1 = inv0 (F.add (F.mul (F.sq Z, F.sq (F.sq u)),
                       F.mul (Z, F.sq u)))
    //2. x1 = (-B / A) * (1 + tv1)
    //3. If tv1 == 0, set x1 = B / (Z * A)
    x1 = if F_is_zero F (tv1)
         then F.div (B', F.mul (Z, A'))
         else F.mul (F.div (F.neg B', A'), F.add(F.field_unit, tv1))
    // 4. gx1 = x1^3 + A * x1 + B
    gx1 = F.add (cube x1, F.add (F.mul (A', x1), B'))
    // 5. x2 = Z * u^2 * x1
    x2 = F.mul (Z, F.mul (F.sq u, x1))
    // 6. gx2 = x2^3 + A * x2 + B
    gx2 = F.add (cube x2, F.add (F.mul (A', x2), B'))
    // 7. If is_square(gx1), set x = x1 and y = sqrt(gx1)
    // 8. Else set x = x2 and y = sqrt(gx2)
    (x,y) = if is_square(gx1) then (x1, sqrt(gx1)) else (x2, sqrt(gx2))
    // 9. If sgn0(u) != sgn0(y), set y = -y
    // 10. return (x, y)
    ret = if sgn0(u) != sgn0(y) then (x, F.neg y) else (x,y)

    cube z = F.mul (z, F.sq z)

// 6.6.3, Simplified SWU for AB=0

map_to_curve_simple_swu_AB0(u) = (x, y) where
    (x', y') = map_to_curve_simple_swu (u) // (x', y') is on E'
    (x, y) = iso_map(x', y')               // (x, y) is on E

Isogenous_Curve: EC::EllipticCurve t_F
Isogenous_Curve = {base_field=F, a = A', b = B'}
