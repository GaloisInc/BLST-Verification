// Hash-to-curve for BLS
// Two variants are used:
// BLS12381G1_XMD:SHA-256_SSWU_RO_ and  BLS12381G2_XMD:SHA-256_SSWU_RO_

module HashToCurveGeneric where

import rfc8017 (I2OSP, OS2IP)
import Primitive::Keyless::Hash::SHA256 as SHA256
import Common::Field
import Parameters (t_Fp, Fp)
import FieldExtras
import ShortWeierstrassCurve as EC

parameter
    type p: # // the field characteristic
    type constraint fin p
    type constraint width p <= 384 // because we have already specialized t BLS12-381 below

    type q: # // the number of elements in the field
    type constraint fin q

    type t_F: * // a type representing field elements in the extension
    F: FieldRep t_F // the field operatons, in the extension field

    type m: # // extension degree
    type constraint fin m

    // various constraints thrown up by the type checker
    type constraint 8 * ((128 + lg2 p) /^ 8) >= 384
    //type constraint 2 * m * ((128 + lg2 p) /^ 8) <= 255
    type constraint 2 * m <= 127

    // Convert a list of elemebnts of F_p to an element of F_q
    base_to_F: [m]t_Fp -> t_F

    // The curve (will be E1 or E2)
    C: EC::EllipticCurve t_F

    clear_cofactor: (t_F, t_F) -> (t_F, t_F) // EC::AffinePoint t_F -> EC::AffinePoint t_F

    // additional field operations
    is_square: t_F -> Bool
    sqrt: t_F -> t_F
    sgn0: t_F -> [1] // 0 or 1
    inv0: t_F -> t_F

    // for map_to_curve_simple_swu for AB=0
    Z: t_F
    A': t_F
    B': t_F
    iso_map: (t_F, t_F) -> (t_F, t_F)

private
    // From Section 4. Utility Functions

    // For byte strings str1 and str2, strxor(str1, str2) returns the bitwise XOR of the two strings.
    strxor: {k} ([k][8],[k][8]) -> [k][8]
    strxor (s1, s2) = s1^s2

// Section 3

// Note: added the dst as an extra parameter; the spec does not really fully determine it.

// random oracle encoding (hash_to_curve)
hash_to_curve: {msg_len, DST_len}
               (fin msg_len, fin DST_len
               , DST_len <= 255
               , Expandable msg_len DST_len
               , 2 * m <= 127 // Needed for expand_message, otherwise output too large
               // , 2 * m * ((128+lg2 p)/^ 8) <= 255 // output length of expand_msg must be low enough
               , 8 *( ((lg2 p) + 128) /^ 8 ) >= 384 // needed for drop TODO: FIX
               ) =>
               ([msg_len][8], [DST_len][8]) -> EC::AffinePoint t_F
hash_to_curve (msg,dst) = P where
    u = hash_to_field`{count=2} (msg, dst) // spec does not mention the dst here
    Q0 = map_to_curve_simple_swu_AB0 (u@0)
    Q1 = map_to_curve_simple_swu_AB0 (u@1)
    R = EC::add C Q0 Q1
    P = clear_cofactor R

// ... however, there is an alternative way of doing it, described in Section 6.6.3
// where points are added before the isogeny is applied

hash_to_curve_opt: {msg_len, DST_len}
               (fin msg_len, fin DST_len
               , DST_len <= 255
               , Expandable msg_len DST_len
               , 2 * m <= 127 // Needed for expand_message, otherwise output too large
               // , 2 * m * ((128+lg2 p)/^ 8) <= 255 // output length of expand_msg must be low enough
               , 8 *( ((lg2 p) + 128) /^ 8 ) >= 384 // needed for drop TODO: FIX
               ) =>
               ([msg_len][8], [DST_len][8]) -> EC::AffinePoint t_F
hash_to_curve_opt (msg,dst) = P where
    u = hash_to_field`{count=2} (msg, dst) // spec does not mention the dst here
    Q0 = map_to_curve_simple_swu (u@0) //, Z, A', B')
    Q1 = map_to_curve_simple_swu (u@1) //, Z, A', B')
    R = EC::add Curve_E' Q0 Q1
    P = clear_cofactor (iso_map R)


// 5.2

hash_to_field: {msg_len, DST_len, count}
               (fin msg_len, fin DST_len, fin count
               , DST_len <= 255
               , Expandable msg_len DST_len
               , count * m <= 127 // Needed for expand_message, otherwise output too large
               , 8 *( ((lg2 p) + 128) /^ 8 ) >= 384 // needed for drop TODO: FIX
               ) =>
               ([msg_len][8], [DST_len][8]) -> [count]t_F

hash_to_field (msg, DST) = us where
      type k = 128 // for BLS12-381
      type L = ((lg2 p) + k) /^ 8
      uniform_bytes: [count * m * L][8]
      uniform_bytes = expand_msg (msg, DST)
      // The double loop in the Draft just splits pseduo_random_bytes into
      // "count" parts, each part consisting of m sub_parts,
      // each sub-part consisting of L bytes.
      parts: [count][m][L][8]
      parts = split (split uniform_bytes)
      //
      us = [ make_u_i part | part <- parts ]
      make_u_i: [m][L][8] -> t_F
      // "drop" here takes the 8*L-bit result and drops leading zeros to get to [384]
      make_u_i part = base_to_F [drop ((OS2IP`{a=[L*8]} bytes) % `p) | bytes <- part]

// 5.3

private
    // The Draft uses hash function H taking byte strings and outputting byte strings.
    // we therefore need some glue around SHA_256, which takes and returns bit strings.

    // "Hashable n" holds if [n][8] is an acceptable argument for H
    type constraint Hashable n = (61 >= width n)

    H: {n} (Hashable n) => [n][8] -> [32][8]
    H x = split (SHA256::sha (join x))


expand_msg = expand_msg_xmd // as per the chosen suites

// Due to the internal calls to H (SHA-256), there is a length limit on the inputs
// to this function.  In particular, for computing b_0 we give an argument of length
// r_in_bytes + len_msg + 2 + 1 + 1 + len_DST = 68 + len_msg + len_DST
//
// In Cryptol this is a type-checked condition rather than the "abort if" run-time check
// in the Draft.

type constraint Expandable len_msg len_DST  =  (61 >= width (69 + len_msg + len_DST))

expand_msg_xmd: {len_msg, len_DST, len_in_bytes}
                (fin len_msg
                , fin len_DST
                , len_DST <= 255
                , fin len_in_bytes
                , len_in_bytes /^ 32 <= 255
                , Expandable len_msg len_DST
                ) => ([len_msg][8], [len_DST][8]) -> [len_in_bytes][8]
expand_msg_xmd (msg, DST) = take uniform_bytes where
    //type b = 256                  // output length of SHA-256, in bits
    //type b_in_bytes = b /^ 8      // = 32
    type r_in_bytes = 64            // input block size of SHA-256
    // type ell = len_in_bytes /^ b_in_bytes
    // abort if ell > 255           // this is computed in the type constraint
    DST_prime = DST # (I2OSP`{xLen=1} (`len_DST)) // Changed from rev 6
    Z_pad = I2OSP`{xLen=r_in_bytes} (0)
    l_i_b_str = I2OSP`{xLen=2} (`len_in_bytes)
    msg' = Z_pad # msg # l_i_b_str # (I2OSP`{1} 0) # DST_prime
    b_0 = H (msg')
    b_1 = H (b_0 # (I2OSP`{xLen=1} 1) # DST_prime)
    bs = [b_1] # [H(strxor(b_0, b_prev) # (I2OSP`{xLen=1} i) # DST_prime) | b_prev <- bs | i:[8] <- [2...]]
    uniform_bytes = join bs

expand_b0: {len_msg, len_DST, len_in_bytes}
                (fin len_msg
                , fin len_DST
                , len_DST <= 255
                , fin len_in_bytes
                , len_in_bytes /^ 32 <= 255
                , Expandable len_msg len_DST
                ) => ([len_msg][8], [len_DST][8]) -> [32][8]
expand_b0 (msg, DST) = b_0 where
    type r_in_bytes = 64            // input block size of SHA-256
    DST_prime = DST # (I2OSP`{xLen=1} (`len_DST)) # [0x80]
    Z_pad = I2OSP`{xLen=r_in_bytes} (0)
    l_i_b_str = I2OSP`{xLen=2} (`len_in_bytes)
    b_0 = H (Z_pad # msg # l_i_b_str # (I2OSP`{1} 0) # DST_prime)

// 6.6.2 Simplified SWU

map_to_curve_simple_swu: t_F -> (t_F, t_F)
map_to_curve_simple_swu u = ret where
    //1. tv1 = inv0(Z^2 * u^4 + Z * u^2)
    tv1 = inv0 (F.add (F.mul (F.sq Z, F.sq (F.sq u)),
                       F.mul (Z, F.sq u)))
    //2. x1 = (-B / A) * (1 + tv1)
    //3. If tv1 == 0, set x1 = B / (Z * A)
    x1 = if F_is_zero F (tv1)
         then F.div (B', F.mul (Z, A'))
         else F.mul (F.div (F.neg B', A'), F.add(F.field_unit, tv1))
    // 4. gx1 = x1^3 + A * x1 + B
    gx1 = F.add (cube x1, F.add (F.mul (A', x1), B'))
    // 5. x2 = Z * u^2 * x1
    x2 = F.mul (Z, F.mul (F.sq u, x1))
    // 6. gx2 = x2^3 + A * x2 + B
    gx2 = F.add (cube x2, F.add (F.mul (A', x2), B'))
    // 7. If is_square(gx1), set x = x1 and y = sqrt(gx1)
    // 8. Else set x = x2 and y = sqrt(gx2)
    (x,y) = if is_square(gx1) then (x1, sqrt(gx1)) else (x2, sqrt(gx2))
    // 9. If sgn0(u) != sgn0(y), set y = -y
    // 10. return (x, y)
    ret = if sgn0(u) != sgn0(y) then (x, F.neg y) else (x,y)

    cube z = F.mul (z, F.sq z)

// 6.6.3, Simplified SWU for AB=0

map_to_curve_simple_swu_AB0(u) = (x, y) where
    (x', y') = map_to_curve_simple_swu (u) // (x', y') is on E'
    (x, y) = iso_map(x', y')               // (x, y) is on E


Curve_E': EC::EllipticCurve t_F
Curve_E' = {base_field=F, a = A', b = B'}
