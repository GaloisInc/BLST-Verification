/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

// hash_to_curve algorithm from draft-irtf-cfrg-hash-to-curve-09

module HashToCurveE1 = HashToCurveGeneric where

// NOTE: Our ExtensionField and Polynonial modules represents elements
// of extension fields as polynomials, and those as lists of elements
// of a base field in descending order by degree, so that [a,b,c]
// represents ax^2 + bx+c.
//
// Section 2.1 of the specification states that they are represented
// "in ascending order by degree" so that [a,b,c] represents a+bx +
// cx^2.  So we need reversals when transcribing the spec's defintions
// into our Cryptol model, whenever lists of elements are used. These are
// notes in the definitions belo0w

import Parameters as P
import FieldExtras
import ShortWeierstrassCurve as EC
import HashToCurveE1Aux as Aux

type _p = P::p // characteristic
type _q = P::p // cardinality
type _t_F = P::t_Fp // not really an extension
_F = P::Fp // the field
type _m = 1 // extension degree
_base_to_F [x] = x // trivial

_C = P::E // {base_field = F, a = _F.field_zero, b = P::b}

// dst = "SPEC_IS_NOT_VERY_CLEAR"

// extra field operations

_is_square x =  y == 0 \/ y == 1 where
    y = F_expt`{n=width _q} _F x `((_q-1)/2)

_sqrt = Aux::sqrt

_sgn0 = Aux::sgn0

_inv0 x = F_expt`{n=width _q} _F x `(_q-2) // but could be _F.div (_F.field_unit, x)

// Constants from Section 8.8.1
_Z = Aux::Z
_A' = Aux::A'
_B' = Aux::B'

_clear_cofactor P = EC::mult _C Aux::h_eff P

_iso_map: (_t_F, _t_F) -> (_t_F, _t_F)
_iso_map (x', y') = if EC::is_point_O _C (x',y') then EC::point_O _C else (x, y) where
    x_powers = [_F.field_unit] # [_F.mul(x', xi) | xi <- x_powers]
    x_num = F_sum _F [_F.mul(ki, xi) | ki <- Aux::k1s | xi <- x_powers]
    x_den = _F.add (x_powers@10, F_sum _F [_F.mul(ki, xi) | ki <- Aux::k2s | xi <- x_powers])
    y_num = F_sum _F [_F.mul(ki, xi) | ki <- Aux::k3s | xi <- x_powers]
    y_den = _F.add (x_powers@15, F_sum _F [_F.mul(ki, xi) | ki <- Aux::k4s | xi <- x_powers])
    x = _F.div (x_num, x_den)
    y = _F.mul (y', _F.div(y_num, y_den))
