/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

// Overrides needed for the elliptic curve arithmetic operations
// These are the basic field operations for Fp2.
// Here, we assume the specs, but eventually we will prove them
//

/*
  add_fp2, sub_fp2, sqr_fp2, mul_fp2, mul_by_3_fp2, mul_by_8_fp2
*/

// NOTE: must have included fp_overrides.saw before this

import "../spec/Parameters.cry";
import "../spec/PrimeField.cry";
import "../spec/FieldExtras.cry" (mul_by_2 mul_by_3 mul_by_4 mul_by_6 mul_by_8);
import "../spec/implementation/Field.cry";
import "../spec/implementation/CryptolHelpers.cry";

//let hoist f unints =
//  prove_cryptol {{\x y z -> f (if x then y else z) == if x then f y else f z}} unints;

////////////////////////////////////////////////////////////////
//
// Fp_2 operations
//

fp2_rep_thms <- for
  [ {{ \x -> fp2_invariant (fp2_rep x) == True }}
  , {{ \x -> fp2_abs (fp2_rep x) == Fp_2.normalize x }}
  , {{ \x -> fp2_rep (fp2_abs x) == if fp2_invariant x then x else fp2_normalize x }}
  ] admit_cryptol;

// a conditional rewrite for normalization.  This uses "apply" to avoid having
// "fp2_normalize x" in the right-hand side (we have "(apply fp2_normalize) x" instead),
// so that there is no infinite loop when the rewrite is applied.

// This rule is not included in the main fp_simplification rules as it is seldom needed.
fp2_normalize_thm <- admit_cryptol
  {{ \x -> fp2_normalize x == if fp2_invariant x then x else apply fp2_normalize x }};

fp2_abs_normalize_thm <- prove_cryptol
  {{ \x -> Fp_2.normalize x == if Fp_2.is_val x then x else apply Fp_2.normalize x }} [];
  
// hoisting if for rewrites to match
fp2_abs_ite_thm <- hoist {{fp2_abs}} ["fp2_abs"] ;
fp2_invariant_ite_thm <- hoist {{fp2_invariant}} [] ;
fp2_rep_ite_thm <- hoist {{fp2_rep}} ["fp2_rep"] ;

fp2_abstract_invariant_thm <- prove_cryptol {{ \x -> Fp_2.is_val (fp2_abs x) == True }} []; // TODO: doesn't seem needed for now

fp2_normalization_thms <- for
  // ... eliminate normalization in a argument position (maybe not needed?)
  [ {{ \ x y -> Fp_2.mul (Fp_2.normalize x, y) == Fp_2.mul (x, y) }}
  , {{ \ x y -> Fp_2.mul (x, Fp_2.normalize y) == Fp_2.mul (x, y) }}
  , {{ \ x   -> Fp_2.sq (Fp_2.normalize x) == Fp_2.sq x }}
  , {{ \ x y -> Fp_2.add (Fp_2.normalize x, y) == Fp_2.add (x, y) }}
  , {{ \ x y -> Fp_2.sub (x, Fp_2.normalize y) == Fp_2.sub (x, y) }}
  , {{ \ x y -> Fp_2.sub (Fp_2.normalize x, y) == Fp_2.sub (x, y) }}
  , {{ \ x y -> Fp_2.add (x, Fp_2.normalize y) == Fp_2.add (x, y) }}
  , {{ \ x   -> Fp_2.neg (Fp_2.normalize x) == Fp_2.neg x }}
  , {{ \ x   -> Fp_2.normalize (Fp_2.normalize x) == Fp_2.normalize x }}
  , {{ \x    -> mul_by_2 Fp_2 (Fp_2.normalize x) == mul_by_2 Fp_2 x }}
  , {{ \x    -> mul_by_3 Fp_2 (Fp_2.normalize x) == mul_by_3 Fp_2 x }}
  , {{ \x    -> mul_by_4 Fp_2 (Fp_2.normalize x) == mul_by_4 Fp_2 x }}
  , {{ \x    -> mul_by_6 Fp_2 (Fp_2.normalize x) == mul_by_6 Fp_2 x }}
  , {{ \x    -> mul_by_8 Fp_2 (Fp_2.normalize x) == mul_by_8 Fp_2 x }}
  // ... results are normalized
  , {{ \ x y -> Fp_2.normalize (Fp_2.mul (x, y)) == Fp_2.mul (x, y) }}
  , {{ \ x   -> Fp_2.normalize (Fp_2.sq x) == Fp_2.sq x }}
  , {{ \ x y -> Fp_2.normalize (Fp_2.add (x, y)) == Fp_2.add (x, y) }}
  , {{ \ x y -> Fp_2.normalize (Fp_2.sub (x, y)) == Fp_2.sub (x, y) }}
  , {{ \ x   -> Fp_2.normalize (Fp_2.neg x) == Fp_2.neg x }}
  , {{          Fp_2.normalize Fp_2.field_zero == Fp_2.field_zero }}
  , {{          Fp_2.normalize Fp_2.field_unit == Fp_2.field_unit }}
  , {{ \x    -> Fp_2.normalize (mul_by_2 Fp_2 x) == mul_by_2 Fp_2 x }}
  , {{ \x    -> Fp_2.normalize (mul_by_3 Fp_2 x) == mul_by_3 Fp_2 x }}
  , {{ \x    -> Fp_2.normalize (mul_by_4 Fp_2 x) == mul_by_4 Fp_2 x }}
  , {{ \x    -> Fp_2.normalize (mul_by_6 Fp_2 x) == mul_by_6 Fp_2 x }}
  , {{ \x    -> Fp_2.normalize (mul_by_8 Fp_2 x) == mul_by_8 Fp_2 x }}
 ] (\t -> prove_cryptol t []);

fp2_is_val_div_thm <- custom_prove_cryptol {{ \ x y -> Fp_2.is_val (Fp_2.div (x, y)) == True }}
  do { goal_eval_unint fp_unints;
       simplify fp_simpset;
       w4_unint_z3 fp_unints; };

fp2_normalize_div_thm <- custom_prove_cryptol
  {{ \ x y -> Fp_2.normalize (Fp_2.div (x, y)) == Fp_2.div (x, y) }}
  do { rw_with [fp2_is_val_div_thm, fp2_abs_normalize_thm];
       w4_unint_z3 ["Fp_2"]; };

fp2_normalize_div_thm_2 <- custom_prove_cryptol
  {{ \ x y -> Fp_2.div (Fp_2.normalize x, y) == Fp_2.div (x, y) }}
  do { goal_eval_unint fp_unints;
       simplify fp_simpset;
       w4_unint_z3 fp_unints; };


fp2_normalize_div_thm_3_lemma <- prove_cryptol
  {{ \ c x y z -> Fp.div (x, if c then y else z) == if c then Fp.div (x, y) else Fp.div(x, z) }}
  ["Fp"];

// This appears to be true, but for non-obvious reasons.  TODO: change the definition to make it obvious
fp2_normalize_div_thm_3 <- admit_cryptol
  {{ \ x y -> Fp_2.div (x, Fp_2.normalize y) == Fp_2.div (x, y) }};
/*
  do { goal_eval_unint fp_unints;
       simplify (addsimp fp2_normalize_div_thm_3_lemma extended_fp_simpset);
       print_goal_nicely;
       w4_unint_z3 fp_unints; };
*/

fp2_rep_normalize_thm <- custom_prove_cryptol {{ \x -> fp2_rep (Fp_2.normalize x) == fp2_rep x }} z3;

fp2_is_equal_elim_thm <- prove_cryptol {{ \x y -> Fp_2.is_equal (x,y) == (x==y) }} [];

fp2_normalize_ite_thm <- hoist {{fp2_normalize}} ["fp2_normalize"];
fp2_abs_normalize_ite_thm <- hoist {{Fp_2.normalize}} ["Fp_2"];

one_mont_fp2_rep_thm <- prove_cryptol (rewrite (cryptol_ss ())
  {{ fp2_rep Fp_2.field_unit == [[ 0x760900000002fffd, 0xebf4000bc40c0002, 0x5f48985753c758ba
                             , 0x77ce585370525745, 0x5c071a97a256ec6d, 0x15f65ec3fa80e493],
                             
                             [0, 0, 0 , 0, 0, 0 ]] }}) [] ;

let fp2_simpset = addsimps (concat_all
                            [ fp2_rep_thms
                            , fp2_normalization_thms
                            , [ one_mont_fp2_rep_thm, fp2_abs_ite_thm, fp2_invariant_ite_thm
                              , fp2_normalize_div_thm, fp2_abstract_invariant_thm
                              , fp2_normalize_ite_thm, fp2_abs_normalize_ite_thm
                              , fp2_normalize_div_thm, fp2_normalize_div_thm_2
                              , fp2_normalize_div_thm_3
                              , fp2_rep_ite_thm, fp2_rep_normalize_thm]
                            ]) (cryptol_ss ());

let extended_fp2_simpset = (addsimp fp2_is_equal_elim_thm fp2_simpset);

let fp2_binop_ovs name op = do {
  let plain_spec = binop_spec name vec384x_type {{fp2_invariant}} {{fp2_rep}} {{fp2_abs}} op;
  plain_ov <- admit name plain_spec;

  let alias_1_2_spec = binop_alias_1_2_spec name vec384x_type {{fp2_invariant}} {{fp2_rep}} {{fp2_abs}} op;
  alias_1_2_ov <- admit name alias_1_2_spec;

  let alias_1_3_spec = binop_alias_1_3_spec name vec384x_type {{fp2_invariant}} {{fp2_rep}} {{fp2_abs}} op;
  alias_1_3_ov <- admit name alias_1_3_spec;

  let alias_1_2_3_spec = binop_alias_1_2_3_spec name vec384x_type {{fp2_invariant}} {{fp2_rep}} {{fp2_abs}} op;
  alias_1_2_3_ov <- admit name alias_1_2_3_spec;

  return [plain_ov, alias_1_2_ov, alias_1_3_ov, alias_1_2_3_ov];
  };

add_fp2_ovs <- fp2_binop_ovs "add_fp2" {{Fp_2.add}} ;
sub_fp2_ovs <- fp2_binop_ovs "sub_fp2" {{Fp_2.sub}} ;
mul_fp2_ovs <- fp2_binop_ovs "mul_fp2" {{Fp_2.mul}} ;

let sqr_fp2_spec =
  unop_spec "sqr_fp2" vec384x_type {{ fp2_invariant }} {{fp2_rep}} {{fp2_abs}} {{Fp_2.sq}};
sqr_fp2_ov <- admit "sqr_fp2" sqr_fp2_spec;
let sqr_fp2_alias_1_2_spec =
  unop_alias_1_2_spec "sqr_fp2" vec384x_type {{ fp2_invariant }} {{fp2_rep}} {{fp2_abs}} {{Fp_2.sq}};
sqr_fp2_alias_1_2_ov <- admit "sqr_fp2" sqr_fp2_alias_1_2_spec;

mul_by_3_fp2_ov <- admit "mul_by_3_fp2" 
  (unop_spec "mul_by_3_fp2" vec384x_type {{ fp2_invariant }} {{fp2_rep}} {{fp2_abs}} {{ mul_by_3 Fp_2 }});

let mul_by_3_fp2_alias_1_2_spec =
  unop_alias_1_2_spec "mul_by_3_fp2" vec384x_type {{ fp2_invariant }} {{fp2_rep}} {{fp2_abs}} {{ mul_by_3 Fp_2 }};
mul_by_3_fp2_alias_1_2_ov <- admit "mul_by_3_fp2" mul_by_3_fp2_alias_1_2_spec;

let mul_by_8_fp2_alias_1_2_spec =
  unop_alias_1_2_spec "mul_by_8_fp2" vec384x_type {{ fp2_invariant }} {{fp2_rep}} {{fp2_abs}} {{ mul_by_8 Fp_2 }};
mul_by_8_fp2_alias_1_2_ov <- admit "mul_by_8_fp2" mul_by_8_fp2_alias_1_2_spec;

let cneg_fp2_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  cbit <- crucible_fresh_var "cbit" limb_type;
  crucible_precond {{ fp2_invariant a }};
  crucible_execute_func [ret_ptr, a_ptr, crucible_term cbit];
  crucible_points_to ret_ptr (crucible_term {{ if cbit != 0 then fp2_rep (Fp_2.neg (fp2_abs a)) else a }});
};

cneg_fp2_ov <- admit "cneg_fp2" cneg_fp2_spec;

let cneg_fp2_alias_1_2_spec = do {
  (a, a_ptr) <- ptr_to_fresh "a" vec384x_type;
  cbit <- crucible_fresh_var "cbit" limb_type;
  crucible_precond {{ fp2_invariant a }};
  crucible_execute_func [a_ptr, a_ptr, crucible_term cbit];
  crucible_points_to a_ptr (crucible_term {{ if cbit != 0 then fp2_rep (Fp_2.neg (fp2_abs a)) else a }});
};

cneg_fp2_alias_1_2_ov <- admit "cneg_fp2" cneg_fp2_alias_1_2_spec;

let fp2_overrides = foldr concat
   [add_fp2_ovs, sub_fp2_ovs, mul_fp2_ovs] [sqr_fp2_ov, sqr_fp2_alias_1_2_ov
   , mul_by_3_fp2_ov, mul_by_3_fp2_alias_1_2_ov, mul_by_8_fp2_alias_1_2_ov,cneg_fp2_ov, cneg_fp2_alias_1_2_ov];

let fp2_unints = ["fp2_abs", "fp2_invariant", "fp2_rep", "fp2_normalize", "Fp_2"];

fp2_alg_thms <- for
  [ {{ \ x y z -> Fp_2.mul (Fp_2.mul (x, y), z) == Fp_2.mul (x, Fp_2.mul (y, z)) }} // mul associates
  , {{ \x -> Fp_2.mul (x, Fp_2.field_zero) == Fp_2.field_zero }} // x*0 = 0
  , {{ \x -> Fp_2.mul (Fp_2.field_zero, x) == Fp_2.field_zero }} // 0*x = 0
  , {{ \x -> Fp_2.mul (x, Fp_2.field_unit) == Fp_2.normalize x }} // x*1 = x ish
  // , {{ \x -> Fp_2.mul (x, Fp_2.field_unit) == x }} // x*1 = x TODO: OK in the `Z p` model
  , {{ \x -> Fp_2.mul (Fp_2.field_unit, x) == Fp_2.normalize x }} // 1*x = x ish
  // , {{ \x -> Fp_2.mul (Fp_2.field_unit, x) == x }} // 1*x = x TODO

  , {{ \x -> Fp_2.sq x == Fp_2.mul (x,x) }} // eliminate squaring.  Not always a good idea

  , {{ \ x y z -> Fp_2.add (Fp_2.add (x, y), z) == Fp_2.add (x, Fp_2.add (y, z)) }} // add associates
  , {{ \x -> Fp_2.add (x, Fp_2.field_zero) == Fp_2.normalize x }} // x+0 = x ish
  , {{ \x -> Fp_2.add (Fp_2.field_zero, x) == Fp_2.normalize x }}//  0+x = x ish

  , {{ \ x y -> Fp_2.sub (x, y) == Fp_2.add (x, Fp_2.neg y) }} // eliminate sub in favour of neg

  , {{ \ x -> Fp_2.neg (Fp_2.neg x) == Fp_2.normalize x }} // double negative
  , {{ \ x y -> Fp_2.neg (Fp_2.add (x, y)) == Fp_2.add (Fp_2.neg x, Fp_2.neg y) }} // push neg inside a sum
  , {{ Fp_2.neg Fp_2.field_zero == Fp_2.field_zero }} // -0 = 0
  ] (\ t -> prove_cryptol t []);

fp_inv_fp2_rep_thms <- for [0,1]
  (\ i -> custom_prove_cryptol (rewrite (cryptol_ss()) {{ \ x -> fp_invariant ((fp2_rep x) @ (`i:[1])) == True }})
            do {unfolding ["fp2_rep"];
                simplify fp_simpset;
                w4_unint_z3 fp_unints; } );
