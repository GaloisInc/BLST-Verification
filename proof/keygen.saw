/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/
// Proof of correspondence for the KeyGen implementation
//
// Note that we cannot show termination, so we have a patch that caps the iterations at
// a maximum of 4.  This should never in fact come up, we expect that the first iteration
// will succeed in determining a nonzero key.
//
// SAW also cannot prove correctless for all input llengths; instead we must choose some
// fixed input lengths, and can show correspondence for those.  See the selection at the end of
// this file.

// This proof is compositional.
// 0.  We make some assumptions about the called assembly routines.
//      We hope to verify these later in the project.
// 1.  We first show that the HKDF implementation is OK
// 2.  We then show that blst_keygen corresponds to a specially-crafted "implementation spec"
//     (written in Cryptol).
// 3.  Finally, we show the implementation spec agrees with the actual Cryptol specification.
//     In this last step, we have one assumption about modular reduction of bitvectors that
//     is assumed.  It can easily be shown to hold in the integers.  We plan to
//     prove this property later in the project.


///////////////////////////////////////////////////////////////////////////////
// Imports
///////////////////////////////////////////////////////////////////////////////

include "helpers.saw";
include "proof-helpers.saw"
include "list_utils.saw";
m <- llvm_load_module "../build/llvm/libblst.a.bc";

include "sha_overrides.saw";

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

include "types.saw";

// First we provide specs for the called assembly routines in order to create overrides
// for them.

let {{ r0 = 0xfffffffeffffffff }};
let {{ BLS12_381_r = [0xffffffff00000001, 0x53bda402fffe5bfe, 0x3339d80809a1d805, 0x73eda753299d7d48] }};

import "../spec/keygen_implementation.cry";

// All uses have p_ptr == BLS12_381_r and n0 == r0
let mul_mont_sparse_256_alias_spec = do { // NOTE: first two args are aliases
  (ret, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  (p, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  crucible_precond {{ p ==  BLS12_381_r }} ;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr, crucible_term {{ r0 }} ];
  crucible_points_to ret_ptr (crucible_term {{mul_mont_rep ret b}});
};

// All uses have p_ptr == BLS12_381_r and n0 == r0
let redc_mont_256_spec = do {
  ret_ptr <- crucible_alloc vec256_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec512_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  crucible_precond {{ b ==  BLS12_381_r }} ;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, crucible_term {{ r0 }}];
  crucible_points_to ret_ptr (crucible_term {{ redc_rep a }});
};

let redc_mont_256_alias_1_2_spec = do {
  (a, a_ptr) <- ptr_to_fresh "a" vec512_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  crucible_precond {{ b ==  BLS12_381_r }} ;
  crucible_execute_func [a_ptr, a_ptr, b_ptr, crucible_term {{ r0 }}];
  // now only the first half of a is changed
  crucible_points_to a_ptr (crucible_term {{ (redc_rep a) # (drop`{4} a) }});
};

// Now we give specs for the functions we verify:

import "../spec/rfc8017.cry";
import "../cryptol-specs/Primitive/Symmetric/KDF/HKDF256.cry";

let HKDF_Extract_spec salt_len IKM_len = do {
  PRK_ptr <- crucible_alloc (llvm_array 32 (llvm_int 8));

  salt <- crucible_fresh_var "salt" (llvm_array salt_len (llvm_int 8));
  // salt_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array salt_len (llvm_int 8));
  salt_ptr <- crucible_alloc_readonly (llvm_array salt_len (llvm_int 8));
  crucible_points_to salt_ptr (crucible_term salt);

  IKM <- crucible_fresh_var "IKM" (llvm_array IKM_len (llvm_int 8));
  // IKM_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array IKM_len (llvm_int 8));
  IKM_ptr <- crucible_alloc_readonly (llvm_array IKM_len (llvm_int 8));
  crucible_points_to IKM_ptr (crucible_term IKM);

  ctx <- crucible_alloc (llvm_struct "struct.HMAC_SHA256_CTX");

  crucible_execute_func [PRK_ptr, salt_ptr, crucible_term {{ `salt_len:[64]}}, IKM_ptr, crucible_term {{ `IKM_len:[64]}}, ctx];
  crucible_points_to PRK_ptr (crucible_term {{ HKDF_Extract salt (IKM # [0]) }});
};

let HKDF_Expand_spec info_len L = do {
  // OKM needs alignment as it is cast to a pointer to integer
  OKM_ptr <- crucible_alloc_aligned 4 (llvm_array L (llvm_int 8));

  (PRK, PRK_ptr) <- ptr_to_fresh "PTR"  (llvm_array 32 (llvm_int 8));

  info_ptr <- crucible_alloc_readonly (llvm_array info_len (llvm_int 8));

  info <- if eval_bool {{ (`info_len:[64]) == 0 }} // need special case for pointing to 0-length; SAW issue
          then do { return {{ []: [0][8] }}; }
          else do {
              info <- crucible_fresh_var "info" (llvm_array info_len (llvm_int 8));
              crucible_points_to info_ptr (crucible_term info);
              return info;
              };

  //info <- crucible_fresh_var "info" (llvm_array info_len (llvm_int 8));
  //crucible_conditional_points_to {{ `info_len == 0 }} info_ptr (crucible_term info);
  //if eval_bool {{ `info_len == (0:[64]) }} // need special case for pointing to 0-length; SAW issue
  //  then do { return (); }
  //  else do {crucible_points_to info_ptr (crucible_term info);} ;

  ctx <- crucible_alloc (llvm_struct "struct.HMAC_SHA256_CTX");

  crucible_execute_func [OKM_ptr, crucible_term {{ `L:[64]}}, PRK_ptr, info_ptr, crucible_term {{ `info_len:[64]}}, ctx];
  crucible_points_to OKM_ptr (crucible_term {{ HKDF_Expand`{L=L} PRK  (info #  I2OSP`{xLen=2} `L) }});
};


let blst_keygen_spec IKM_len info_len = do {
  SK_ptr <- crucible_alloc pow256_type;

  IKM <- crucible_fresh_var "IKM" (llvm_array IKM_len (llvm_int 8));
  IKM_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array IKM_len (llvm_int 8));
  crucible_points_to IKM_ptr (crucible_term IKM);

  info <- crucible_fresh_var "info" (llvm_array info_len (llvm_int 8));
  info_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array info_len (llvm_int 8));
  crucible_points_to info_ptr (crucible_term info);

  crucible_execute_func [SK_ptr, IKM_ptr, crucible_term {{ `IKM_len:[64]}}, info_ptr, crucible_term {{ `info_len:[64]}}];
  crucible_points_to SK_ptr (crucible_term {{ (KeyGen_rep (IKM, info)) }});
};

// This may not be a necessary override
let limbs_from_be_bytes_spec48 = do {
  ret_p <-crucible_alloc (llvm_array 6 limb_type);
  (inx, in_ptr) <- ptr_to_fresh "limbs_from_be_bytes_in" (llvm_array 48 (llvm_int 8)); // "in" is a keyword
  crucible_execute_func [ret_p, in_ptr, crucible_term {{ 48:[64] }}];
  crucible_points_to ret_p (crucible_term {{limbs_from_be_bytes_rep48 inx}});
  };

// ...and this is not needed
let vec_is_zero_spec n = do { // n is size IN LIMBS
  (a, a_ptr) <- ptr_to_fresh "a" (llvm_array n limb_type);
  crucible_execute_func [a_ptr, crucible_term {{ (8 * (`n:[64])) }}];
  crucible_return (crucible_term {{ if a == (zero:[n][64]) then 1 else (0:[64]) }});
  };

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////


// First create all the overrides
mul_mont_sparse_256_alias_ov <- crucible_llvm_unsafe_assume_spec m "mulx_mont_sparse_256" mul_mont_sparse_256_alias_spec;

redc_mont_256_ov <- crucible_llvm_unsafe_assume_spec m "redcx_mont_256" redc_mont_256_spec;
redc_mont_256_alias_1_2_ov <- crucible_llvm_unsafe_assume_spec m "redcx_mont_256" redc_mont_256_alias_1_2_spec;

let assumed_overrides = [ redc_mont_256_ov, redc_mont_256_alias_1_2_ov
                        , mul_mont_sparse_256_alias_ov
                        , blst_sha256_emit_ov, blst_sha256_hcopy_ov
                        ];

limbs_from_be_bytes_ov_48 <- crucible_llvm_verify m "limbs_from_be_bytes" [] false (limbs_from_be_bytes_spec48) z3;

// unused, but works:
// vec_is_zero_ov_4 <- crucible_llvm_verify m "vec_is_zero" [] false (vec_is_zero_spec 4) z3;

// finally we verify functions:

// Function to verify the instance of HKDF_Extract needed for a call to keygen
let verify_HKDF_Extract_for salt_len IKM_len = do {
  ovs <- make_block_data_order_ovs [salt_len, IKM_len];
  r <- crucible_llvm_verify m "HKDF_Extract" (concat bcopy_ovs (concat ovs assumed_overrides)) false (HKDF_Extract_spec salt_len IKM_len) (w4_unint_z3 ["processBlock_Common"]);
  return r;
};

/* These work
verify_HKDF_Extract_for 1 1;
verify_HKDF_Extract_for 20 0;
verify_HKDF_Extract_for 32 0;
verify_HKDF_Extract_for 32 5;
*/

// Function to verify the instance of HKDF_Expand needed for a call to keygen

let verify_HKDF_Expand_for info_len L = do {
  ovs <- make_block_data_order_ovs [eval_size {|info_len+3|}];

  r <- crucible_llvm_verify m "HKDF_Expand" (concat bcopy_ovs (concat ovs assumed_overrides)) false (HKDF_Expand_spec info_len L) (w4_unint_z3 ["processBlock_Common"]);
  return r;
  };

/* These work
verify_HKDF_Expand_for 0 48;
verify_HKDF_Expand_for 32 48;
*/
// verify_HKDF_Expand_for 32 32; // -- Ill-typed;  L is too small

// MAIN PROOF
//

let keygen_salt_len = 20;

let keygen_unints = ["HKDF_Extract", "HKDF_Expand"
                    , "mul_mont_rep", "redc_rep"
                    ];

// Function to verify blst_keygen for given input sizes.
let verify_keygen_for IKM_len info_len = do {
  ov1 <- verify_HKDF_Extract_for 32 IKM_len; // hashed salt_len = 32
  ov2 <- verify_HKDF_Expand_for info_len 48; // L = 48
  ov3 <- make_block_data_order_ovs [keygen_salt_len];

  ret <- crucible_llvm_verify m "blst_keygen"
    (foldr concat [ [ ov1, ov2, limbs_from_be_bytes_ov_48
                    ]
                  , bcopy_ovs, ov3
                  ]
                  assumed_overrides)
    false
    (blst_keygen_spec IKM_len info_len)
    (w4_unint_z3 keygen_unints);
  return ret;
  };

// These work:
//verify_keygen_for 32 0;
//verify_keygen_for 32 4;
//verify_keygen_for 33 7;
//verify_keygen_for 80 16;

// Now we need to show KeyGen_rep is the same function as KeyGen
// This is just about Cryptol functions.

import "../spec/KeyGen.cry";

abs_rep_256 <- prove_print z3 {{ \x -> vec256_abs (vec256_rep x) == x }};
rep_abs_256 <- prove_print z3 {{ \x -> vec256_rep (vec256_abs x) == x }};

// Currently, we just assume a property that will be shown in Coq later in the project

funny_reduction <- prove_print (quickcheck 100) {{ \x -> mul_mont_r_bv (redc_r_bv x) (vec256_abs RR_rep) == drop (x % (zext bv_r)) }};

let set0 = cryptol_ss ();
let set1 = addsimps [abs_rep_256, funny_reduction] set0;

// This lemma shows the loop bodies of the two definitions are equivalent
let keygen_lemma IKM_len info_len = {{
  \ (salt: [256]) (IKM: [IKM_len][8]) (info:[info_len][8]) ->
  KeyGenStep salt IKM info == vec256_abs (KeyGenStep_rep salt IKM info) }};

// function to prove the lemma for given sizes:
let prove_keygen_lemma_for a b =
  prove_print (do {
    unfolding ["KeyGenStep_rep", "KeyGenStep", "mul_mont_rep", "redc_rep"];
    simplify set1;
    w4_unint_z3 ["HKDF_Expand", "HKDF_Extract", "sha"];
    })
    (keygen_lemma a b);

// prove_keygen_lemma_for 32 0; // Works

let main_thm IKM_len info_len = {{
  \ (IKM: [IKM_len][8]) (info:[info_len][8]) ->
  pow256_abs (KeyGen_rep (IKM, info)) == KeyGen (IKM, info) }};


// Function to prove the two Cryptol definitions are equivalent
let prove_keygen_equivalence_for a b = do {
  lemma <- prove_keygen_lemma_for a b; // get an instance of the lemma
  prove_print (do {
    unfolding [ "KeyGen_rep", "KeyGen", "KeyGenLoop_rep", "KeyGenLoop" ];
    simplify (addsimp lemma (cryptol_ss ())); // use the lemma
    w4_unint_z3 ["KeyGenStep_rep"];
    })
    (main_thm a b);
  };

// These work
//prove_keygen_equivalence_for 32 0;
//prove_keygen_equivalence_for 32 4;
//prove_keygen_equivalence_for 33 7;
//prove_keygen_equivalence_for 80 16;

// Function to prove everything needed for given parameter sizes:
let do_keygen_proofs_for IKM_len info_len = do {
  verify_keygen_for IKM_len info_len;
  prove_keygen_equivalence_for IKM_len info_len;
  };

// FINALLY!  Run the verifications steps for a variety of sizes.
do_keygen_proofs_for 16 0;
do_keygen_proofs_for 32 0;
do_keygen_proofs_for 32 4;
do_keygen_proofs_for 33 7;
do_keygen_proofs_for 80 16;
