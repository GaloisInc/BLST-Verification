///////////////////////////////////////////////////////////////////////////////
// Imports
///////////////////////////////////////////////////////////////////////////////

include "helpers.saw";
include "list_utils.saw";
include "types.saw";

m <- llvm_load_module "../build/llvm/libblst.a.bc";

import "../cryptol-specs/Primitive/Keyless/Hash/SHA256.cry";

// Needed for the sha subfunction specifications:
let {{
  SHA256Blocks : {n} (fin n) => [8][32] -> [n][16][32] -> [8][32]
  SHA256Blocks H Ms = hs!0 where
    // hs =  [H] # [SHA256Compress H' (SHA256MessageSchedule M) | H' <- hs | M <- Ms]
    hs =  [H] # [processBlock_Common H' M | H' <- hs | M <- Ms]

  // SHA_2_Common:
  SHA256foo : {n} (fin n) => [8][32] -> [64*n][8] -> [8][32]
  SHA256foo H a = SHA256Blocks H Ms where
     Ms = map split (split (join a))
    }};

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

// sha-related functions

let blst_sha256_emit_spec = do {
  (h, h_ptr) <- ptr_to_fresh_readonly "h" (llvm_array 8 (llvm_int 32)); // should always be initialized
  let md_type = (llvm_array 32 (llvm_int 8));
  md_ptr <- crucible_alloc md_type;
  crucible_execute_func [md_ptr, h_ptr];
  crucible_points_to md_ptr (crucible_term {{ (split (join h)) : [32][8]}} );
};

let blst_sha256_hcopy_spec = do {
  let h_type = (llvm_array 8 (llvm_int 32));
  dst_ptr <- crucible_alloc h_type;
  (src, src_ptr) <- ptr_to_fresh_readonly "src" h_type;
  crucible_execute_func [dst_ptr, src_ptr];
  crucible_points_to dst_ptr (crucible_term src);
};

// blocks is a number of 512-bit blocks, which corresponds to 64 bytes
let blst_sha256_block_data_order_spec blocks = do {
  let h_type = (llvm_array 8 (llvm_int 32));
  (h, h_ptr) <- ptr_to_fresh "h" h_type;
  (inp, inp_ptr) <- ptr_to_fresh_readonly "inp" (llvm_array (eval_size {| 64*blocks |}) (llvm_int 8));
  crucible_execute_func [h_ptr, inp_ptr, crucible_term {{ `blocks : [64] }}];
  crucible_points_to h_ptr (crucible_term {{ SHA256foo`{blocks} h inp }});
};

let blst_sha256_bcopy_spec len = do {
  let buf_type = (llvm_array len (llvm_int 8));
  buf_ptr <- crucible_alloc buf_type;
  (inp, inp_ptr) <- ptr_to_fresh_readonly "inp" buf_type;
  crucible_execute_func [buf_ptr, inp_ptr, crucible_term {{ `len : [64] }}];
  crucible_points_to buf_ptr (crucible_term inp);
};

// sha256_block_data_order sizes in one call to sha256_update:
let sha256_update_block_data_order_sizes len offset =
  if eval_bool {{ (`offset  == 0) /\ ((`len:Integer) + (`offset:Integer)) >= 64 }}
  then (eval_size {| len % 64 |}, [eval_size {| len / 64 |}])
  else
    if eval_bool {{ ((`len:Integer) + (`offset:Integer)) >= 64 }}
    then
      if eval_bool {{ ((`len:Integer) + (`offset:Integer)) >= 128 }}
      then (eval_size {| (offset + len) % 64 |}, [1, eval_size {| ((len + offset) / 64) - 1 |}])
      else (eval_size {| (offset + len) % 64 |}, [1])
    else (eval_size {| (offset + len) % 64 |}, []);

let expand_message_block_data_order_sizes len_in_bytes aug_len msg_len DST_len = do {
  // sha256_update(&ctx, aug, aug_len)
  let (offset_1, ss_1) = sha256_update_block_data_order_sizes aug_len 0;
  // sha256_update(&ctx, msg, msg_len)
  let (offset_2, ss_2) = sha256_update_block_data_order_sizes msg_len offset_1;
  // sha256_update(&ctx, b_i.c + 30, 3 + DST_len + 1)
  let (_, ss_3) = sha256_update_block_data_order_sizes (eval_size {|DST_len + 4|}) offset_2;
  // sha256_final(b_0.c, &ctx)
  // sha256_block_data_order(ctx.h, b_i.c, b_i_blocks / 64)
  let rest = [1, eval_int {{ ( ((33 + `dst_len + 1 + 9) + 63) && (-64:[64]) ) /64 }}];
  return (dedup (foldr concat [ss_1, ss_2, ss_3] rest));
};

import "../spec/ExpandMessage.cry";

let expand_message_spec len_in_bytes aug_len msg_len DST_len = do {
  bytes_ptr <- crucible_alloc_aligned 8 (llvm_array len_in_bytes (llvm_int 8));
  (aug, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (DST, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  crucible_execute_func [bytes_ptr, crucible_term {{ `len_in_bytes : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}, msg_ptr, crucible_term {{ `msg_len : [64] }}, DST_ptr, crucible_term {{ `DST_len : [64] }}];
  crucible_points_to bytes_ptr (crucible_term {{ expand_msg_xmd`{len_in_bytes=len_in_bytes} (aug # msg) DST }});
};

let hash_to_field_spec nelems aug_len msg_len DST_len = do {
  elems_ptr <- crucible_alloc (llvm_array nelems vec384_type);
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (_, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  crucible_execute_func [elems_ptr, crucible_term {{ `nelems : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}, msg_ptr, crucible_term {{ `msg_len : [64] }}, DST_ptr, crucible_term {{ `DST_len : [64] }}];
  new_elems <- crucible_fresh_var "new_elems" (llvm_array nelems vec384_type);
  crucible_points_to elems_ptr (crucible_term new_elems);
};

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

// First create all the overrides

let make_blst_sha256_block_data_order_ov len = crucible_llvm_unsafe_assume_spec m "blst_sha256_block_data_order" (blst_sha256_block_data_order_spec len);
let block_data_order_ovs_for_expand_message len_in_bytes aug_len msg_len dst_len = do {
  ss <- expand_message_block_data_order_sizes len_in_bytes aug_len msg_len dst_len;
  ovs <- (for ss make_blst_sha256_block_data_order_ov);
  return ovs;
};

let make_blst_sha256_bcopy_ov len = crucible_llvm_unsafe_assume_spec m "blst_sha256_bcopy" (blst_sha256_bcopy_spec len);
bcopy_ovs <- do {
  let ss = from_to 1 64; // the SHA buffer is 64 bytes long, so we shouldn't be calling bcopy with more than that.
  ovs <- (for ss make_blst_sha256_bcopy_ov);
  return ovs;
};


blst_sha256_emit_ov <- crucible_llvm_unsafe_assume_spec m "blst_sha256_emit" blst_sha256_emit_spec;
blst_sha256_hcopy_ov <- crucible_llvm_unsafe_assume_spec m "blst_sha256_hcopy" blst_sha256_hcopy_spec;

let verify_expand_message_for len_in_bytes aug_len msg_len DST_len = do {
  block_data_order_ovs <- block_data_order_ovs_for_expand_message len_in_bytes aug_len msg_len DST_len;
  r <- crucible_llvm_verify m "expand_message_xmd" (concat bcopy_ovs (concat block_data_order_ovs [blst_sha256_emit_ov, blst_sha256_hcopy_ov])) false (expand_message_spec len_in_bytes aug_len msg_len DST_len) abc;
  return r;
};

let aug_len = 96; // aug_len should be 96 or 48
let msg_len = 200;
let dst_len= 97;
let nelems = 2;
let L = 64; // sizeof(vec384) + 128/8 = 48 + 16
let len_in_bytes = eval_size {| nelems * L |};

expand_message_ov <- verify_expand_message_for len_in_bytes aug_len msg_len dst_len;

include "assembly_overrides.saw";
