/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

///////////////////////////////////////////////////////////////////////////////
// Imports
///////////////////////////////////////////////////////////////////////////////

include "sha_overrides.saw";

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

import "../spec/ExpandMessage.cry";

let expand_message_spec len_in_bytes aug_len msg_len DST_len = do {
  bytes_ptr <- llvm_alloc_aligned 8 (llvm_array len_in_bytes (llvm_int 8));
  (aug, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (DST, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  llvm_execute_func [bytes_ptr, llvm_term {{ `len_in_bytes : [64] }}, aug_ptr, llvm_term {{ `aug_len : [64] }}, msg_ptr, llvm_term {{ `msg_len : [64] }}, DST_ptr, llvm_term {{ `DST_len : [64] }}];
  llvm_points_to bytes_ptr (llvm_term {{ expand_message_xmd`{len_in_bytes=len_in_bytes} (aug # msg) DST }});
};

let expand_message_null_aug_spec len_in_bytes msg_len DST_len = do {
  bytes_ptr <- llvm_alloc_aligned 8 (llvm_array len_in_bytes (llvm_int 8));
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (DST, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  llvm_execute_func [bytes_ptr, llvm_term {{ `len_in_bytes : [64] }}, llvm_null, llvm_term {{ zero : [64] }}, msg_ptr, llvm_term {{ `msg_len : [64] }}, DST_ptr, llvm_term {{ `DST_len : [64] }}];
  llvm_points_to bytes_ptr (llvm_term {{ expand_message_xmd`{len_in_bytes=len_in_bytes} msg DST }});
};

HE1 <- cryptol_load "../spec/HashToCurveE1.cry";
HE2 <- cryptol_load "../spec/HashToCurveE2.cry";
import "../spec/implementation/Types.cry";
import "../spec/implementation/Field.cry";

let hash_to_field_fp_spec nelems aug_len msg_len DST_len = do {
  elems_ptr <- llvm_alloc (llvm_array nelems vec384_type);
  (aug, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (DST, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  llvm_execute_func [elems_ptr, llvm_term {{ `nelems : [64] }}, aug_ptr, llvm_term {{ `aug_len : [64] }}, msg_ptr, llvm_term {{ `msg_len : [64] }}, DST_ptr, llvm_term {{ `DST_len : [64] }}];
  llvm_points_to elems_ptr (llvm_term {{ map fp_rep (HE1::hash_to_field`{count=nelems} (aug#msg) DST) }});
};

let hash_to_field_fp_null_aug_spec nelems msg_len DST_len = do {
  elems_ptr <- llvm_alloc (llvm_array nelems vec384_type);
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (DST, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  llvm_execute_func [elems_ptr, llvm_term {{ `nelems : [64] }}, llvm_null, llvm_term {{ zero : [64] }}, msg_ptr, llvm_term {{ `msg_len : [64] }}, DST_ptr, llvm_term {{ `DST_len : [64] }}];
  llvm_points_to elems_ptr (llvm_term {{ map fp_rep (HE1::hash_to_field`{count=nelems} msg DST) }});
};

let hash_to_field_fp2_spec nelems aug_len msg_len DST_len = do {
  elems_ptr <- llvm_alloc (llvm_array (eval_int {{2*(`nelems:[64])}}) vec384_type);
  (aug, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (DST, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  llvm_execute_func [elems_ptr, llvm_term {{ (2*`nelems) : [64] }}, aug_ptr, llvm_term {{ `aug_len : [64] }}, msg_ptr, llvm_term {{ `msg_len : [64] }}, DST_ptr, llvm_term {{ `DST_len : [64] }}];
  llvm_points_to elems_ptr (llvm_term {{ join (map fp2_rep (HE2::hash_to_field`{count=nelems} (aug#msg) DST)) }});
};

let hash_to_field_fp2_null_aug_spec nelems msg_len DST_len = do {
  elems_ptr <- llvm_alloc (llvm_array (eval_int {{2*(`nelems:[64])}}) vec384_type);
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (DST, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  llvm_execute_func [elems_ptr, llvm_term {{ (2*`nelems) : [64] }}, llvm_null, llvm_term {{ zero : [64] }}, msg_ptr, llvm_term {{ `msg_len : [64] }}, DST_ptr, llvm_term {{ `DST_len : [64] }}];
  llvm_points_to elems_ptr (llvm_term {{ join (map fp2_rep (HE2::hash_to_field`{count=nelems} (msg) DST)) }});
};

import "../cryptol-specs/Common/bv.cry";
import "../spec/Parameters.cry";

let {{ // TODO: this should probably be in a Cryptol file somewhere
  bv_R_inv = (fromInteger montgomery_factor_inverse_p):[384] // = 0x1bbe869330009d577204078a4f77266aab6fca8f09dc705f13f75b69fe75c040

  redc_p_bv: [768] -> [384]
  redc_p_bv x = safe_mod (`p:[384], safe_product (x, zext bv_R_inv))

  redc_rep: Vec768 -> Vec384
  redc_rep x = vec384_rep (redc_p_bv (vec768_abs x))

  mul_mont_p_bv: [384] -> [384] -> [384]
  mul_mont_p_bv a b = safe_mod (`p:[384], safe_product (zext a, safe_product (b, bv_R_inv)))

  mul_mont_rep: Vec384 -> Vec384 -> Vec384
  mul_mont_rep x y = vec384_rep (mul_mont_p_bv (vec384_abs x) (vec384_abs y))

  // Cryptol agrees that `fp_rep Fp.mul(R,R)) = BLS12_381_RRRR`. So BLS12_381_RRRR is the Montgomery reprentation of R^2
  RRR_rep : Vec384
  RRR_rep = [0xed48ac6bd94ca1e0, 0x315f831e03a7adf8, 0x9a53352a615e29dd, 0x34c04e5e921e1761, 0x2512d43565724728, 0x0aa6346091755d4d]

  bv_p0 : [64]
  bv_p0 = 0x89f3fffcfffcfffd // TODO: what is this?
}};

let redc_mont_384_spec = do {
  ret_ptr <- llvm_alloc vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec768_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  llvm_precond {{ b == vec384_rep (`p:[384]) }};
  llvm_execute_func [ret_ptr, a_ptr, b_ptr, llvm_term {{bv_p0}}];
  llvm_points_to ret_ptr (llvm_term {{ redc_rep a }}); // TODO: shouldn't this be using `to_mont`? (defined in `implementation/Field.cry`)
};

let mul_mont_384_alias_spec = do {
  (ret, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  llvm_precond {{ b == RRR_rep }};
  (p, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  llvm_precond {{ p == vec384_rep (`p:[384]) }};
  llvm_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr, llvm_term {{bv_p0}}];
  llvm_points_to ret_ptr (llvm_term {{ mul_mont_rep ret b }}); // TODO: shouldn't this be using Fp.mul?
};

let limbs_from_be_bytes_spec nlimbs = do {
  let nbytes = eval_size {| nlimbs*8 |};
  ret_p <- llvm_alloc (llvm_array nlimbs limb_type);
  (in_, in_ptr) <- ptr_to_fresh_readonly "limbs_from_be_bytes_in" (llvm_array nbytes (llvm_int 8)); // "in" is a keyword, thus we use "in_"
  llvm_execute_func [ret_p, in_ptr, llvm_term {{`nbytes:[64]}}];
  llvm_points_to ret_p (llvm_term {{reverse (split`{parts=nlimbs} (join`{each=8} in_))}});
  };

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

// we assume that those assembly functions are correct:
mul_mont_384_ov <- llvm_unsafe_assume_spec m "mulx_mont_384" mul_mont_384_alias_spec;
redc_mont_384_ov <- llvm_unsafe_assume_spec m "redcx_mont_384" redc_mont_384_spec;

// we verify limbs_from_be_bytes, which we'll use to produce a better looking extracted term:
limbs_from_be_bytes_ov <- verify "limbs_from_be_bytes" [] (limbs_from_be_bytes_spec 8);

// a simple rewrite rule to rewrite `abs (rep x)` to `x`:
vec_abs_rep_thm <- prove_cryptol {{ \x -> vec384_abs (vec384_rep x) == x}} [];

// An unused theorem to get rid of map
let map_size_1_term = parse_core "\\(f : Integer -> Vec 6 (Vec 64 Bool)) -> \\(y : Vec 1 Integer) -> map Integer (Vec 6 (Vec 64 Bool)) f 1 y";
let map_size_1_eq_term = beta_reduce_term {{ \x -> map_size_1_term fp_rep x == [fp_rep (x@0)]}};
//map_size_1_thm <- prove_cryptol map_size_1_eq_term []; // does not work?

// A rewrite to get rid of a triviality (not really necessary):
let intLe_sym_term = parse_core "\\(x : Integer) -> intLe x x";
intLe_sym_thm <- prove_cryptol (beta_reduce_term {{\x -> intLe_sym_term x == True}}) [];

// Here is a lemma that we assume (it needs some basic algebra that SAW can't handle).
// RRR is (R^3 mod p), redc x is by x(R^-1) mod p, and Montgomery multiplication of a and b is abR^-1 mod p, so the left-hand side below is x(R^-1)(R^3)(R^-1) mod p = xR mod p. In the lhs, redc takes a [768] and produces a [384], hence the drop on the rhs.
let main_lemma_term = {{ \x -> vec384_rep (mul_mont_p_bv (redc_p_bv x) (vec384_abs RRR_rep)) == fp_rep (to_Fp (drop`{back=384} (x % `p))) }};
main_lemma <- admit_cryptol (rewrite (cryptol_ss ()) (unfold_term ["RRR_rep"] main_lemma_term)); // TODO: why is the outermost simplification needed (rule does not apply otherwise)?
// A rewrite to help the SMT solver. The issue is that the spec operates on 512-bit chunks, but the implementation uses 768 out of which only 512 are non-zero. The following term represents a 768-bits chunk obtained by appending zeros to a 512-bits chunk.
let term1 = parse_core "\\(x:Vec 8 (Vec 64 Bool)) -> [ at 8 (Vec 64 Bool) x 0 , at 8 (Vec 64 Bool) x 1 , at 8 (Vec 64 Bool) x 2 , at 8 (Vec 64 Bool) x 3 , at 8 (Vec 64 Bool) x 4 , at 8 (Vec 64 Bool) x 5 , at 8 (Vec 64 Bool) x 6 , at 8 (Vec 64 Bool) x 7 , bvNat 64 0 , bvNat 64 0 , bvNat 64 0 , bvNat 64 0 ]"; // TODO: parse_core seems to fail when this is made readable over multiple lines.
// we rewrite the term comming from the implementation to better match the term coming from the spec:
let eq_1 = {{\x -> drop`{back=384} ((vec768_abs (term1 x)) % `p) == drop`{back=384} ((vec512_abs x) % `p) }};
eq_1_thm <- prove_cryptol (rewrite (cryptol_ss ()) eq_1) [];

let verify_hash_to_field_for aug_len msg_len DST_len nelems = do {
  let L = 64; // sizeof(vec384) + 128/8 = 48 + 16
  let len_in_bytes = eval_size {| L*nelems |};
  block_data_order_ovs <- make_block_data_order_ovs [aug_len, msg_len, eval_size {| (33+DST_len+1+9)+63 |}]; // last size is b_i_blocks from hash_to_field.c
  expand_message_ov <- custom_verify "expand_message_xmd" (concat bcopy_ovs (concat block_data_order_ovs [blst_sha256_emit_ov, blst_sha256_hcopy_ov])) (expand_message_spec len_in_bytes aug_len msg_len DST_len) abc; // z3 takes forever, but abc does better
  // expand_message_ov <- admit "expand_message_xmd" (expand_message_spec len_in_bytes aug_len msg_len DST_len);
  let overrides = [expand_message_ov, limbs_from_be_bytes_ov, redc_mont_384_ov, mul_mont_384_ov];
  r <- custom_verify "hash_to_field" overrides (hash_to_field_fp_spec nelems aug_len msg_len DST_len)
    (do {
      // assume_unsat;});
      unfolding ["redc_rep", "mul_mont_rep", "HE1::hash_to_field","expand_message"];
      simplify (addsimps [vec_abs_rep_thm] empty_ss);
      simplify (cryptol_ss ());
      simplify (addsimps [main_lemma, eq_1_thm] empty_ss);
      w4_unint_yices ["expand_message", "to_Fp", "fp_rep"];}); // TODO: still quite slow; z3 even slower. Probably not a stable proof.
  return r;
};

let verify_hash_to_field_null_aug_for msg_len DST_len nelems = do {
  let L = 64; // sizeof(vec384) + 128/8 = 48 + 16
  let len_in_bytes = eval_size {| L*nelems |};
  // TODO
  block_data_order_ovs <- make_block_data_order_ovs [msg_len, eval_size {| (33+DST_len+1+9)+63 |}]; // last size is b_i_blocks from hash_to_field.c
  expand_message_ov <- custom_verify "expand_message_xmd" (concat bcopy_ovs (concat block_data_order_ovs [blst_sha256_emit_ov, blst_sha256_hcopy_ov])) (expand_message_null_aug_spec len_in_bytes msg_len DST_len) abc; // z3 takes forever, but abc does better
  // expand_message_ov <- admit "expand_message_xmd" (expand_message_spec len_in_bytes aug_len msg_len DST_len);
  let overrides = [expand_message_ov, limbs_from_be_bytes_ov, redc_mont_384_ov, mul_mont_384_ov];
  r <- custom_verify "hash_to_field" overrides (hash_to_field_fp_null_aug_spec nelems msg_len DST_len)
    (do {
      // assume_unsat;});
      unfolding ["redc_rep", "mul_mont_rep", "HE1::hash_to_field","expand_message"];
      simplify (addsimps [vec_abs_rep_thm] empty_ss);
      simplify (cryptol_ss ());
      simplify (addsimps [main_lemma, eq_1_thm] empty_ss);
      w4_unint_yices ["expand_message", "to_Fp", "fp_rep"];}); // TODO: still quite slow; z3 even slower. Probably not a stable proof.
  return r;
};

let aug_len = 48; // aug_len should be 96 or 48
let msg_len = 32;
let DST_len= 8;
let hash_to_field_nelems = [1,2]; // the values of nelems for which we prove hash_to_field

// Proof of hash-to-field for fp:
hash_to_field_fp_ovs <- for hash_to_field_nelems (verify_hash_to_field_for aug_len msg_len DST_len);
hash_to_field_fp_null_aug_ovs <- for hash_to_field_nelems (verify_hash_to_field_null_aug_for msg_len DST_len);

// Now for fp2:

let verify_hash_to_field_fp2_for aug_len msg_len DST_len nelems = do {
  let L = 64; // sizeof(vec384) + 128/8 = 48 + 16
  let len_in_bytes = eval_size {| L*2*nelems |};
  block_data_order_ovs <- make_block_data_order_ovs [aug_len, msg_len, eval_size {| (33+DST_len+1+9)+63 |}]; // last size is b_i_blocks from hash_to_field.c
  expand_message_ov <- custom_verify "expand_message_xmd" (concat bcopy_ovs (concat block_data_order_ovs [blst_sha256_emit_ov, blst_sha256_hcopy_ov])) (expand_message_null_aug_spec len_in_bytes msg_len DST_len) abc; // z3 takes forever, but abc does better
  // expand_message_ov <- admit "expand_message_xmd" (expand_message_spec len_in_bytes aug_len msg_len DST_len);
  let overrides = [expand_message_ov, limbs_from_be_bytes_ov, redc_mont_384_ov, mul_mont_384_ov];
  r <- custom_verify "hash_to_field" overrides (hash_to_field_fp2_spec nelems aug_len msg_len DST_len)
    do {
      // assume_unsat;});
      unfolding ["redc_rep", "mul_mont_rep", "HashToCurveE2::hash_to_field","expand_message"];
      simplify (addsimps [vec_abs_rep_thm] empty_ss);
      simplify (cryptol_ss ());
      simplify (addsimps [main_lemma, eq_1_thm] empty_ss);
      w4_unint_yices ["expand_message", "to_Fp", "fp_rep"];
    };
  return r;
};

let verify_hash_to_field_fp2_null_aug_for msg_len DST_len nelems = do {
  let L = 64; // sizeof(vec384) + 128/8 = 48 + 16
  let len_in_bytes = eval_size {| L*2*nelems |};
  block_data_order_ovs <- make_block_data_order_ovs [msg_len, eval_size {| (33+DST_len+1+9)+63 |}]; // last size is b_i_blocks from hash_to_field.c
  expand_message_ov <- custom_verify "expand_message_xmd" (concat bcopy_ovs (concat block_data_order_ovs [blst_sha256_emit_ov, blst_sha256_hcopy_ov])) (expand_message_null_aug_spec len_in_bytes msg_len DST_len) abc; // z3 takes forever, but abc does better
  // expand_message_ov <- admit "expand_message_xmd" (expand_message_null_aug_spec len_in_bytes msg_len DST_len);
  let overrides = [expand_message_ov, limbs_from_be_bytes_ov, redc_mont_384_ov, mul_mont_384_ov];
  r <- custom_verify "hash_to_field" overrides (hash_to_field_fp2_null_aug_spec nelems msg_len DST_len)
    do {
      // assume_unsat;});
      unfolding ["redc_rep", "mul_mont_rep", "HashToCurveE2::hash_to_field","expand_message"];
      simplify (addsimps [vec_abs_rep_thm] empty_ss);
      simplify (cryptol_ss ());
      simplify (addsimps [main_lemma, eq_1_thm] empty_ss);
      w4_unint_yices ["expand_message", "to_Fp", "fp_rep"];
    };
  return r;
};

hash_to_field_fp2_ovs <- for hash_to_field_nelems (verify_hash_to_field_fp2_for aug_len msg_len DST_len);
hash_to_field_fp2_null_aug_ovs <- for hash_to_field_nelems (verify_hash_to_field_fp2_null_aug_for msg_len DST_len);
