/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

import "../spec/ExpandMessage.cry";

let expand_message_spec len_in_bytes aug_len msg_len DST_len = do {
  bytes_ptr <- crucible_alloc_aligned 8 (llvm_array len_in_bytes (llvm_int 8));
  (aug, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (DST, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  crucible_execute_func [bytes_ptr, crucible_term {{ `len_in_bytes : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}, msg_ptr, crucible_term {{ `msg_len : [64] }}, DST_ptr, crucible_term {{ `DST_len : [64] }}];
  crucible_points_to bytes_ptr (crucible_term {{ expand_msg_xmd`{len_in_bytes=len_in_bytes} (aug # msg) DST }});
};

let hash_to_field_spec nelems aug_len msg_len DST_len = do {
  elems_ptr <- crucible_alloc (llvm_array nelems vec384_type);
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (_, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  crucible_execute_func [elems_ptr, crucible_term {{ `nelems : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}, msg_ptr, crucible_term {{ `msg_len : [64] }}, DST_ptr, crucible_term {{ `DST_len : [64] }}];
  new_elems <- crucible_fresh_var "new_elems" (llvm_array nelems vec384_type);
  crucible_points_to elems_ptr (crucible_term new_elems);
};

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

let verify_hash_to_field_for aug_len msg_len DST_len nelems = do {
  let L = 64; // sizeof(vec384) + 128/8 = 48 + 16
  let len_in_bytes = eval_size {| nelems * L |};
  block_data_order_ovs <- make_block_data_order_ovs [aug_len, msg_len, eval_size {| (33+DST_len+1+9)+63 |}]; // last size is b_i_blocks from hash_to_field.c
  //expand_message_xmd_ov <- verify "expand_message_xmd" (concat bcopy_ovs (concat block_data_order_ovs [blst_sha256_emit_ov, blst_sha256_hcopy_ov])) (expand_message_spec len_in_bytes aug_len msg_len DST_len); // TODO: does not terminate
  expand_message_xmd_ov <- admit "expand_message_xmd" (expand_message_spec len_in_bytes aug_len msg_len DST_len);
  hash_to_field_ov <- really_verify "hash_to_field" [expand_message_xmd_ov, redcx_mont_384_ov, mulx_mont_384_ov, mulx_mont_384_ret_ret_ov] (hash_to_field_spec nelems aug_len msg_len DST_len);
  return hash_to_field_ov;
};

hash_to_field_ovs <- for [1,2,4] (verify_hash_to_field_for aug_len msg_len DST_len);
