import "../spec/implementation/CryptolHelpers.cry" (apply);

let bv_int_properties n =
  [ {{ \ (x:[n]) y -> toInteger (x+y) == ((toInteger x) + (toInteger y)) % 2^^`n }}
  , {{ \ (x:[n]) y -> toInteger (x-y) == ((toInteger x) - (toInteger y)) % 2^^`n }}
  , {{ \ (x:[n]) y -> toInteger (x*y) == ((toInteger x) * (toInteger y)) % 2^^`n }}

  , {{ \ (x:[n]) y -> toInteger (x/y) ==
         if y == 0 then apply toInteger (x/y)
         else ((toInteger x) / (toInteger y)) % 2^^`n }}
  , {{ \ (x:[n]) y -> toInteger (x%y) ==
         if y == 0 then apply toInteger (x%y)
         else ((toInteger x) % (toInteger y)) % 2^^`n }}

  , {{ \ (x:[n]) y -> (x==y) == ((toInteger x) == (toInteger y)) }}
  , {{ \ (x:[n]) y -> (x!=y) == ((toInteger x) != (toInteger y)) }}
  , {{ \ (x:[n]) y -> (x<y) == ((toInteger x) < (toInteger y)) }}
  , {{ \ (x:[n]) y -> (x<=y) == ((toInteger x) <= (toInteger y)) }}
  , {{ \ (x:[n]) y -> (x>y) == ((toInteger x) > (toInteger y)) }}
  , {{ \ (x:[n]) y -> (x>=y) == ((toInteger x) >= (toInteger y)) }}

  , {{ \ (x:[n]) -> fromInteger (toInteger x) == x }}
  , {{ \ x -> toInteger (fromInteger`{[n]} x) == x % 2^^`n }}
  ];

// confirm the properties at low bit widths
for (bv_int_properties 4) (\t -> prove_cryptol t []);
for (bv_int_properties 5) (\t -> prove_cryptol t []);
// slows significantly as n increases
//for (bv_int_properties 6) (prove_print z3);
//for (bv_int_properties 7) (prove_print z3); 

// We will assume them at the sizes we need (384, 768, ...)
let bv_int_axioms n = for (bv_int_properties n) admit_cryptol;
