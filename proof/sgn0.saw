/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

include "proof-helpers.saw";

enable_experimental;

let x86_tactic = do {
  print_goal;
  (quickcheck 100);
};

let do_prove_x86 = true;

let verify_x86 name spec =
  if do_prove_x86
  then
  crucible_llvm_verify_x86 m "../build/x86/libblst.so" name
    []
    false
    spec
    tactic
  else
  crucible_llvm_unsafe_assume_spec m name spec;

import "../spec/implementation/Types.cry";
import "../spec/implementation/Field.cry";
import "../spec/HashToCurveE1.cry" as HTCE1;
import "../spec/Parameters.cry";
import "../spec/Serialization.cry";

let sgn0x_pty_mont_384_spec = do {
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  llvm_precond {{ fp_invariant a }};
  p_ptr <- alloc_init_readonly vec384_type (llvm_term {{ vec384_rep (from_Fp `p) }});
  crucible_execute_func [a_ptr, p_ptr, crucible_term {{ 0x89f3fffcfffcfffd }}];
  crucible_return (crucible_term {{ (zext [sign_F_p (fp_abs a), (HTCE1::sgn0 (fp_abs a))@0]):[64] }});
;

// TODO: prove (not so easy because of the Montgomery representation)
sgn0x_pty_mont_384_ov <- verify_x86 "sgn0x_pty_mont_384" sgn0x_pty_mont_384_spec (quickcheck 16);
