/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

/* ================================================================

For proof development it is convenient to have some cover functions
that call the prover commands.  We provide a SAW boolean `do_prove`;
if set `true`, then all the `verify` type commands below actually do
proofs, and if set `false`, they merely assume the theorem or code
specification.

The `really_` functions run proofs regardless of the value of `do_prove`.

Thus, in proof development, we will set `do_prove = false`, and use
the `really_` prefix on the proofs we are working on, so when running
SAW we get immediately to the proof of interest.  Once those proofs
work, the `really_` prefix is removed, and we go on the the next
proof.

Finally, we need to periodically run the scripts with `do_prove =
true` to make sure all the proofs are still working.

These functions assume that the LLVM code of interest has been loaded
to variable `m`, so it does not appear in the verify commands.

The `do_prove` variable must be set before loading this file, as well
as `m`.


*/

let prover = w4_unint_z3;

///////////////////////////////////////////////////////////////////////////////
// Proof commands for use in production

// ... for code proofs

let verify_unint func overrides unints spec =  
  if do_prove
  then crucible_llvm_verify m func overrides false spec (prover unints) 
  else crucible_llvm_unsafe_assume_spec m func spec;

let verify func overrides spec =
  verify_unint func overrides [] spec; 

let test func overrides spec =
  if do_prove
  then crucible_llvm_verify m func overrides false spec (quickcheck 100)
  else crucible_llvm_unsafe_assume_spec m func spec;

let custom_verify func overrides spec custom_tactic = 
  if do_prove
  then crucible_llvm_verify m func overrides false spec custom_tactic 
  else crucible_llvm_unsafe_assume_spec m func spec;

let admit func spec =
  crucible_llvm_unsafe_assume_spec m func spec;

// ... and for Cryptol theorems

let admit_cryptol thm =
  prove_print assume_unsat thm;

let prove_cryptol thm unints =
  if do_prove
  then prove_print (prover unints) thm
  else admit_cryptol thm;

let custom_prove_cryptol thm script =
  if do_prove
  then prove_print script thm
  else admit_cryptol thm;

let test_cryptol thm =
  if do_prove
  then prove_print (quickcheck 100) thm
  else admit_cryptol thm;

///////////////////////////////////////////////////////////////////////////////
// Proof commands for use in development

// ... for code proofs

let really_verify_unint func overrides unints spec =
    crucible_llvm_verify m func overrides false spec (prover unints);

let really_verify func overrides spec =
    really_verify_unint func overrides [] spec;

let really_test func overrides spec =
    crucible_llvm_verify m func overrides false spec (quickcheck 100); 

let really_custom_verify func overrides spec custom_tactic = 
  crucible_llvm_verify m func overrides false spec custom_tactic;

let show_admit func overrides spec =
   crucible_llvm_verify m func overrides false spec
     (do { simplify basic_ss; simplify (cryptol_ss()); print_goal; assume_unsat; });

let show_goal func overrides unints spec transformations =
    crucible_llvm_verify m func overrides false spec do {
        transformations;
        print_goal;
        prover unints;
   };

// ... and for Cryptol theorems

let really_prove_cryptol thm unints =
  prove_print (prover unints) thm;

let really_custom_prove_cryptol thm script =
  prove_print script thm;

let really_test_cryptol thm =
   prove_print (quickcheck 100) thm;



////////////////////////////////////////////////////////////////
//
// Other helpers for proofs
//

// rewrite with a list of theorems
let rw_with thms = simplify (addsimps thms (cryptol_ss ()));
// ... or just one
let rw_with_1 thm = simplify (addsimp thm (cryptol_ss ()));

// useful things for proof development, to tidy up the goal formula before printing it.

propositional_rewrites <- for
  [ "(a:Bool) -> (b:Bool) -> EqTrue (boolEq (ite Bool a True b) (or a b))"
  , "(a:Bool) -> (b:Bool) -> EqTrue (boolEq (ite Bool a b False) (and a b))"
  , "(a:Bool) -> (b:Bool) -> EqTrue (boolEq (not (and a b)) (or (not a) (not b)))"
  , "(a:Bool) -> (b:Bool) -> EqTrue (boolEq (not (or a b)) (and (not a) (not b)))"
  , "(a:Bool) -> EqTrue (boolEq (implies a False) (not a))"
  , "(a:Bool) -> (b:Bool) -> (c:Bool) -> EqTrue (boolEq (implies a (or b c)) (implies (and a (not b)) c))"
  // , "(a:Bool) -> (b:Bool) -> (c:Bool) -> EqTrue (boolEq (implies (and a b) c) (implies a (implies b c)))"
  , "(a:Bool) -> (b:Bool) -> EqTrue (boolEq (or (not a) b) (implies a b))"
   ] (prove_core abc);

let prop_simpset = add_prelude_eqs
  [ "ite_true", "ite_false", "ite_eq"
  , "not_True", "not_False", "not_not"
  , "and_True1", "and_True2", "and_False1", "and_False2", "and_idem"
  , "or_True1", "or_True2", "or_False1", "or_False2", "or_idem"]
  (addsimps propositional_rewrites empty_ss);

let cleanup_simpset = add_cryptol_defs ["ecEq", "PEqInteger"] prop_simpset;

let print_clean_goal = do {
  unfolding ["/\\", "\\/", "==>"];
  simplify (cryptol_ss());
  simplify cleanup_simpset;
  print_goal;
  };
