/*
 * Copyright (c) 2021 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

/* For stand-alone testing:
include "helpers.saw";
m <- llvm_load_module "../build/llvm/libblst.a.bc";
let do_prove = true;
include "proof-helpers.saw";
*/

import "../spec/Parameters.cry";

/* SAW recently acquired the ability to handle permutative rewrite rules, allow for the
   use of rewrite rules for properties like commutativity.  This new set of algebraic laws
   for fields takes advantage of these capabilities.

   The strategy use here is as follows:

   - sums and products are associated to the right, and the summands (or multiplicands) will be
     sorted.

   - subtraction is eliminated, being replaced by addition of a negation

   - negation is pushed inside sums, but pulled out of products

   - addition of 0, and multiplication by 0 or 1, are simplified.

   - multiplication is distributed over addition.  This can make terms much larger.

  For the ring properties, this is almost full normalization, except for a few wrinkles:
    - it is difficult for rewriting to ensure that a term and its negative will be close
      together so that we can cancel them.  That is, in a term like (x + y + z - x) it is
      difficult to arrange for a rule (x - x == 0) to apply, as the terms for x and -x 
      may be far apart.  Full AC rewriting, or making certain functions invisible to term
      ordering (as in ACL2), would help here.

   - a FieldRep type can have associated junk, and a predicate "F.is_val" recognizes proper
     values of the field.  "F.normalize" projects all values of the type to proper values.
     This makes some rules more complex, or even conditional.  For example, we do not have
     x+0 == x, but instead x+0 == normalize x.

  Division introduces additional problems.  TODO: describe and address them.
 */

let base_alg_laws_for_ring F = 
  [ // multiplication
    {{ \ x y   -> F.mul (x, y) == F.mul (y,x) }} // mul commutes
  , {{ \ x y z -> F.mul (F.mul (x, y), z) == F.mul (x, F.mul (y, z)) }} // mul associates
  , {{ \ x y z -> F.mul (x, F.mul (y, z)) == F.mul (y, F.mul (x, z)) }} // mul commutes, again
  , {{ \x      -> F.mul (x, F.field_zero) == F.field_zero }} // x*0 = 0
  , {{ \x      -> F.mul (F.field_zero, x) == F.field_zero }} // 0*x = 0
  , {{ \x      -> F.mul (x, F.field_unit) == F.normalize x }} // x*1 = x ish
  , {{ \x      -> F.mul (F.field_unit, x) == F.normalize x }} // 1*x = x ish

  // , {{ \x -> F.sq x == F.mul (x,x) }} // eliminate squaring.  Not always a good idea
  , {{  F.sq F.field_zero == F.field_zero }}
  , {{  F.sq F.field_unit == F.field_unit }}
  , {{  \ x y -> F.sq (F.mul (x, y)) == F.mul (F.sq x, F.sq y) }}

  // addition
  , {{ \ x y   -> F.add (x, y) == F.add (y,x) }} // add commutes
  , {{ \ x y z -> F.add (F.add (x, y), z) == F.add (x, F.add (y, z)) }} // add associates
  , {{ \ x y z -> F.add (x, F.add (y, z)) == F.add (y, F.add (x, z)) }} // add commutes, again
  , {{ \x      -> F.add (x, F.field_zero) == F.normalize x }} // x+0 = x ish
  , {{ \x      -> F.add (F.field_zero, x) == F.normalize x }}//  0+x = x ish
  , {{ \ x y z -> F.mul (x, F.add (y, z)) == F.add (F.mul (x, y), F.mul (x, z)) }} // distributive
  , {{ \ x y z -> F.mul (F.add (x, y), z) == F.add (F.mul (x, z), F.mul (y, z)) }} // distributive

  // subtraction
  , {{ \ x y -> F.sub (x, y) == F.add (x, F.neg y) }} // eliminate sub in favour of neg

  // negation
  , {{ F.neg F.field_zero == F.field_zero }} // -0 = 0
  , {{ \ x y -> F.neg (F.add (x, y)) == F.add (F.neg x, F.neg y) }} // push neg inside a sum
  , {{ \ x y -> F.mul (x, F.neg y) == F.neg (F.mul (x, y)) }} // pull neg outside a product
  , {{ \ x y -> F.mul (F.neg x, y) == F.neg (F.mul (x, y)) }} // pull neg outside a product
  , {{ \ x   -> F.neg (F.neg x) == F.normalize x }} // double negative

  // normalization
  // ... eliminate normalization in a argument position
  , {{ \ x y -> F.mul (F.normalize x, y) == F.mul (x, y) }}
  , {{ \ x y -> F.mul (x, F.normalize y) == F.mul (x, y) }}
  , {{ \ x   -> F.sq (F.normalize x) == F.sq x }}
  , {{ \ x y -> F.add (F.normalize x, y) == F.add (x, y) }}
  , {{ \ x y -> F.add (x, F.normalize y) == F.add (x, y) }}
  , {{ \ x   -> F.neg (F.normalize x) == F.neg x }}
  , {{ \ x   -> F.normalize (F.normalize x) == F.normalize x }}
  // ... results are normalized
  , {{ \ x y -> F.normalize (F.mul (x, y)) == F.mul (x, y) }}
  , {{ \ x   -> F.normalize (F.sq x) == F.sq x }}
  , {{ \ x y -> F.normalize (F.add (x, y)) == F.add (x, y) }}
  , {{ \ x   -> F.normalize (F.neg x) == F.neg x }}
  , {{          F.normalize F.field_zero == F.field_zero }}
  , {{          F.normalize F.field_unit == F.field_unit }}
  
  // is_val
  , {{ \ x y -> F.is_val (F.mul (x, y)) == True }}
  , {{ \ x   -> F.is_val (F.sq x) == True }}
  , {{ \ x y -> F.is_val (F.add (x, y)) == True }}
  , {{ \ x   -> F.is_val (F.neg x) == True }}
  ];


let alg_laws_for_field F = 
  [ // multiplication
    {{ \ x y -> F.mul (x, y) == F.mul (y,x) }} // mul commutes
  , {{ \ x y z -> F.mul (F.mul (x, y), z) == F.mul (x, F.mul (y, z)) }} // mul associates
  , {{ \ x y z -> F.mul (x, F.mul (y, z)) == F.mul (y, F.mul (x, z)) }} // mul commutes, again
  , {{ \x -> F.mul (x, F.field_zero) == F.field_zero }} // x*0 = 0
  , {{ \x -> F.mul (F.field_zero, x) == F.field_zero }} // 0*x = 0
  , {{ \x -> F.mul (x, F.field_unit) == F.normalize x }} // x*1 = x ish
  , {{ \x -> F.mul (F.field_unit, x) == F.normalize x }} // 1*x = x ish

  , {{ \x -> F.sq x == F.mul (x,x) }} // eliminate squaring.  Not always a good idea

  // division
  // , {{ \x -> F.div (x, F.field_unit) == F.normalize x }} // x/1 = x ish
  // , {{ \x -> F.div (x, F.field_zero) == F.field_zero }} // x/0 = 0
  // , {{ \ x y z -> F.div (F.div (x, y), z) == F.div (x, F.mul (y, z)) }} // CHECK
  // , {{ \ x y z -> F.div (x, F.div (y, z)) == F.div (F.mul (x, z), y) }} // CHECK
  // , {{ \ x y z -> F.mul (F.div (x, y), z) == F.div (F.mul (x, z), y) }} // CHECK
  // , {{ \ x y z -> F.mul (x, F.div (y, z)) == F.div (F.mul (x, y), z) }} // CHECK

  // addition
  , {{ \ x y -> F.add (x, y) == F.add (y,x) }} // add commutes
  , {{ \ x y z -> F.add (F.add (x, y), z) == F.add (x, F.add (y, z)) }} // add associates
  , {{ \ x y z -> F.add (x, F.add (y, z)) == F.add (y, F.add (x, z)) }} // add commutes, again
  , {{ \x -> F.add (x, F.field_zero) == F.normalize x }} // x+0 = x ish
  , {{ \x -> F.add (F.field_zero, x) == F.normalize x }}//  0+x = x ish
  , {{ \ x y z -> F.mul (x, F.add (y, z)) == F.add (F.mul (x, y), F.mul (x, z)) }} // distributive
  , {{ \ x y z -> F.mul (F.add (x, y), z) == F.add (F.mul (x, z), F.mul (y, z)) }} // distributive

  // ,  {{ \ x y z -> F.div (F.add (x, y), z) == F.add (F.div (x, z), F.div (y, z)) }} // distributive

  // subtraction
  , {{ \ x y -> F.sub (x, y) == F.add (x, F.neg y) }} // eliminate sub in favour of neg

  // negation
  , {{ F.neg F.field_zero == F.field_zero }} // -0 = 0
  , {{ \ x y -> F.neg (F.add (x, y)) == F.add (F.neg x, F.neg y) }} // push neg inside a sum
  , {{ \ x y -> F.mul (x, F.neg y) == F.neg (F.mul (x, y)) }} // pull neg outside a product
  , {{ \ x y -> F.mul (F.neg x, y) == F.neg (F.mul (x, y)) }} // pull neg outside a product
  //, {{ \ x y -> F.div (x, F.neg y) == F.neg (F.div (x, y)) }} // pull neg outside a quotient
  //, {{ \ x y -> F.div (F.neg x, y) == F.neg (F.div (x, y)) }} // pull neg outside a quotient
  , {{ \ x -> F.neg (F.neg x) == F.normalize x }} // double negative

  // normalization
  // ... eliminate normalization in a argument position
  , {{ \ x y -> F.mul (F.normalize x, y) == F.mul (x, y) }}
  , {{ \ x y -> F.mul (x, F.normalize y) == F.mul (x, y) }}
  // , {{ \ x y -> F.div (F.normalize x, y) == F.div (x, y) }}
  // , {{ \ x y -> F.div (x, F.normalize y) == F.div (x, y) }}
  , {{ \ x y -> F.add (F.normalize x, y) == F.add (x, y) }}
  , {{ \ x y -> F.add (x, F.normalize y) == F.add (x, y) }}
  , {{ \ x -> F.neg (F.normalize x) == F.neg x }}
  , {{ \ x -> F.normalize (F.normalize x) == F.normalize x }}
  // ... results are normalized
  , {{ \ x y -> F.normalize (F.mul (x, y)) == F.mul (x, y) }}
  // , {{ \ x y -> F.normalize (F.div (x, y)) == F.div (x, y) }}
  , {{ \ x y -> F.normalize (F.add (x, y)) == F.add (x, y) }}
  , {{ \ x   -> F.normalize (F.neg x) == F.neg x }}
  , {{          F.normalize F.field_zero == F.field_zero }}
  , {{          F.normalize F.field_unit == F.field_unit }}
  
  // is_val
  , {{ \ x y -> F.is_val (F.mul (x, y)) == True }}
  // , {{ \ x y -> F.is_val (F.div (x, y)) == True }}
  , {{ \ x y -> F.is_val (F.add (x, y)) == True }}
  , {{ \ x   -> F.is_val (F.neg x) == True }}
  ];

let Fp_2_test_values = eval_list
  {{ [[0,0], [0,1], [1,0], [2^^200, 2^^10], [3^^100, 11], [`(p+1), 2], [7, `(p+5)], [-1,-2]]:[_]t_Fp_2 }};

let test_fp2_single t = 
    for Fp_2_test_values (\v -> prove z3 {{ t v }} );

let test_fp2_double t =
  for Fp_2_test_values (\v -> for Fp_2_test_values (\w -> prove z3 {{ t v w}} ));

// for (alg_laws_for_field {{Fp}}) test_cryptol;
print "Fp";
fp_laws <- for (alg_laws_for_field {{Fp}}) (\ t -> prove_cryptol t []);

print "Fp_2";
fp2_laws <- for (alg_laws_for_field {{Fp_2}}) (\ t -> prove_cryptol t []);

print "Fp_6";
fp6_laws <- for (alg_laws_for_field {{Fp_6}}) (\ t -> prove_cryptol t []);

print "Fp_12";
fp12_laws <- for (alg_laws_for_field {{Fp_12}}) (\ t -> prove_cryptol t []);
fp12_ring_laws <- for (base_alg_laws_for_ring {{Fp_12}})
  (\ t -> custom_prove_cryptol t do { rw_with fp12_laws; w4_unint_z3 ["Fp_12"]; });

// When F_to_G: t_F -> t_G is a homomorphism for fields F and G
let homomorphism_laws F_to_G F G =
  [ {{ F_to_G F.field_zero == G.field_zero }}
  , {{ F_to_G F.field_unit == G.field_unit }}
  , {{ \ x y -> F_to_G (F.add (x,y)) == G.add (F_to_G x, F_to_G y) }}
  , {{ \ x y -> F_to_G (F.sub (x,y)) == G.sub (F_to_G x, F_to_G y) }}
  , {{ \ x y -> F_to_G (F.mul (x,y)) == G.mul (F_to_G x, F_to_G y) }}
  // , {{ \ x y -> F_to_G (F.div (x,y)) == G.div (F_to_G x, F_to_G y) }}
  , {{ \ x -> F_to_G (F.neg x) == G.neg (F_to_G x) }}
  // ?? , {{ \ x -> F_to_G (F.normalize x) == G.normalize (F_to_G x) }}
  ];

print "Fp_to_Fp_2";
fp_to_fp2_thms <- for (homomorphism_laws {{ Fp_to_Fp_2}} {{ Fp}} {{Fp_2}}) (\ t -> prove_cryptol t []);

/*
////////////////
//
// Cancellation.  These rules are order-sensitive!  SAW currently applies rules in the
// opposite order they are added to simpset, so in `addsimps [a,b] (addsimps [c,d] empty_ss`,
// rules are tried in order b, a, d, c.  So "catch-all" rules must appear first.

let {{ cancel: {t} Field_rep t -> t -> t -> t
       cancel F x y = F.div (F.normalize x, F.normalize y) }};

let cancel_rules F =
  [ {{ \x y z -> cancel F x F.mul(y,z) == F.mul (y, cancel F x z) }}
  , {{ \x z -> cancel F x F.mul (x, z)) ==  if F.is_zero(x) then F.field_zero else F.normalize z }}
  , {{ \x y -> cancel F x (F.sq y) == F.mul (x, (F.sq (cancel F x y)))
  , {{ \x y -> cancel F (F.sq x) (F.sq y) == F.sq (cancel F  x y) }}
  , {{ \x y z -> cancel F (F.mul (x, y)) z = cancel F x (cancel F y z) }}
  , {{ \x y z -> (F.mul (x,y) == z) == (y == cancel F x z) }}
  ];

*/
