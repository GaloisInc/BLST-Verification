/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

import "../spec/ShortWeierstrassCurve.cry";
import "../spec/implementation/Types.cry";
import "../spec/implementation/CurveOperation.cry";

let POINTonE2_add_spec = do {
  out_ptr <- crucible_alloc POINTonE2_type;
  (p1, p1_ptr) <- ptr_to_fresh_readonly "p1" POINTonE2_type;
  (p2, p2_ptr) <- ptr_to_fresh_readonly "p2" POINTonE2_type;
  crucible_precond {{ POINTonE2_invariant p1 /\ POINTonE2_invariant p2 }};
  crucible_execute_func [out_ptr, p1_ptr, p2_ptr];
  if use_abs_method
  then do {
    out <- crucible_fresh_var "new_POINTonE2_add_out" POINTonE2_type;
    crucible_points_to out_ptr (crucible_term out);
    crucible_postcond {{ POINTonE2_invariant out }};
    crucible_postcond {{ POINTonE2_abs out == point_add Fp_2 (POINTonE2_abs p1) (POINTonE2_abs p2)}};
    }
  else
    crucible_points_to out_ptr (crucible_term  {{ POINTonE2_rep (point_add Fp_2 (POINTonE2_abs p1) (POINTonE2_abs p2)) }} );
};

POINTonE2_add_ov <- custom_verify "POINTonE2_add"
                      (foldr concat [vec_fp2_overrides, fp2_overrides] [vec_is_zero_fp2_ov])
                      POINTonE2_add_spec
                      (do {
                        unfolding ["POINTonE2_rep","POINTonE2_abs","point_add", "select"];
                        apply_fp2_rewrites;
                        w4_unint_z3 fp2_unints;
                      });

let POINTonE2_add_alias_1_2_spec = do {
  (p1, p1_ptr) <- ptr_to_fresh "p1" POINTonE2_type;
  (p2, p2_ptr) <- ptr_to_fresh_readonly "p2" POINTonE2_type;
  crucible_precond {{ POINTonE2_invariant p1 /\ POINTonE2_invariant p2 }};
  crucible_execute_func [p1_ptr, p1_ptr, p2_ptr];
  if use_abs_method
  then do {
    p1 <- crucible_fresh_var "new_POINTonE2_add_p1" POINTonE2_type;
    crucible_points_to p1_ptr (crucible_term p1);
    crucible_postcond {{ POINTonE2_invariant p1 }};
    crucible_postcond {{ POINTonE2_abs p1 == point_add Fp_2 (POINTonE2_abs p1) (POINTonE2_abs p2)}};
    }
  else
    crucible_points_to p1_ptr (crucible_term  {{ POINTonE2_rep (point_add Fp_2 (POINTonE2_abs p1) (POINTonE2_abs p2)) }} );
};

POINTonE2_add_alias_1_2_ov <- custom_verify "POINTonE2_add"
                      (foldr concat [vec_fp2_overrides, fp2_overrides] [vec_is_zero_fp2_ov])
                      POINTonE2_add_alias_1_2_spec
                      (do {
                        unfolding ["POINTonE2_rep","POINTonE2_abs","point_add", "select"];
                        apply_fp2_rewrites;
                        w4_unint_z3 fp2_unints;
                      });

let POINTonE2_add_affine_spec = do {
  out_ptr <- crucible_alloc POINTonE2_type;
  (p1, p1_ptr) <- ptr_to_fresh_readonly "p1" POINTonE2_type;
  (p2, p2_ptr) <- ptr_to_fresh_readonly "p2" POINTonE2_affine_type;
  crucible_precond {{ POINTonE2_invariant p1 /\ POINTonE2_affine_invariant p2 }};
  crucible_execute_func [out_ptr, p1_ptr, p2_ptr];
  if use_abs_method
  then do { // TODO: this fails
    out <- crucible_fresh_var "new_POINTonE2_add_out" POINTonE2_type;
    crucible_points_to out_ptr (crucible_term out);
    crucible_postcond {{ POINTonE2_invariant out }};
    crucible_postcond {{ POINTonE2_abs out == point_add_affine Fp_2 (POINTonE2_abs p1) (POINTonE2_affine_abs p2)}};
    }
  else
    crucible_points_to out_ptr (crucible_term  {{ POINTonE2_rep (point_add_affine Fp_2 (POINTonE2_abs p1) (POINTonE2_affine_abs p2)) }} );
};

POINTonE2_add_affine_ov <- custom_verify "POINTonE2_add_affine"
                      (foldr concat [vec_fp2_overrides, fp2_overrides] [vec_is_zero_fp2_ov])
                      POINTonE2_add_affine_spec
                      (do {
                        unfolding ["POINTonE2_rep","POINTonE2_abs","POINTonE2_affine_rep","POINTonE2_affine_abs","point_add_affine", "select"];
                        apply_fp2_rewrites;
                        w4_unint_z3 fp2_unints;
                      });

let POINTonE2_add_affine_alias_1_2_spec = do {
  (p1, p1_ptr) <- ptr_to_fresh "p1" POINTonE2_type;
  (p2, p2_ptr) <- ptr_to_fresh_readonly "p2" POINTonE2_affine_type;
  crucible_precond {{ POINTonE2_invariant p1 /\ POINTonE2_affine_invariant p2 }};
  crucible_execute_func [p1_ptr, p1_ptr, p2_ptr];
  if use_abs_method
  then do { // TODO: this fails
    p1 <- crucible_fresh_var "new_POINTonE2_add_p1" POINTonE2_type;
    crucible_points_to p1_ptr (crucible_term p1);
    crucible_postcond {{ POINTonE2_invariant p1 }};
    crucible_postcond {{ POINTonE2_abs p1 == point_add_affine Fp_2 (POINTonE2_abs p1) (POINTonE2_affine_abs p2)}};
    }
  else
    crucible_points_to p1_ptr (crucible_term  {{ POINTonE2_rep (point_add_affine Fp_2 (POINTonE2_abs p1) (POINTonE2_affine_abs p2)) }} );
};


POINTonE2_add_affine_alias_1_2_ov <- custom_verify "POINTonE2_add_affine"
                      (foldr concat [vec_fp2_overrides, fp2_overrides] [vec_is_zero_fp2_ov])
                      POINTonE2_add_affine_alias_1_2_spec
                      (do {
                        unfolding ["POINTonE2_rep","POINTonE2_abs","POINTonE2_affine_rep","POINTonE2_affine_abs","point_add_affine", "select"];
                        apply_fp2_rewrites;
                        w4_unint_z3 fp2_unints;
                      });

let POINTonE2_double_spec = do {
  out_ptr <- crucible_alloc POINTonE2_type;
  (p1, p1_ptr) <- ptr_to_fresh_readonly "p1" POINTonE2_type;
  crucible_precond {{ POINTonE2_invariant p1 }};
  crucible_execute_func [out_ptr, p1_ptr];
  if use_abs_method
  then do {
    out <- crucible_fresh_var "new_POINTonE2_double_out" POINTonE2_type;
    crucible_points_to out_ptr (crucible_term out);
    crucible_postcond {{ POINTonE2_invariant out }};
    crucible_postcond {{ POINTonE2_abs out == point_double Fp_2 (POINTonE2_abs p1)}};
    }
  else
    crucible_points_to out_ptr (crucible_term {{ POINTonE2_rep (point_double Fp_2 (POINTonE2_abs p1)) }});
};

POINTonE2_double_ov <- really_custom_verify "POINTonE2_double"
                      (foldr concat [vec_fp2_overrides, fp2_overrides] [vec_is_zero_fp2_ov])
                      POINTonE2_double_spec
                      (do {
                        unfolding ["POINTonE2_rep","POINTonE2_abs","POINTonE2_affine_rep","POINTonE2_affine_abs","point_double"];
                        apply_fp2_rewrites;
                        w4_unint_z3 fp2_unints;
                      });

let POINTonE2_double_alias_1_2_spec = do {
  (p1, p1_ptr) <- ptr_to_fresh "p1" POINTonE2_type;
  crucible_precond {{ POINTonE2_invariant p1 }};
  crucible_execute_func [p1_ptr, p1_ptr];
  if use_abs_method
  then do {
    p1 <- crucible_fresh_var "new_POINTonE2_double_p1" POINTonE2_type;
    crucible_points_to p1_ptr (crucible_term p1);
    crucible_postcond {{ POINTonE2_invariant p1 }};
    crucible_postcond {{ POINTonE2_abs p1 == point_double Fp_2 (POINTonE2_abs p1)}};
    }
  else
    crucible_points_to p1_ptr (crucible_term {{ POINTonE2_rep (point_double Fp_2 (POINTonE2_abs p1)) }});
};

POINTonE2_double_alias_1_2_ov <- really_custom_verify "POINTonE2_double"
                      (foldr concat [vec_fp2_overrides, fp2_overrides] [vec_is_zero_fp2_ov])
                      POINTonE2_double_alias_1_2_spec
                      (do {
                        unfolding ["POINTonE2_rep","POINTonE2_abs","POINTonE2_affine_rep","POINTonE2_affine_abs","point_double"];
                        apply_fp2_rewrites;
                        w4_unint_z3 fp2_unints;
                      });
