/*
 * Copyright (c) 2021 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

import "../spec/Parameters.cry";
import "../spec/rfc8017.cry";
import "../spec/Serialization.cry";
import "../spec/ShortWeierstrassCurve.cry";

import "../spec/implementation/CurveOperation.cry";
import "../spec/implementation/Types.cry";

let fromx_mont_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;

  // TODO: Do I need this invariant?
  llvm_precond {{ fp_invariant a }};

  p_ptr <- alloc_init_readonly vec384_type (llvm_term {{ vec384_rep (from_Fp `p) }});

  crucible_execute_func [ret_ptr, a_ptr, p_ptr, crucible_term {{ 0x89f3fffcfffcfffd }}];

  crucible_points_to ret_ptr (crucible_term {{ vec384_rep (from_Fp (fp_abs a)) }});
};

fromx_mont_384_ov <- verify_x86 "fromx_mont_384" fromx_mont_384_spec;

let POINTonE1_affine_Compress_BE_spec = do {
  out_ptr <- crucible_alloc (llvm_array 48 (llvm_int 8));
  (inp, inp_ptr) <- ptr_to_fresh_readonly "in" POINTonE1_affine_type;

  crucible_precond {{ POINTonE1_affine_invariant inp }};

  // Nonzero
  //llvm_precond {{ ((fp_abs inp.0) != Fp.field_zero) || ((fp_abs inp.1) != Fp.field_zero) }};

  crucible_execute_func [out_ptr, inp_ptr];

  // TODO: If I want to use the x_string_E1 form below, I need the Nonzero
  // precond (which also requires proving the nonzero postcond in
  // POINTonE1_from_Jacobian_spec)
  // crucible_points_to out_ptr (crucible_term {{ x_string_E1 (POINTonE1_affine_abs inp ) }});
  crucible_points_to out_ptr (crucible_term {{ I2OSP`{48} ((POINTonE1_affine_abs inp ).0) }});

  // TODO: Dedeup with sgn0x_pty_mont_384_spec
  crucible_return (crucible_term {{ (zext [2*(fp_abs inp.1)>`p, (fp_abs inp.1)%2 == 1]):[64] }});
};

POINTonE1_affine_Compress_BE_ov <- really_verify "POINTonE1_affine_Compress_BE"
  [fromx_mont_384_ov, sgn0x_pty_mont_384_ov]
  POINTonE1_affine_Compress_BE_spec;

let POINTonE1_from_Jacobian_spec = do {
  out_ptr <- crucible_alloc POINTonE1_type;
  (inp, inp_ptr) <- ptr_to_fresh_readonly "in" POINTonE1_type;

  // TODO: Do I need these invariants?
  crucible_precond {{ POINTonE1_invariant inp }};
  crucible_precond {{ is_point_projective E (POINTonE1_abs inp) }}; // on the curve

  //crucible_precond {{ fp_abs (inp.2) != Fp.field_zero }};
  crucible_precond {{ ~(is_zero Fp ((POINTonE1_abs inp).2)) }};

  crucible_execute_func [out_ptr, inp_ptr];

  let out = {{ POINTonE1_affine_rep (affinify E (POINTonE1_abs inp)) }};

  //crucible_postcond {{ out.0 == expected_out.0 }};

  // TODO: Why doesn't this fix the overrides?  A: It does if you comment out
  // the conditional that skips the affinify in the C code
  // llvm_postcond {{ fp_invariant out.0 }};
  // llvm_postcond {{ fp_invariant out.1 }};

  crucible_postcond {{ POINTonE1_affine_invariant out }};

  // Nonzero
  //llvm_postcond {{ ((fp_abs out.0) != Fp.field_zero) || ((fp_abs out.1) != Fp.field_zero) }};

  // TODO: Cleaner to use points_to_untyped?
  //crucible_points_to_untyped out_ptr (crucible_term out);
  crucible_points_to (crucible_field out_ptr "X") (crucible_term {{ out.0 }});
  crucible_points_to (crucible_field out_ptr "Y") (crucible_term {{ out.1 }});
};

// commute mul once -- use with caution!
mul_commutes_fp_thm <- prove_cryptol {{ \x y  -> Fp.mul (x, y) == apply Fp.mul (y,x) }} [];

POINTonE1_from_Jacobian_ov <- really_custom_verify "POINTonE1_from_Jacobian"
  (concat [reciprocal_fp_ov] (concat vec_select_asm_ovs fp_overrides))
  POINTonE1_from_Jacobian_spec
  do {
    (simplify (addsimp mul_commutes_fp_thm empty_ss));
    unfolding ["POINTonE1_affine_invariant", "POINTonE1_affine_rep"];
    (apply_fp_rewrites);
    (print_goal);
    w4_unint_z3 fp_unints;
  };

// Have the "Z=0 <=> infinity" issue again; see the notes in `map_to_g1.saw`.
// So, passing in a value (0,0,1) would give a result not agreeing with
// the specification.

let blst_p1_compress_spec = do {
  out_ptr <- crucible_alloc (llvm_array 48 (llvm_int 8));
  (inp, inp_ptr) <- ptr_to_fresh_readonly "in" POINTonE1_type;
  crucible_precond {{ POINTonE1_invariant inp }};
  //crucible_precond {{ inp.2 == zero }};

  // TODO: Remove this precond once nonzero case proof goes through
  //crucible_precond {{ fp_abs (inp.2) != Fp.field_zero }};
  crucible_precond {{ ~(is_zero Fp ((POINTonE1_abs inp).2)) }};

  // TODO: For some reason this precond is insufficient to exclude the case
  // where the input is already in affine coordinates
  crucible_precond {{ fp_abs (inp.2) != Fp.field_unit }};

  crucible_precond {{ is_point_projective E (POINTonE1_abs inp) }}; // on the curve

  crucible_execute_func [out_ptr, inp_ptr];
  //crucible_postcond {{ is_point_O E (affinify E (POINTonE1_abs inp)) }};
  crucible_points_to out_ptr (crucible_term {{ serialize_E1 (affinify E (POINTonE1_abs inp)) }});
  //crucible_points_to out_ptr (crucible_term {{ split`{48,8} (0xc0 # zero) }});
};

// This is the conditional rule showing that the Z coordinate check does the right thing
// This may be provable in SAW but for now we assume it as an algebraic fact.
is_point_O_thm'' <- admit_cryptol (rewrite (cryptol_ss())
  {{ \p -> peq (fp_abs(p.2)) (Fp.field_zero) ==
           if is_point_projective E (POINTonE1_abs p)
           then is_point_O E (affinify E (POINTonE1_abs p))
           else apply peq (fp_abs(p.2)) (Fp.field_zero) }});

/*
blst_p1_compress_ov <- really_custom_verify "blst_p1_compress"
  //(concat [reciprocal_fp_ov] (concat point_op_overrides fp_overrides))
  (concat [POINTonE1_from_Jacobian_ov, reciprocal_fp_ov, sqr_fp_ov, POINTonE1_affine_Compress_BE_ov, vec_is_equal_fp_ov] (concat mul_fp_ovs point_op_overrides))
  blst_p1_compress_spec
    do {
     simplify (addsimp vec_is_zero_call_thm empty_ss);
     simplify (addsimp is_point_O_thm'' (cryptol_ss()));
     (print_goal);
     w4_unint_z3 ec_mult_unints;
  };
  */
