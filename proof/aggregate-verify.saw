/*
let do_prove = true;
include "proof-helpers.saw";
*/

let {{
  // TODO: Define
  all_distinct: {n, m} [n][m][8] -> Bit
  all_distinct messages = undefined
  AGGR_MIN_SIG        = 0x00000001
  AGGR_MIN_PK         = 0x00000002
  AGGR_SIGN_SET       = 0x00000010
  AGGR_GT_SET         = 0x00000020
  AGGR_HASH_OR_ENCODE = 0x00000040
  finalverify_A: ProjectivePoint t_Fp -> t_Fp_12 -> Bit
  finalverify_A e1 ctx_GT = is_head_one /\ is_tail_zero where
    e1_affine = affinify E e1
    GT0 = miller_loop_opt_checked e1_affine (POINTonE2_affine_abs (G2.0, G2.1))
    GT1 = fp12_conjugate GT0
    GT2 = Fp_12.mul (GT1, ctx_GT)
    GT3 = fp12_rep (final_exponentiation_impl GT2)
    [[a0, a1, a2], [a3, a4, a5]] = GT3
    is_head_one = Fp_2.is_equal (fp2_abs a0, fp2_abs one_mont_px)
    is_tail_zero = Fp_2.is_equal (fp2_abs a1, Fp_2.field_zero)
                /\ Fp_2.is_equal (fp2_abs a2, Fp_2.field_zero)
                /\ Fp_2.is_equal (fp2_abs a3, Fp_2.field_zero)
                /\ Fp_2.is_equal (fp2_abs a4, Fp_2.field_zero)
                /\ Fp_2.is_equal (fp2_abs a5, Fp_2.field_zero)
}};

let msg_len = 32;
let dst_len = 43;
let aug_len = 0;
let N_MAX = 2;

let all_distinct_spec n = do {
  let message_len = 32;
  (messages, messages_ptr) <-
      ptr_to_fresh_readonly "messages"
                            (llvm_array n
                                        (llvm_array message_len (llvm_int 8)));
  llvm_execute_func [ llvm_term {{ `n : [64] }}
                    , llvm_term {{ `message_len : [64] }} 
                    , messages_ptr ];
  llvm_return (llvm_term {{ bool_to_limb (all_distinct messages) }});
};

// TODO: Prove?
all_distinct_1_ov <- admit "all_distinct" (all_distinct_spec 1);

all_distinct_3_ov <- admit "all_distinct" (all_distinct_spec 3);

all_distinct_4_ov <- admit "all_distinct" (all_distinct_spec 4);

let blst_pairing_finalverify_A_spec = do {
  /*
  (ctx, ctx_ptr) <- ptr_to_fresh_readonly "ctx"
                                          (llvm_struct "struct.blst_pairing");
                                          */
  ctx_ptr <- llvm_alloc_readonly (llvm_struct "struct.blst_pairing_st");
  GT <- llvm_fresh_var "GT" vec384fp12_type;
  llvm_precond {{ fp12_invariant GT }};
  AggrSign <- llvm_fresh_var "AggrSign" POINTonE1_type;
  llvm_precond {{ POINTonE1_invariant AggrSign }};
  crucible_precond {{ is_point_projective E (POINTonE1_abs AggrSign) }}; // on the curve
  crucible_precond {{ ~(Fp.is_equal ((fp_abs (AggrSign.2)), Fp.field_zero)) }};
  llvm_points_to (llvm_elem ctx_ptr 0)
                 (llvm_term {{ AGGR_HASH_OR_ENCODE
                            || AGGR_MIN_SIG
                            || AGGR_SIGN_SET
                            || AGGR_GT_SET }});
  llvm_points_to (llvm_elem ctx_ptr 4) (llvm_term GT);
  // AggrSign is a union of POINTonE1 and POINTonE2, so it has the size of a
  // POINTonE2, but in this case it's a POINTonE1.
  llvm_points_to_untyped (llvm_elem ctx_ptr 5) (llvm_term AggrSign);
  llvm_execute_func [ ctx_ptr, llvm_null ];
  llvm_return (llvm_term {{ bool_to_limb (finalverify_A (POINTonE1_abs AggrSign)
                                                        (fp12_abs GT)) }});
};

let blst_pairing_aggregate_pk_in_g2_null_sig_spec ctx_nelems aggr_gt_set = do {
  ctx_ptr <- llvm_alloc (llvm_struct "struct.blst_pairing_st");
  //
  // ctx->ctrl must have AGGR_HASH_OR_ENCODE set and AGGR_MIN_PK unset, but we
  // leave the rest uninterpreted
  ctx_ctrl <- llvm_fresh_var "ctx.ctrl" (llvm_int 32);
  llvm_precond {{ (ctx_ctrl && AGGR_HASH_OR_ENCODE) != 0 }};
  llvm_precond {{ (ctx_ctrl && AGGR_MIN_PK) == 0 }};
  llvm_points_to (llvm_elem ctx_ptr 0) (llvm_term ctx_ctrl);
  //
  // Set ctx.nelems
  llvm_points_to (llvm_elem ctx_ptr 1) (llvm_term {{ `ctx_nelems : [32] }});
  //
  dst_ptr <- llvm_alloc_readonly (llvm_array dst_len (llvm_int 8));
  llvm_points_to dst_ptr (llvm_term {{ DST }});
  llvm_points_to (llvm_elem ctx_ptr 2) dst_ptr;
  llvm_points_to (llvm_elem ctx_ptr 3) (llvm_term {{ `dst_len : [64] }});
  ctx_GT <- if aggr_gt_set
            then llvm_fresh_var "ctx.GT" vec384fp12_type
            else return {{ undefined }};
  if aggr_gt_set
    then do {
      llvm_precond {{ (ctx_ctrl && AGGR_GT_SET) != 0 }};
      llvm_precond {{ fp12_invariant ctx_GT }};
      llvm_points_to (llvm_elem ctx_ptr 4) (llvm_term ctx_GT);
    } else llvm_precond {{ (ctx_ctrl && AGGR_GT_SET) == 0 }};
  ctx_Q0 <- if eval_bool {{ `ctx_nelems == (`N_MAX - 1) }}
            then llvm_fresh_var "ctx.Q0" POINTonE2_affine_type
            else return {{ undefined }};
  ctx_P0 <- if eval_bool {{ `ctx_nelems == (`N_MAX - 1) }}
            then llvm_fresh_var "ctx.P0" POINTonE1_affine_type
            else return {{ undefined }};
  // Technically AggrSign is a POINTonE1 here, but because it's a union type
  // with POINTonE2, it occupies the same space as a POINTonE2.  Therefore, we
  // must use llvm_points_to_untyped
  ctx_AggrSign <- llvm_fresh_var "ctx.AggrSign" POINTonE1_type;
  llvm_points_to_untyped (llvm_elem ctx_ptr 5) (llvm_term ctx_AggrSign);
  //
  // Constrain ctx.P and ctx.Q if approaching N_MAX
  if eval_bool {{ `ctx_nelems == (`N_MAX - 1) }}
  then do {
    llvm_points_to (llvm_elem (llvm_elem ctx_ptr 6) 0) (llvm_term ctx_Q0);
    llvm_points_to (llvm_elem (llvm_elem ctx_ptr 7) 0) (llvm_term ctx_P0);
    llvm_precond {{ POINTonE2_affine_invariant ctx_Q0 }};
    llvm_precond {{ POINTonE1_affine_invariant ctx_P0 }};
  } else do { return (); };
  //
  (pk, pk_ptr) <- ptr_to_fresh_readonly "pk" POINTonE2_affine_type;
  llvm_precond {{ ~(is_point_O E' (POINTonE2_affine_abs pk)) }};
  llvm_precond {{ POINTonE2_affine_invariant pk }};
  //
  let msg_len = 32;
  (msg, msg_ptr) <-
      ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  llvm_execute_func [ ctx_ptr
                    , pk_ptr
                    , llvm_null
                    , msg_ptr
                    , llvm_term {{ `msg_len : [64] }}
                    , llvm_null
                    , llvm_term {{ 0 : [64] }} ];
  let P = {{ POINTonE1_affine_rep
               (affinify E (hash_to_curve_opt_impl (msg, DST))) }};
  if eval_bool {{ `ctx_nelems == (`N_MAX - 1) }}
  then do {
    llvm_points_to (llvm_elem ctx_ptr 1) (llvm_term {{ 0 : [32] }});
    llvm_points_to (llvm_elem ctx_ptr 0)
                   (llvm_term {{ ctx_ctrl || AGGR_GT_SET  || AGGR_MIN_SIG }});
    let GT =
      {{ fp12_rep (F_prod Fp_12
                          [ miller_loop_opt (POINTonE1_affine_abs ctx_P0)
                                            (POINTonE2_affine_abs ctx_Q0)
                          , miller_loop_opt (POINTonE1_affine_abs P)
                                            (POINTonE2_affine_abs pk) ]) }};
    if aggr_gt_set
    then do {
      llvm_points_to (llvm_elem ctx_ptr 4) (llvm_term
        {{ fp12_rep (Fp_12.mul (fp12_abs ctx_GT, fp12_abs GT)) }});
    } else do {
      // ctx->GT is set for the first time
      llvm_points_to (llvm_elem ctx_ptr 4) (llvm_term GT);
    };
  } else do {
    llvm_points_to (llvm_elem ctx_ptr 0)
                   (llvm_term {{ ctx_ctrl || AGGR_MIN_SIG }});
    llvm_points_to (llvm_elem ctx_ptr 1)
                   (llvm_term {{ `ctx_nelems + 1 : [32]}});
    // ctx->GT is unchanged (if set)
    if aggr_gt_set
    then llvm_points_to (llvm_elem ctx_ptr 4) (llvm_term ctx_GT)
    else return ();
    // These postconditions on Q and P are true in the commit case too, but it
    // doesn't matter because they've already been processed in that case, so
    // we ignore them to simplify the proof.
    // ctx.Q[ctx.nelems] == pk
    llvm_points_to (llvm_elem (llvm_elem ctx_ptr 6) ctx_nelems) (llvm_term pk);
    // ctx.P[ctx.nelems] == POINTonE1_affine_rep (affinify E (hash_to_curve_opt_impl (msg, DST)))
    llvm_points_to (llvm_elem (llvm_elem ctx_ptr 7) ctx_nelems)
                   (llvm_term P);
  };
  // DST, dst_len, and AggrSign are unchanged
  llvm_points_to (llvm_elem ctx_ptr 2) dst_ptr;
  llvm_points_to (llvm_elem ctx_ptr 3) (llvm_term {{ `dst_len : [64] }});
  llvm_points_to_untyped (llvm_elem ctx_ptr 5) (llvm_term ctx_AggrSign);
  llvm_return (llvm_term {{ `BLST_SUCCESS : [32] }});
};

Hash_to_G1_ov <- prove_Hash_to_G1_impl_ov msg_len dst_len aug_len;

hash_to_curve_opt_impl_POINTonE1_from_Jacobian_precond_thms <-
  core_verify_pk_in_g2_POINTonE1_from_Jacobian_hash_preconds msg_len dst_len aug_len;

normalize_hash_to_curve_opt_impl_rws <-
  normalize_hash_to_curve_impl_thms msg_len dst_len aug_len;

blst_pairing_aggregate_pk_in_g2_null_sig_0_ov <- custom_verify
  "blst_pairing_aggregate_pk_in_g2"
  (foldr concat [vec_fp2_overrides, vec_overrides, mul_fp12_ovs]
                [ Hash_to_G1_ov
                , POINTonE1_from_Jacobian_alias_ov
                , vec_copy_2fp_ov
                , miller_loop_n_2_ov ])
  // AGGR_GT_SET will always be set in null_sig case for N_MAX == 2
  (blst_pairing_aggregate_pk_in_g2_null_sig_spec 0 true)
  do {
    unfolding [ "POINTonE2_affine_invariant"
              , "is_point_O"
              , "same_point_affine"
              , "point_O"
              , "POINTonE2_affine_abs"
              , "BLSMinimalSignatureSize::DST" ];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with POINTonE1_base_thms;
    unfolding ["POINTonE1_rep"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with fp_rep_thms;
    rw_with normalize_hash_to_curve_opt_impl_rws;
    rw_with hash_to_curve_opt_impl_POINTonE1_from_Jacobian_precond_thms;
    rw_with remove_ho_rules;
    print_goal;
    //print_readably;
    w4_unint_z3 (concat [ "affinify_E"
                        , "hash_to_curve_opt_impl" ]
                        BasicVerify_A_unints);
  };

unfold_all_POINTonE2_affine_invariant_2_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 x2 -> all POINTonE2_affine_invariant [x1, x2] ==
               (POINTonE2_affine_invariant x1 /\
                POINTonE2_affine_invariant x2) }}) [];

unfold_all_POINTonE1_affine_invariant_2_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 x2 -> all POINTonE1_affine_invariant [x1, x2] ==
               (POINTonE1_affine_invariant x1 /\
                POINTonE1_affine_invariant x2) }}) [];

let map_size_2_term = parse_core "\\(f : ((Vec 6 (Vec 64 Bool)) * (Vec 6 (Vec 64 Bool))) -> (Integer * Integer)) -> \\(y : Vec 2 ((Vec 6 (Vec 64 Bool)) * (Vec 6 (Vec 64 Bool)))) -> map ((Vec 6 (Vec 64 Bool)) * (Vec 6 (Vec 64 Bool))) (Integer * Integer) f 2 y";

// NOTE: This is admitted so that it can be polymorphic.  Proving it would
// require monomorphic input types and would reduce its usefulness.  However,
// it is trivially true.
unfold_map <- admit_cryptol (rewrite (cryptol_ss())
  {{ \f xs -> (map_size_2_term f xs) == ([f x1, f x2] where [x1, x2] = xs) }});

// A proof for the first time n == N_MAX (AGGR_GT_SET is unset)
blst_pairing_aggregate_pk_in_g2_null_sig_1_first_commit_ov <- custom_verify
  "blst_pairing_aggregate_pk_in_g2"
  (foldr concat [vec_fp2_overrides, vec_overrides, mul_fp12_ovs]
                [ Hash_to_G1_ov
                , POINTonE1_from_Jacobian_alias_ov
                , vec_copy_2fp_ov
                , miller_loop_n_2_ov ])
  (blst_pairing_aggregate_pk_in_g2_null_sig_spec 1 false)
  do {
    // BEGIN N == 2 specific
    rw_with [ unfold_all_POINTonE1_affine_invariant_2_thm
            , unfold_all_POINTonE2_affine_invariant_2_thm ];
    unfolding [ "Cryptol::map" ];
    rw_with [unfold_map];
    // END N == 2 specific
    unfolding [ "POINTonE2_affine_invariant"
              , "is_point_O"
              , "same_point_affine"
              , "point_O"
              , "POINTonE2_affine_abs"
              , "BLSMinimalSignatureSize::DST" ];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with POINTonE1_base_thms;
    unfolding ["POINTonE1_rep"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with fp_rep_thms;
    rw_with normalize_hash_to_curve_opt_impl_rws;
    rw_with hash_to_curve_opt_impl_POINTonE1_from_Jacobian_precond_thms;
    // BEGIN N == 2 specific
    rw_with [normalize_affinify_thm, F_prod_Fp_12_thm];
    // END N == 2 specific
    rw_with remove_ho_rules;
    print_goal;
    //print_readably;
    w4_unint_z3 (concat [ "affinify_E"
                        , "fp12_rep"
                        , "F_prod_Fp_12"
                        , "miller_loop_opt"
                        , "hash_to_curve_opt_impl" ]
                        BasicVerify_A_unints);
  };

blst_pairing_aggregate_pk_in_g2_null_sig_1_nth_commit_ov <- custom_verify
  "blst_pairing_aggregate_pk_in_g2"
  (foldr concat [vec_fp2_overrides, vec_overrides, mul_fp12_ovs]
                [ Hash_to_G1_ov
                , POINTonE1_from_Jacobian_alias_ov
                , vec_copy_2fp_ov
                , miller_loop_n_2_ov ])
  (blst_pairing_aggregate_pk_in_g2_null_sig_spec 1 true)
  do {
    rw_with [ unfold_all_POINTonE1_affine_invariant_2_thm
            , unfold_all_POINTonE2_affine_invariant_2_thm ];
    unfolding [ "Cryptol::map" ];
    rw_with [unfold_map];
    unfolding [ "POINTonE2_affine_invariant"
              , "is_point_O"
              , "same_point_affine"
              , "point_O"
              , "POINTonE2_affine_abs"
              , "BLSMinimalSignatureSize::DST" ];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with POINTonE1_base_thms;
    unfolding ["POINTonE1_rep"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with fp_rep_thms;
    rw_with normalize_hash_to_curve_opt_impl_rws;
    rw_with hash_to_curve_opt_impl_POINTonE1_from_Jacobian_precond_thms;
    rw_with [normalize_affinify_thm, F_prod_Fp_12_thm];
    // BEGIN nth_commit specific
    rw_with fp12_rep_thms;
    // END nth_commit specific
    rw_with remove_ho_rules;
    print_goal;
    //print_readably;
    w4_unint_z3 (concat [ "affinify_E"
                        , "fp12_rep"
                        , "F_prod_Fp_12"
                        , "miller_loop_opt"
                        , "hash_to_curve_opt_impl" ]
                        BasicVerify_A_unints);
  };

let blst_pairing_aggregate_pk_in_g2_sig_spec = do {
  ctx_ptr <- llvm_alloc (llvm_struct "struct.blst_pairing_st");
  //
  // ctx->ctrl must have AGGR_HASH_OR_ENCODE set and AGGR_MIN_PK unset, but we
  // leave the rest uninterpreted
  ctx_ctrl <- llvm_fresh_var "ctx.ctrl" (llvm_int 32);
  llvm_precond {{ (ctx_ctrl && AGGR_HASH_OR_ENCODE) != 0 }};
  llvm_precond {{ (ctx_ctrl && AGGR_MIN_PK) == 0 }};
  llvm_precond {{ (ctx_ctrl && AGGR_GT_SET) == 0 }};
  llvm_precond {{ (ctx_ctrl && AGGR_SIGN_SET) == 0 }};
  llvm_points_to (llvm_elem ctx_ptr 0) (llvm_term ctx_ctrl);
  //
  // Set ctx.nelems
  llvm_points_to (llvm_elem ctx_ptr 1) (llvm_term {{ 0 : [32] }});
  //
  dst_ptr <- llvm_alloc_readonly (llvm_array dst_len (llvm_int 8));
  llvm_points_to dst_ptr (llvm_term {{ DST }});
  llvm_points_to (llvm_elem ctx_ptr 2) dst_ptr;
  llvm_points_to (llvm_elem ctx_ptr 3) (llvm_term {{ `dst_len : [64] }});
  //
  (pk, pk_ptr) <- ptr_to_fresh_readonly "pk" POINTonE2_affine_type;
  llvm_precond {{ ~(is_point_O E' (POINTonE2_affine_abs pk)) }};
  // TODO: Do I need this if keyvalidate is a precond?
  llvm_precond {{ POINTonE2_affine_invariant pk }};
  //
  (sig, sig_ptr) <- ptr_to_fresh_readonly "sig" POINTonE1_affine_type;
  llvm_precond {{ ~ (is_point_O E (POINTonE1_affine_abs sig)) }};
  llvm_precond {{ POINTonE1_affine_invariant sig }};
  llvm_precond {{ is_point_affine E (POINTonE1_affine_abs sig) }};
  llvm_precond {{ is_in_g1_impl (POINTonE1_affine_abs sig) }};
  // TODO: This handles vec_is_zero, but I think there are rewrite rules to
  // derive is_point_O from (or to) this, which might make for a better spec,
  // and an uglier proof.
  llvm_precond {{ ~(Fp.is_equal (fp_abs x, Fp.field_zero) /\
                    Fp.is_equal (fp_abs y, Fp.field_zero))
                  where (x, y) = sig }};
  //
  let msg_len = 32;
  (msg, msg_ptr) <-
      ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  llvm_execute_func [ ctx_ptr
                    , pk_ptr
                    , sig_ptr
                    , msg_ptr
                    , llvm_term {{ `msg_len : [64] }}
                    , llvm_null
                    , llvm_term {{ 0 : [64] }} ];
  llvm_points_to (llvm_elem ctx_ptr 0)
                 (llvm_term {{ ctx_ctrl || AGGR_SIGN_SET  || AGGR_MIN_SIG }});
  let P = {{ POINTonE1_affine_rep
               (affinify E (hash_to_curve_opt_impl (msg, DST))) }};
  llvm_points_to (llvm_elem ctx_ptr 1) (llvm_term {{ 1 : [32]}});
  // These postconditions on Q and P are true in the commit case too, but it
  // doesn't matter because they've already been processed in that case, so
  // we ignore them to simplify the proof.
  // ctx.Q[ctx.nelems] == pk
  llvm_points_to (llvm_elem (llvm_elem ctx_ptr 6) 0) (llvm_term pk);
  // ctx.P[ctx.nelems] == POINTonE1_affine_rep (affinify E (hash_to_curve_opt_impl (msg, DST)))
  llvm_points_to (llvm_elem (llvm_elem ctx_ptr 7) 0) (llvm_term P);
  // DST, and dst_len are unchanged
  llvm_points_to (llvm_elem ctx_ptr 2) dst_ptr;
  llvm_points_to (llvm_elem ctx_ptr 3) (llvm_term {{ `dst_len : [64] }});
  // AggrSign contains FROM_AFFINE(sig).  Untyped because AggrSign is a union
  // of POINTonE1 and POINTonE2
  llvm_points_to_untyped
      (llvm_elem ctx_ptr 5)
      (llvm_term {{ ( sig.0, sig.1, one_mont_p ) }});
  llvm_return (llvm_term {{ `BLST_SUCCESS : [32] }});
};

blst_pairing_aggregate_pk_in_g2_sig_ov <- custom_verify
  "blst_pairing_aggregate_pk_in_g2"
  (foldr concat [vec_fp2_overrides, vec_overrides, mul_fp12_ovs]
                [ Hash_to_G1_ov
                , POINTonE1_from_Jacobian_alias_ov
                , POINTonE1_in_G1_ov
                , vec_copy_2fp_ov
                , miller_loop_n_2_ov ])
  blst_pairing_aggregate_pk_in_g2_sig_spec
  do {
    unfolding [ "POINTonE2_affine_invariant"
              , "POINTonE1_affine_invariant"
              , "is_point_O"
              , "same_point_affine"
              , "point_O"
              , "POINTonE2_affine_abs"
              , "BLSMinimalSignatureSize::DST" ];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with POINTonE1_base_thms;
    unfolding ["POINTonE1_rep"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with fp_rep_thms;
    rw_with normalize_hash_to_curve_opt_impl_rws;
    rw_with hash_to_curve_opt_impl_POINTonE1_from_Jacobian_precond_thms;
    rw_with remove_ho_rules;
    print_goal;
    //print_readably;
    w4_unint_z3 (concat [ "affinify_E"
                        , "hash_to_curve_opt_impl" ]
                        BasicVerify_A_unints);
  };

let demo_BasicAggregateVerify_A_spec n = do {
  global_alloc_init "demo_DST_A" {{ DST }};
  (sig, sig_ptr) <- ptr_to_fresh_readonly "sig" compressed_E1_rep_type;
  (pks, pks_ptr) <-
      ptr_to_fresh_readonly "pks" (llvm_array n compressed_E2_rep_type);
  let message_len = 32;
  (messages, messages_ptr) <-
      ptr_to_fresh_readonly "messages"
                            (llvm_array n
                                        (llvm_array message_len (llvm_int 8)));
  verify_A_sig_preconds sig;
  llvm_precond {{ all verify_A_pk_precond pks }};
  llvm_precond {{ all_distinct messages }};
  /*
  llvm_precond {{ verify_A_pk_precond (pks@0) }};
  llvm_precond {{ verify_A_pk_precond (pks@1) }};
  llvm_precond {{ verify_A_pk_precond (pks@2) }};
  */
  llvm_execute_func [ llvm_term {{ `n : [64] }}
                    , llvm_term {{ `message_len : [64] }}
                    , pks_ptr
                    , messages_ptr
                    , sig_ptr ];
  llvm_return (llvm_term
      {{ bool_to_limb (CoreAggregateVerify (split`{n} (join (join pks))) messages (join sig)) }});
};

unfold_all_POINTonE2_affine_invariant_3_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 x2 x3 -> all POINTonE2_affine_invariant [x1, x2, x3] ==
                  (POINTonE2_affine_invariant x1 /\
                   POINTonE2_affine_invariant x2 /\
                   POINTonE2_affine_invariant x3) }}) [];

unfold_all_POINTonE1_affine_invariant_3_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 x2 x3 -> all POINTonE1_affine_invariant [x1, x2, x3] ==
                  (POINTonE1_affine_invariant x1 /\
                   POINTonE1_affine_invariant x2 /\
                   POINTonE1_affine_invariant x3) }}) [];

unfold_all_verify_A_pk_precond_3_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 x2 x3 -> all verify_A_pk_precond [x1, x2, x3] ==
            (verify_A_pk_precond x1 /\
             verify_A_pk_precond x2 /\
             verify_A_pk_precond x3) }}) ["verify_A_pk_precond"];

unfold_all_POINTonE2_affine_invariant_4_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 x2 x3 x4 -> all POINTonE2_affine_invariant [x1, x2, x3, x4] ==
                     (POINTonE2_affine_invariant x1 /\
                      POINTonE2_affine_invariant x2 /\
                      POINTonE2_affine_invariant x3 /\
                      POINTonE2_affine_invariant x4) }}) [];

unfold_all_POINTonE1_affine_invariant_4_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 x2 x3 x4 -> all POINTonE1_affine_invariant [x1, x2, x3, x4] ==
                     (POINTonE1_affine_invariant x1 /\
                      POINTonE1_affine_invariant x2 /\
                      POINTonE1_affine_invariant x3 /\
                      POINTonE1_affine_invariant x4) }}) [];

unfold_all_verify_A_pk_precond_4_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 x2 x3 x4 -> all verify_A_pk_precond [x1, x2, x3, x4] ==
            (verify_A_pk_precond x1 /\
             verify_A_pk_precond x2 /\
             verify_A_pk_precond x3 /\
             verify_A_pk_precond x4) }}) ["verify_A_pk_precond"];

unfold_all_POINTonE2_affine_invariant_5_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 x2 x3 x4 x5 -> all POINTonE2_affine_invariant [x1, x2, x3, x4, x5] ==
                        (POINTonE2_affine_invariant x1 /\
                         POINTonE2_affine_invariant x2 /\
                         POINTonE2_affine_invariant x3 /\
                         POINTonE2_affine_invariant x4 /\
                         POINTonE2_affine_invariant x5) }}) [];

unfold_all_POINTonE1_affine_invariant_5_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 x2 x3 x4 x5 -> all POINTonE1_affine_invariant [x1, x2, x3, x4, x5] ==
                        (POINTonE1_affine_invariant x1 /\
                         POINTonE1_affine_invariant x2 /\
                         POINTonE1_affine_invariant x3 /\
                         POINTonE1_affine_invariant x4 /\
                         POINTonE1_affine_invariant x5) }}) [];

unfold_all_POINTonE2_affine_invariant_1_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 -> all POINTonE2_affine_invariant [x1] ==
            (POINTonE2_affine_invariant x1) }}) [];

unfold_all_POINTonE1_affine_invariant_1_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 -> all POINTonE1_affine_invariant [x1] ==
            (POINTonE1_affine_invariant x1) }}) [];

unfold_all_verify_A_pk_precond_1_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x1 -> all verify_A_pk_precond [x1] ==
            (verify_A_pk_precond x1) }}) ["verify_A_pk_precond"];

normalize_affine_fp_pair0_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> (Fp.normalize P.0) == (normalize_affine_point Fp P).0 }}) [];

normalize_affine_fp_pair1_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> (Fp.normalize P.1) == (normalize_affine_point Fp P).1 }}) [];

hoist_fp_invariant <- prove_cryptol
  (rewrite (cryptol_ss())
    {{ \c x1 x2 -> fp_invariant (if c then x1 else x2) ==
                   if c then fp_invariant x1 else fp_invariant x2 }})
  ["fp_invariant"];

hoist_fp_abs <- prove_cryptol
  (rewrite (cryptol_ss())
    {{ \c x1 x2 -> fp_abs (if c then x1 else x2) ==
                   if c then fp_abs x1 else fp_abs x2 }})
  ["fp_abs"];

hoist_is_point_projective_E_z_thm <- prove_cryptol
  (rewrite (cryptol_ss())
    {{ \c x y z1 z2 -> is_point_projective E (x, y, if c then z1 else z2) ==
                       if c
                       then is_point_projective E (x, y, z1)
                       else is_point_projective E (x, y, z2) }}) [];

is_point_projective_E_affine_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x y -> is_point_projective E (x, y, Fp.field_unit) ==
             if ~(is_point_O E (x, y))
             then is_point_affine E (x, y)
             else apply is_point_projective E (x, y, Fp.field_unit) }}) [];

// For vec_is_zero(GT[0][1], sizeof(GT) - sizeof(GT[0][0])) in final verify
let vec_is_zero_5fp2_spec = do {
  (a, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_array 5 vec384x_type);
  crucible_precond {{ (  fp2_invariant a0
                      /\ fp2_invariant a1
                      /\ fp2_invariant a2
                      /\ fp2_invariant a3
                      /\ fp2_invariant a4 ) where [a0,a1,a2,a3,a4] = a }};
  crucible_execute_func [a_ptr, crucible_term {{ (480:Size_t) }}]; // Non-portable
  crucible_return (crucible_term {{
    (if (  (Fp_2.is_equal (fp2_abs a0, Fp_2.field_zero))
        /\ (Fp_2.is_equal (fp2_abs a1, Fp_2.field_zero))
        /\ (Fp_2.is_equal (fp2_abs a2, Fp_2.field_zero))
        /\ (Fp_2.is_equal (fp2_abs a3, Fp_2.field_zero))
        /\ (Fp_2.is_equal (fp2_abs a4, Fp_2.field_zero))
        ) then 1 else (0:Limb)) where [a0,a1,a2,a3,a4] = a }});
  };

vec_is_zero_5fp2_ov <- test "vec_is_zero" []  vec_is_zero_5fp2_spec;

blst_pairing_finalverify_A_ov <- custom_verify
  "blst_pairing_finalverify"
  (concat mul_fp12_ovs
          [ POINTonE1_from_Jacobian_ov
          , conjugate_fp12_ov
          , final_exp_alias_ov
          , vec_is_equal_fp2_ov
          , vec_is_zero_5fp2_ov
          , miller_loop_n_1_ov])
  blst_pairing_finalverify_A_spec
  do {
    rw_with fp12_rep_thms;
    rw_with [affine_inv_affine_rep_e1_thm, one_mont_px_invariant_thm];
    unfolding ["fp12_rep", "fp6_rep", "finalverify_A", "G2", "one_mont_px"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with fp2_rep_thms;
    rw_with fp12_normalization_thms;
    rw_with POINTonE1_base_thms;
    rw_with [ normalize_miller_loop_opt_checked_thm
            , normalize_affinify_thm ];
    rw_with remove_ho_rules;
    //print_goal;
    print_readably;
    w4_unint_z3 (concat [ "all_distinct"
                        , "POINTonE1_abs"
                        , "POINTonE1_invariant"
                        , "is_point_projective_E"
                        , "fp_abs"
                        , "final_exponentiation_impl"
                        , "fp12_conjugate"
                        , "miller_loop_opt_checked"
                        , "Fp"
                        , "Fp_2"
                        , "fp12_abs" ]
                        BasicVerify_A_unints);
  };

fp12_unit_check_with_fp2_equal_thm <- prove_cryptol (rewrite (cryptol_ss ())
  {{ \a ->
      ((  Fp_2.is_equal (fp2_abs a0, fp2_abs one_mont_px)
       /\ Fp_2.is_equal (fp2_abs a1, Fp_2.field_zero)
       /\ Fp_2.is_equal (fp2_abs a2, Fp_2.field_zero)
       /\ Fp_2.is_equal (fp2_abs a3, Fp_2.field_zero)
       /\ Fp_2.is_equal (fp2_abs a4, Fp_2.field_zero)
       /\ Fp_2.is_equal (fp2_abs a5, Fp_2.field_zero)) ==
       (Fp_12.is_equal (fp12_abs a, Fp_12.field_unit))
      where
        [[a0, a1, a2], [a3, a4, a5]] = a) }}) [];

G2_to_BP'_thm <- prove_cryptol
  {{ POINTonE2_affine_abs (G2.0, G2.1) == BP' }} [];

finalverify_A_core_verify_thm <- custom_prove_cryptol
  {{ \pk sig (msg : [msg_len][8]) (dst : [dst_len][8]) ->
      (finalverify_A sig
                   (miller_loop_opt_checked (p.0, p.1) pk) ==
       core_verify_pk_in_g2_impl pk (affinify E sig) msg dst []
       where
         p = affinify E (hash_to_curve_opt_impl (msg, dst))) }}
  do {
    unfolding ["finalverify_A", "core_verify_pk_in_g2_impl"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with [fp12_unit_check_with_fp2_equal_thm];
    rw_with fp12_rep_thms;
    rw_with fp12_normalization_thms;
    unfolding ["final_exponentiation_impl"];
    rw_with [ normalize_C_expt_thm
            , G2_to_BP'_thm ];
    rw_with remove_ho_rules;
    print_goal;
    w4_unint_z3 [ "affinify_E"
                , "C_expt"
                , "final_exp_frobenius_map"
                , "Fp_12"
                , "fp12_conjugate"
                , "hash_to_curve_opt_impl"
                , "miller_loop_opt_checked" ];
  };

// TODO: Prove?  More likely should reference comment in pairing.saw
finalverify_A_ate_pairing_3_thm <- admit_cryptol
 {{ \pk1 pk2 pk3 sig m1 m2 m3 ->
    (finalverify_A
      sig
      (Fp_12.mul
        ( F_prod
            Fp_12
            [ miller_loop_opt m1 pk1
            , miller_loop_opt m2 pk2 ]
        , miller_loop_opt_checked m3 pk3)) ==
     (Fp_12.mul
        ( Fp_12.mul
          ( bls_ate_pairing m1 pk1
          , bls_ate_pairing m2 pk2 )
        , bls_ate_pairing m3 pk3 ) ==
      bls_ate_pairing (affinify E sig) BP')) }};

// TODO: Prove?  More likely should reference comment in pairing.saw
finalverify_A_ate_pairing_4_thm <- admit_cryptol
 {{ \pk1 pk2 pk3 pk4 sig m1 m2 m3 m4 ->
    (finalverify_A
      sig
      (Fp_12.mul
        ( F_prod
            Fp_12
            [ miller_loop_opt m1 pk1
            , miller_loop_opt m2 pk2 ]
        , ( F_prod
              Fp_12
              [ miller_loop_opt m3 pk3
              , miller_loop_opt m4 pk4 ]))) ==
     (Fp_12.mul
       ( Fp_12.mul
          ( Fp_12.mul
            ( bls_ate_pairing m1 pk1
            , bls_ate_pairing m2 pk2 )
          , bls_ate_pairing m3 pk3 )
       , bls_ate_pairing m4 pk4 ) ==
      bls_ate_pairing (affinify E sig) BP')) }};

unfold_aggregate_loop_1_thm <- prove_cryptol
  {{ \(pks : [1][96*8]) (msgs : [1][msg_len][8]) ->
      aggregate_loop pks msgs ==
        (aggregate_loop_body pk1 msg1 (just Fp_12.field_unit)
        where
          [pk1] = pks
          [msg1] = msgs) }} ["aggregate_loop_body"];

unfold_aggregate_loop_3_thm <- prove_cryptol
  {{ \(pks : [3][96*8]) (msgs : [3][msg_len][8]) ->
      aggregate_loop pks msgs ==
      (aggregate_loop_body pk3 msg3
        (aggregate_loop_body pk2 msg2
          (aggregate_loop_body pk1 msg1 (just Fp_12.field_unit)))
        where
          [pk1, pk2, pk3] = pks
          [msg1, msg2, msg3] = msgs) }} ["aggregate_loop_body"];

unfold_aggregate_loop_4_thm <- prove_cryptol
  {{ \(pks : [4][96*8]) (msgs : [4][msg_len][8]) ->
      aggregate_loop pks msgs ==
      (aggregate_loop_body pk4 msg4
        (aggregate_loop_body pk3 msg3
          (aggregate_loop_body pk2 msg2
            (aggregate_loop_body pk1 msg1 (just Fp_12.field_unit))))
        where
          [pk1, pk2, pk3, pk4] = pks
          [msg1, msg2, msg3, msg4] = msgs) }} ["aggregate_loop_body"];

affinify_abs_z_1_thm <- prove_cryptol
  {{ \p -> affinify E (p.0, p.1, Fp.field_unit) == normalize_affine_point Fp p }} [];

hoist_field_access_1_fp_thm <- prove_cryptol
  {{ \b (t : (Bool, AffinePoint t_Fp)) (f : (Bool, AffinePoint t_Fp)) ->
      (if b then t else f).1 == (if b then t.1 else f.1) }} [];

hoist_field_access_1_fp2_thm <- prove_cryptol
  {{ \b (t : (Bool, AffinePoint t_Fp_2)) (f : (Bool, AffinePoint t_Fp_2)) ->
      (if b then t else f).1 == (if b then t.1 else f.1) }} [];

hoist_bls_ate_pairing_lhs_thm <- prove_cryptol
  {{ \b t f x2 -> bls_ate_pairing (if b then t else f) x2 ==
                  if b
                  then bls_ate_pairing t x2
                  else bls_ate_pairing f x2 }} ["bls_ate_pairing"];

hoist_bls_ate_pairing_rhs_thm <- prove_cryptol
  {{ \b t f x1 -> bls_ate_pairing x1 (if b then t else f) ==
                  if b
                  then bls_ate_pairing x1 t
                  else bls_ate_pairing x1 f }} ["bls_ate_pairing"];

/*
let at_1_768 = parse_core "\\(v : (Vec 1 (Vec 768 Bool))) -> at 1 (Vec 768 Bool) v 0";

at_1_split_1_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \(v : [768]) -> at_1_768 (split`{1} v) == v }}) [];
  */

let at_1_96_8_0_core = parse_core "\\(v : (Vec 1 (Vec 96 (Vec 8 Bool)))) -> at 1 (Vec 96 (Vec 8 Bool)) v 0";

let access_1_from_1_core = parse_core "\\(v : (Vec 1 (Vec 96 (Vec 8 Bool)))) -> split 96 8 Bool (at 1 (Vec 768 Bool) (split 1 768 Bool (join 96 8 Bool (join 1 96 (Vec 8 Bool) v))) 0)";

access_1_from_1_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \v -> access_1_from_1_core v == at_1_96_8_0_core v }}) [];

hoist_is_point_affine_E_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \b t f -> is_point_affine E (if b then t else f) ==
               if b then is_point_affine E t else is_point_affine E f }}) [];

hoist_is_in_g1_impl_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \b t f -> is_in_g1_impl (if b then t else f) ==
               if b then is_in_g1_impl t else is_in_g1_impl f }})
  ["is_in_g1_impl"];

let at_split_join_join_core = parse_core "\\(v : (Vec 1 (Vec 96 (Vec 8 Bool)))) -> at 1 (Vec 768 Bool) (split 1 768 Bool (join 96 8 Bool (join 1 96 (Vec 8 Bool) v))) 0";

//let join_96_8_bool = parse_core "join 96 8 Bool";

at_split_join_join_is_join_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \v -> at_split_join_join_core v == join`{96, 8} (at_1_96_8_0_core v) }}) [];

fp_pair_to_point_thm <- prove_cryptol
  {{ \(x : AffinePoint t_Fp) -> (x.0, x.1) == x }} [];

normalize_bls_ate_pairing_thm <- custom_prove_cryptol
  {{ \x1 x2 -> Fp_12.normalize (bls_ate_pairing x1 x2) ==
               bls_ate_pairing x1 x2 }}
  do {
    unfolding ["bls_ate_pairing", "ate_pairing", "final_exponentiation", "f12"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with [ k_expt_C_expt_thm, normalize_C_expt_thm ];
    print_goal;
    w4_unint_z3 ["C_expt", "final_exp_frobenius_map", "ate_pairing'"];
  };

hoist_fp12_normalize_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \b t f -> Fp_12.normalize (if b then t else f) ==
               if b then Fp_12.normalize t else Fp_12.normalize f }}) [];

fp12_is_equal_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x y -> Fp_12.is_equal (x, y) == (x == y) }}) [];

let ugly_at_0_core = parse_core "\\ (v : (Vec 3 (Vec 96 (Vec 8 Bool)))) -> split 96 8 Bool (at 3 (Vec 768 Bool) (split 3 768 Bool (join 288 8 Bool (join 3 96 (Vec 8 Bool) v))) 0)";

let at_3_96_8_0_core = parse_core "\\(v : (Vec 3 (Vec 96 (Vec 8 Bool)))) -> at 3 (Vec 96 (Vec 8 Bool)) v 0";

simplify_ugly_at_0_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \v -> ugly_at_0_core v == at_3_96_8_0_core v }}) [];

let ugly_at_1_core = parse_core "\\ (v : (Vec 3 (Vec 96 (Vec 8 Bool)))) -> split 96 8 Bool (at 3 (Vec 768 Bool) (split 3 768 Bool (join 288 8 Bool (join 3 96 (Vec 8 Bool) v))) 1)";

let at_3_96_8_1_core = parse_core "\\(v : (Vec 3 (Vec 96 (Vec 8 Bool)))) -> at 3 (Vec 96 (Vec 8 Bool)) v 1";

simplify_ugly_at_1_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \v -> ugly_at_1_core v == at_3_96_8_1_core v }}) [];

let ugly_at_2_core = parse_core "\\ (v : (Vec 3 (Vec 96 (Vec 8 Bool)))) -> split 96 8 Bool (at 3 (Vec 768 Bool) (split 3 768 Bool (join 288 8 Bool (join 3 96 (Vec 8 Bool) v))) 2)";

let at_3_96_8_2_core = parse_core "\\(v : (Vec 3 (Vec 96 (Vec 8 Bool)))) -> at 3 (Vec 96 (Vec 8 Bool)) v 2";

simplify_ugly_at_2_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \v -> ugly_at_2_core v == at_3_96_8_2_core v }}) [];

fp12_mul_by_1_thm <- prove_cryptol
  {{ \x      -> Fp_12.mul (Fp_12.field_unit, x) == Fp_12.normalize x }} [];

// Proof for n = 1
demo_BasicAggregateVerify_A_ov <- custom_verify
  "demo_BasicAggregateVerify_A"
  (foldr concat [vec_fp2_overrides, vec_overrides, mul_fp12_ovs]
                [ all_distinct_1_ov
                , POINTonE1_Uncompress_OK_ov // blst_p1_uncompress_OK_ov
                , POINTonE1_affine_on_curve_ov
                , blst_p1_affine_in_g1_ov
                , demo_KeyValidate_A_ov
                , blst_p2_uncompress_OK_ov
                // ovs used in pairing aggregate:
                , POINTonE1_in_G1_ov
                , Hash_to_G1_ov
                , POINTonE1_from_Jacobian_alias_ov
                , vec_copy_2fp_ov
                // ovs used in blst_pairing_commit:
                //, miller_loop_n_2_ov
                , miller_loop_n_1_ov
                // ovs used in blst_pairing_finalverify:
                , blst_pairing_finalverify_A_ov
                // Pairing aggregate ovs
                , blst_pairing_aggregate_pk_in_g2_null_sig_1_nth_commit_ov
                , blst_pairing_aggregate_pk_in_g2_null_sig_0_ov
                , blst_pairing_aggregate_pk_in_g2_null_sig_1_first_commit_ov
                , blst_pairing_aggregate_pk_in_g2_sig_ov
                /*
                , POINTonE1_from_Jacobian_ov
                , conjugate_fp12_ov
                , final_exp_ov
                */
                ])
  (demo_BasicAggregateVerify_A_spec 1)
  do {
    // Precondition proof(s)
    (goal_num_ite 9
      do {
        return ();
      }
      do {
        (unfolding ["uncompress_E1_imp"]);
      });
    unfolding [ "POINTonE1_affine_abs"
              , "POINTonE2_affine_abs"
              , "blst_core_verify_pk_in_g2_error_precond"
              ];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify basic_ss;
    rw_with [ hoist_POINTonE1_affine_rep
            , hoist_POINTonE1_affine_invariant
            , hoist_POINTonE2_affine_rep
            , hoist_POINTonE2_affine_invariant
            , affine_inv_affine_rep_e2_thm
            , zero_lt_one_thm
            , intLe_sym_thm
            , affine_inv_affine_rep_e1_thm ];
    rw_with structural_rewrites;
    simplify basic_ss;
    rw_with [ fold_POINTonE1_affine_invariant
            , fold_POINTonE2_affine_invariant
            , hoist_POINTonE1_affine_invariant
            , hoist_POINTonE2_affine_invariant
            , affine_inv_affine_rep_e2_thm
            , fold_POINTonE2_affine_abs_thm
            , hoist_POINTonE2_affine_abs_thm
            , hoist_is_point_O_E'_thm
            , POINTonE2_affine_abs_rep_thm
            , is_point_O_KeyValidate_thm
            , normalize_uncompress_E2_OK_thm
            , unfold_all_POINTonE1_affine_invariant_1_thm
            , unfold_all_POINTonE2_affine_invariant_1_thm
            , unfold_all_POINTonE1_affine_invariant_2_thm
            , unfold_all_POINTonE2_affine_invariant_2_thm
            , unfold_all_POINTonE1_affine_invariant_5_thm
            , unfold_all_POINTonE2_affine_invariant_5_thm
            , unfold_all_verify_A_pk_precond_1_thm
            , affine_inv_affine_rep_e1_thm ];
    rw_with POINTonE1_base_thms;
    unfolding ["POINTonE1_rep", "verify_A_pk_precond"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with fp_rep_thms;
    rw_with normalize_hash_to_curve_opt_impl_rws;
    rw_with hash_to_curve_opt_impl_POINTonE1_from_Jacobian_precond_thms;
    //rw_with_1 is_point_O_affine_rev_thm;
    simplify basic_ss;
    simplify (cryptol_ss());
    unfolding [ "POINTonE1_invariant"
              , "POINTonE1_affine_rep"
              , "select"
              , "POINTonE1_abs" ];
    //hoist_ifs_in_goal;
    rw_with fp_rep_thms;
    rw_with [ normalize_affine_fp_pair0_thm
            , hoist_fp_invariant
            , hoist_fp_abs
            , normalize_affine_fp_pair1_thm
            , one_mont_p_invariant_thm
            , one_mont_p_abs_thm
            , hoist_is_point_projective_E_z_thm
            , is_point_projective_E_affine_thm
            , normalize_uncompress_E1_OK_thm];
    rw_with fp_rep_thms;
    rw_with fp12_rep_thms;
    simplify basic_ss;
    simplify (cryptol_ss());
    //print_readably;
    // Final goal
    rw_with fp12_normalization_thms;
    unfolding [ "Cryptol::map"
              , "BLSMinimalSignatureSize::CoreAggregateVerify"
              ];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with [ unfold_map
            , normalize_miller_loop_opt_checked_thm
            , finalverify_A_core_verify_thm
            , core_verify_pk_in_g2_impl_thm
            , unfold_aggregate_loop_1_thm
            , affinify_abs_z_1_thm
            , normalize_uncompress_E1_OK_thm
            , normalize_point_O_E'_thm
            , normalize_affinify_thm ];
    unfolding [ "core_verify_pk_in_g2"
              , "aggregate_loop_body"
              , "module parameter pairing"
              , "maybe_cases"
              , "module parameter P"
              , "P"
              , "module parameter G"
              , "G"
              , "module parameter hash_to_point"
              , "hash_to_point"
              , "module parameter signature_to_point"
              , "signature_to_point"
              , "module parameter pubkey_to_point"
              , "pubkey_to_point"
              , "pairing" ];
    simplify basic_ss;
    simplify (cryptol_ss());
    //rw_with_1 at_1_split_1_thm;
    rw_with split_join_thms;
    rw_with [ uncompress_E1_uncompress_E1_OK_thm
            , deserialize_E2_uncompress_E2_OK_thm
            , hoist_field_access_1_fp_thm
            , hoist_field_access_1_fp2_thm
            , hoist_bls_ate_pairing_lhs_thm
            , hoist_bls_ate_pairing_rhs_thm
            , access_1_from_1_thm
            , is_in_g1_impl_thm
            , hoist_is_point_affine_E_thm
            , uncompress_E1_on_curve
            , hoist_is_in_g1_impl_thm
            , fp_pair_to_point_thm
            ];
    simplify basic_ss;
    simplify (cryptol_ss());
    unfolding [ "just", "nothing" ];
    rw_with fp12_laws;
    rw_with [ hoist_fp12_normalize_thm
            , normalize_bls_ate_pairing_thm
            , at_split_join_join_is_join_thm
            , fp12_is_equal_thm
            ];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with remove_ho_rules;
    //print_readably;
    print_goal;
    w4_unint_z3 (concat [ "affinify_E"
                        , "all_distinct"
                        , "hash_to_curve_opt_impl"
                        , "fp12_rep"
                        , "F_prod_Fp_12"
                        , "miller_loop_opt" ]
                        BasicVerify_A_unints);
  };

// Proof for n = 3
demo_BasicAggregateVerify_A_ov <- custom_verify
  "demo_BasicAggregateVerify_A"
  (foldr concat [vec_fp2_overrides, vec_overrides, mul_fp12_ovs]
                [ all_distinct_3_ov
                , POINTonE1_Uncompress_OK_ov // blst_p1_uncompress_OK_ov
                , POINTonE1_affine_on_curve_ov
                , blst_p1_affine_in_g1_ov
                , demo_KeyValidate_A_ov
                , blst_p2_uncompress_OK_ov
                // ovs used in pairing aggregate:
                , POINTonE1_in_G1_ov
                , Hash_to_G1_ov
                , POINTonE1_from_Jacobian_alias_ov
                , vec_copy_2fp_ov
                // ovs used in blst_pairing_commit:
                //, miller_loop_n_2_ov
                , miller_loop_n_1_ov
                // ovs used in blst_pairing_finalverify:
                , blst_pairing_finalverify_A_ov
                // Pairing aggregate ovs
                , blst_pairing_aggregate_pk_in_g2_null_sig_1_nth_commit_ov
                , blst_pairing_aggregate_pk_in_g2_null_sig_0_ov
                , blst_pairing_aggregate_pk_in_g2_null_sig_1_first_commit_ov
                , blst_pairing_aggregate_pk_in_g2_sig_ov
                /*
                , POINTonE1_from_Jacobian_ov
                , conjugate_fp12_ov
                , final_exp_ov
                */
                ])
  (demo_BasicAggregateVerify_A_spec 3)
  do {
    // Precondition proof(s)
    (goal_num_ite 16
      do {
        return ();
      }
      do {
        (unfolding ["uncompress_E1_imp"]);
      });
    unfolding [ "POINTonE1_affine_abs"
              , "POINTonE2_affine_abs"
              , "blst_core_verify_pk_in_g2_error_precond"
              ];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify basic_ss;
    rw_with [ hoist_POINTonE1_affine_rep
            , hoist_POINTonE1_affine_invariant
            , hoist_POINTonE2_affine_rep
            , hoist_POINTonE2_affine_invariant
            , affine_inv_affine_rep_e2_thm
            , zero_lt_one_thm
            , intLe_sym_thm
            , affine_inv_affine_rep_e1_thm ];
    rw_with structural_rewrites;
    simplify basic_ss;
    rw_with [ fold_POINTonE1_affine_invariant
            , fold_POINTonE2_affine_invariant
            , hoist_POINTonE1_affine_invariant
            , hoist_POINTonE2_affine_invariant
            , affine_inv_affine_rep_e2_thm
            , fold_POINTonE2_affine_abs_thm
            , hoist_POINTonE2_affine_abs_thm
            , hoist_is_point_O_E'_thm
            , POINTonE2_affine_abs_rep_thm
            , is_point_O_KeyValidate_thm
            , normalize_uncompress_E2_OK_thm
            , unfold_all_POINTonE1_affine_invariant_1_thm
            , unfold_all_POINTonE2_affine_invariant_1_thm
            , unfold_all_POINTonE1_affine_invariant_2_thm
            , unfold_all_POINTonE2_affine_invariant_2_thm
            , unfold_all_POINTonE1_affine_invariant_3_thm
            , unfold_all_POINTonE2_affine_invariant_3_thm
            , unfold_all_POINTonE1_affine_invariant_5_thm
            , unfold_all_POINTonE2_affine_invariant_5_thm
            , unfold_all_verify_A_pk_precond_1_thm
            , unfold_all_verify_A_pk_precond_3_thm
            , affine_inv_affine_rep_e1_thm ];
    rw_with POINTonE1_base_thms;
    unfolding ["POINTonE1_rep", "verify_A_pk_precond"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with fp_rep_thms;
    rw_with normalize_hash_to_curve_opt_impl_rws;
    rw_with hash_to_curve_opt_impl_POINTonE1_from_Jacobian_precond_thms;
    //rw_with_1 is_point_O_affine_rev_thm;
    simplify basic_ss;
    simplify (cryptol_ss());
    unfolding [ "POINTonE1_invariant"
              , "POINTonE1_affine_rep"
              , "select"
              , "POINTonE1_abs" ];
    //hoist_ifs_in_goal;
    rw_with fp_rep_thms;
    rw_with [ normalize_affine_fp_pair0_thm
            , hoist_fp_invariant
            , hoist_fp_abs
            , normalize_affine_fp_pair1_thm
            , one_mont_p_invariant_thm
            , one_mont_p_abs_thm
            , hoist_is_point_projective_E_z_thm
            , is_point_projective_E_affine_thm
            , normalize_uncompress_E1_OK_thm];
    rw_with fp_rep_thms;
    rw_with fp12_rep_thms;
    simplify basic_ss;
    simplify (cryptol_ss());
    //print_readably;
    // Final goal
    rw_with fp12_normalization_thms;
    unfolding [ "Cryptol::map"
              , "BLSMinimalSignatureSize::CoreAggregateVerify"
              ];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with [ unfold_map
            , normalize_miller_loop_opt_checked_thm
            , finalverify_A_ate_pairing_3_thm
            , core_verify_pk_in_g2_impl_thm
            , unfold_aggregate_loop_3_thm
            , affinify_abs_z_1_thm
            , normalize_uncompress_E1_OK_thm
            , normalize_point_O_E'_thm
            , normalize_affinify_thm ];
    unfolding [ "core_verify_pk_in_g2"
              , "aggregate_loop_body"
              , "module parameter pairing"
              , "maybe_cases"
              , "module parameter P"
              , "P"
              , "module parameter G"
              , "G"
              , "module parameter hash_to_point"
              , "hash_to_point"
              , "module parameter signature_to_point"
              , "signature_to_point"
              , "module parameter pubkey_to_point"
              , "pubkey_to_point"
              , "pairing" ];
    simplify basic_ss;
    simplify (cryptol_ss());
    //rw_with_1 at_1_split_1_thm;
    rw_with split_join_thms;
    rw_with [ uncompress_E1_uncompress_E1_OK_thm
            , deserialize_E2_uncompress_E2_OK_thm
            , hoist_field_access_1_fp_thm
            , hoist_field_access_1_fp2_thm
            , hoist_bls_ate_pairing_lhs_thm
            , hoist_bls_ate_pairing_rhs_thm
            , access_1_from_1_thm
            , is_in_g1_impl_thm
            , hoist_is_point_affine_E_thm
            , uncompress_E1_on_curve
            , hoist_is_in_g1_impl_thm
            , fp_pair_to_point_thm
            , hash_to_curve_E1_opt_impl_equiv_ov
            , hash_to_curve_e1_opt_thm
            , simplify_ugly_at_0_thm
            , simplify_ugly_at_1_thm
            , simplify_ugly_at_2_thm
            ];
    simplify basic_ss;
    simplify (cryptol_ss());
    unfolding [ "just", "nothing" ];
    //rw_with fp12_laws;
    rw_with [ hoist_fp12_normalize_thm
            , normalize_bls_ate_pairing_thm
            , at_split_join_join_is_join_thm
            , fp12_is_equal_thm
            , fp12_mul_by_1_thm
            ];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with remove_ho_rules;
    print_readably;
    //print_goal;
    w4_unint_z3 (concat [ "HE1::hash_to_curve_opt"
                        , "affinify_E"
                        , "all_distinct"
                        , "hash_to_curve_opt_impl"
                        , "fp12_rep"
                        , "F_prod_Fp_12"
                        , "fp12_mul"
                        , "miller_loop_opt" ]
                        BasicVerify_A_unints);
  };

// Proof for n = 4
demo_BasicAggregateVerify_A_ov <- custom_verify
  "demo_BasicAggregateVerify_A"
  (foldr concat [vec_fp2_overrides, vec_overrides, mul_fp12_ovs]
                [ all_distinct_4_ov
                , POINTonE1_Uncompress_OK_ov // blst_p1_uncompress_OK_ov
                , POINTonE1_affine_on_curve_ov
                , blst_p1_affine_in_g1_ov
                , demo_KeyValidate_A_ov
                , blst_p2_uncompress_OK_ov
                // ovs used in pairing aggregate:
                , POINTonE1_in_G1_ov
                , Hash_to_G1_ov
                , POINTonE1_from_Jacobian_alias_ov
                , vec_copy_2fp_ov
                // ovs used in blst_pairing_commit:
                //, miller_loop_n_2_ov
                , miller_loop_n_1_ov
                // ovs used in blst_pairing_finalverify:
                , blst_pairing_finalverify_A_ov
                // Pairing aggregate ovs
                , blst_pairing_aggregate_pk_in_g2_null_sig_1_nth_commit_ov
                , blst_pairing_aggregate_pk_in_g2_null_sig_0_ov
                , blst_pairing_aggregate_pk_in_g2_null_sig_1_first_commit_ov
                , blst_pairing_aggregate_pk_in_g2_sig_ov
                /*
                , POINTonE1_from_Jacobian_ov
                , conjugate_fp12_ov
                , final_exp_ov
                */
                ])
  (demo_BasicAggregateVerify_A_spec 4)
  do {
    // Precondition proof(s)
    (goal_num_ite 17
      do {
        return ();
      }
      do {
        (unfolding ["uncompress_E1_imp"]);
      });
    unfolding [ "POINTonE1_affine_abs"
              , "POINTonE2_affine_abs"
              , "blst_core_verify_pk_in_g2_error_precond"
              ];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify basic_ss;
    rw_with [ hoist_POINTonE1_affine_rep
            , hoist_POINTonE1_affine_invariant
            , hoist_POINTonE2_affine_rep
            , hoist_POINTonE2_affine_invariant
            , affine_inv_affine_rep_e2_thm
            , zero_lt_one_thm
            , intLe_sym_thm
            , affine_inv_affine_rep_e1_thm ];
    rw_with structural_rewrites;
    simplify basic_ss;
    rw_with [ fold_POINTonE1_affine_invariant
            , fold_POINTonE2_affine_invariant
            , hoist_POINTonE1_affine_invariant
            , hoist_POINTonE2_affine_invariant
            , affine_inv_affine_rep_e2_thm
            , fold_POINTonE2_affine_abs_thm
            , hoist_POINTonE2_affine_abs_thm
            , hoist_is_point_O_E'_thm
            , POINTonE2_affine_abs_rep_thm
            , is_point_O_KeyValidate_thm
            , normalize_uncompress_E2_OK_thm
            , unfold_all_POINTonE1_affine_invariant_1_thm
            , unfold_all_POINTonE2_affine_invariant_1_thm
            , unfold_all_POINTonE1_affine_invariant_2_thm
            , unfold_all_POINTonE2_affine_invariant_2_thm
            , unfold_all_POINTonE1_affine_invariant_4_thm
            , unfold_all_POINTonE2_affine_invariant_4_thm
            , unfold_all_POINTonE1_affine_invariant_5_thm
            , unfold_all_POINTonE2_affine_invariant_5_thm
            , unfold_all_verify_A_pk_precond_1_thm
            , unfold_all_verify_A_pk_precond_4_thm
            , affine_inv_affine_rep_e1_thm ];
    rw_with POINTonE1_base_thms;
    unfolding ["POINTonE1_rep", "verify_A_pk_precond"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with fp_rep_thms;
    rw_with normalize_hash_to_curve_opt_impl_rws;
    rw_with hash_to_curve_opt_impl_POINTonE1_from_Jacobian_precond_thms;
    //rw_with_1 is_point_O_affine_rev_thm;
    simplify basic_ss;
    simplify (cryptol_ss());
    unfolding [ "POINTonE1_invariant"
              , "POINTonE1_affine_rep"
              , "select"
              , "POINTonE1_abs" ];
    //hoist_ifs_in_goal;
    rw_with fp_rep_thms;
    rw_with [ normalize_affine_fp_pair0_thm
            , hoist_fp_invariant
            , hoist_fp_abs
            , normalize_affine_fp_pair1_thm
            , one_mont_p_invariant_thm
            , one_mont_p_abs_thm
            , hoist_is_point_projective_E_z_thm
            , is_point_projective_E_affine_thm
            , normalize_uncompress_E1_OK_thm];
    rw_with fp_rep_thms;
    rw_with fp12_rep_thms;
    simplify basic_ss;
    simplify (cryptol_ss());
    //print_readably;
    // Final goal
    rw_with fp12_normalization_thms;
    unfolding [ "Cryptol::map"
              , "BLSMinimalSignatureSize::CoreAggregateVerify"
              ];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with [ unfold_map
            , normalize_miller_loop_opt_checked_thm
            , finalverify_A_ate_pairing_4_thm
            , core_verify_pk_in_g2_impl_thm
            , unfold_aggregate_loop_4_thm
            , affinify_abs_z_1_thm
            , normalize_uncompress_E1_OK_thm
            , normalize_point_O_E'_thm
            , normalize_affinify_thm ];
    unfolding [ "core_verify_pk_in_g2"
              , "aggregate_loop_body"
              , "module parameter pairing"
              , "maybe_cases"
              , "module parameter P"
              , "P"
              , "module parameter G"
              , "G"
              , "module parameter hash_to_point"
              , "hash_to_point"
              , "module parameter signature_to_point"
              , "signature_to_point"
              , "module parameter pubkey_to_point"
              , "pubkey_to_point"
              , "pairing" ];
    simplify basic_ss;
    simplify (cryptol_ss());
    //rw_with_1 at_1_split_1_thm;
    rw_with split_join_thms;
    rw_with [ uncompress_E1_uncompress_E1_OK_thm
            , deserialize_E2_uncompress_E2_OK_thm
            , hoist_field_access_1_fp_thm
            , hoist_field_access_1_fp2_thm
            , hoist_bls_ate_pairing_lhs_thm
            , hoist_bls_ate_pairing_rhs_thm
            , access_1_from_1_thm
            , is_in_g1_impl_thm
            , hoist_is_point_affine_E_thm
            , uncompress_E1_on_curve
            , hoist_is_in_g1_impl_thm
            , fp_pair_to_point_thm
            , hash_to_curve_E1_opt_impl_equiv_ov
            , hash_to_curve_e1_opt_thm
            , simplify_ugly_at_0_thm
            , simplify_ugly_at_1_thm
            , simplify_ugly_at_2_thm
            ];
    simplify basic_ss;
    simplify (cryptol_ss());
    unfolding [ "just", "nothing" ];
    //rw_with fp12_laws;
    rw_with [ hoist_fp12_normalize_thm
            , normalize_bls_ate_pairing_thm
            , at_split_join_join_is_join_thm
            , fp12_is_equal_thm
            , fp12_mul_by_1_thm
            ];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with remove_ho_rules;
    print_readably;
    //print_goal;
    w4_unint_z3 (concat [ "HE1::hash_to_curve_opt"
                        , "affinify_E"
                        , "all_distinct"
                        , "hash_to_curve_opt_impl"
                        , "fp12_rep"
                        , "F_prod_Fp_12"
                        , "fp12_mul"
                        , "miller_loop_opt" ]
                        BasicVerify_A_unints);
  };
