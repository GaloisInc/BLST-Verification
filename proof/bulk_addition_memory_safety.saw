/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

enable_experimental;

m <- llvm_load_module "../build/llvm_bulk_addition/libblst.a.bc";

let do_prove=true;

include "helpers.saw";
include "list_utils.saw";
include "types.saw";

include "proof-helpers.saw";
include "cryptol_imports.saw";
include "vect.saw";
include "fp_overrides.saw";
include "fp2_overrides.saw";
include "curve_operations.saw";
include "curve_operations_e2.saw";

// first we do memory safety

// here we assume that the first pointer points to an array and the second is
// null.
let POINTonE1s_add_spec_1 n = do {
  (sum, sum_ptr) <- ptr_to_fresh "sum" POINTonE1_type;
  // sum_ptr <- llvm_alloc POINTonE1_type;
  // llvm_points_to sum_ptr (llvm_term {{ POINTonE1_rep (projectify E (point_O E)) }});
  points_ptr <- llvm_alloc (llvm_array 2 (llvm_pointer POINTonE1_affine_type));
  (array, array_ptr) <- ptr_to_fresh "array" (llvm_array n POINTonE1_affine_type);
  llvm_points_to (llvm_elem points_ptr 0) array_ptr;
  llvm_points_to (llvm_elem points_ptr 1) llvm_null;
  llvm_precond {{ POINTonE1_invariant sum }};
  llvm_precond {{ all POINTonE1_affine_invariant array }};
  llvm_execute_func [sum_ptr, points_ptr, llvm_term {{`n:[64]}}];
};

let POINTonE2s_add_spec_1 n = do {
  (sum, sum_ptr) <- ptr_to_fresh "sum" POINTonE2_type;
  // sum_ptr <- llvm_alloc POINTonE2_type;
  // llvm_points_to sum_ptr (llvm_term {{ POINTonE2_rep (projectify E (point_O E)) }});
  points_ptr <- llvm_alloc (llvm_array 2 (llvm_pointer POINTonE2_affine_type));
  (array, array_ptr) <- ptr_to_fresh "array" (llvm_array n POINTonE2_affine_type);
  llvm_points_to (llvm_elem points_ptr 0) array_ptr;
  llvm_points_to (llvm_elem points_ptr 1) llvm_null;
  llvm_precond {{ POINTonE2_invariant sum }};
  llvm_precond {{ all POINTonE2_affine_invariant array }};
  llvm_execute_func [sum_ptr, points_ptr, llvm_term {{`n:[64]}}];
};

// here points is of length 3, where the first two are pointers to points
let POINTonE1s_add_spec_2 = do {
  (sum, sum_ptr) <- ptr_to_fresh "sum" POINTonE1_type;
  points_ptr <- llvm_alloc (llvm_array 3 (llvm_pointer POINTonE1_affine_type));
  (p1, p1_ptr) <- ptr_to_fresh "p1" POINTonE1_affine_type;
  (p2, p2_ptr) <- ptr_to_fresh "p2" POINTonE1_affine_type;
  llvm_points_to (llvm_elem points_ptr 0) p1_ptr;
  llvm_points_to (llvm_elem points_ptr 1) p2_ptr;
  llvm_points_to (llvm_elem points_ptr 2) llvm_null;
  llvm_precond {{ POINTonE1_invariant sum }};
  llvm_precond {{ POINTonE1_affine_invariant p1 }};
  llvm_precond {{ POINTonE1_affine_invariant p2 }};
  llvm_execute_func [sum_ptr, points_ptr, llvm_term {{`2:[64]}}];
};

let POINTonE2s_add_spec_2 = do {
  (sum, sum_ptr) <- ptr_to_fresh "sum" POINTonE2_type;
  points_ptr <- llvm_alloc (llvm_array 3 (llvm_pointer POINTonE2_affine_type));
  (p1, p1_ptr) <- ptr_to_fresh "p1" POINTonE2_affine_type;
  (p2, p2_ptr) <- ptr_to_fresh "p2" POINTonE2_affine_type;
  llvm_points_to (llvm_elem points_ptr 0) p1_ptr;
  llvm_points_to (llvm_elem points_ptr 1) p2_ptr;
  llvm_points_to (llvm_elem points_ptr 2) llvm_null;
  llvm_precond {{ POINTonE2_invariant sum }};
  llvm_precond {{ POINTonE2_affine_invariant p1 }};
  llvm_precond {{ POINTonE2_affine_invariant p2 }};
  llvm_execute_func [sum_ptr, points_ptr, llvm_term {{`1:[64]}}];
};

// we use the following overrides

let vec_is_zero_E1_spec_ = do {
  (p,p_ptr) <- ptr_to_fresh "p" POINTonE1_type;
  llvm_execute_func [p_ptr, llvm_term {{ (96:Size_t) }}];
  llvm_return (llvm_term {{ if fp_abs p.0 == Fp.field_zero /\ fp_abs p.1 == Fp.field_zero then 1 else (0:Limb) }});
  };

vec_is_zero_E1_ov_ <- test "vec_is_zero" [] vec_is_zero_E1_spec_;

let vec_is_zero_E2_spec_ = do {
  (p,p_ptr) <- ptr_to_fresh "p" POINTonE2_type;
  llvm_execute_func [p_ptr, llvm_term {{ 192:Size_t }}];
  llvm_return (llvm_term {{ if fp2_abs p.0 == Fp_2.field_zero /\ fp2_abs p.1 == Fp_2.field_zero then 1 else (0:Limb) }});
  };

vec_is_zero_E2_ov_ <- test "vec_is_zero" [] vec_is_zero_E2_spec_;

let vec_zero_spec n = do {
  p_ptr <- llvm_alloc (llvm_array n (llvm_int 8));
  llvm_execute_func [p_ptr, llvm_term {{ (`n):Size_t }} ];
  llvm_points_to p_ptr (llvm_term {{ zero:[n][8] }});
};

vec_zero_144_ov <- admit "vec_zero" (vec_zero_spec 144);
vec_zero_288_ov <- admit "vec_zero" (vec_zero_spec 288);

let vec_copy_E1_spec_ = do {
  ret_ptr <- llvm_alloc POINTonE1_affine_type;
  (p,p_ptr) <- ptr_to_fresh_readonly "p" POINTonE1_affine_type;
  llvm_execute_func [ret_ptr, p_ptr, llvm_term {{96:Size_t }}];
  llvm_points_to ret_ptr (llvm_term p);
};

vec_copy_E1_ov_ <- admit "vec_copy" vec_copy_E1_spec_;

let vec_copy_E2_spec_ = do {
  ret_ptr <- llvm_alloc POINTonE2_affine_type;
  (p,p_ptr) <- ptr_to_fresh_readonly "p" POINTonE2_affine_type;
  llvm_execute_func [ret_ptr, p_ptr, llvm_term {{192:Size_t }}];
  llvm_points_to ret_ptr (llvm_term p);
};

vec_copy_E2_ov_ <- admit "vec_copy" vec_copy_E2_spec_;

// now the memory safety proofs:

_ <- verify "blst_p1s_add" (concat_all [fp_overrides, [POINTonE1_dadd_affine_alias_ov, vec_copy_E1_ov_, vec_is_zero_E1_ov_, vec_zero_144_ov]]) (POINTonE1s_add_spec_1 2);

_ <- verify "blst_p1s_add" (concat_all [fp_overrides, [POINTonE1_dadd_affine_alias_ov, vec_copy_E1_ov_, vec_is_zero_E1_ov_, vec_zero_144_ov]]) (POINTonE1s_add_spec_2);

_ <- verify "blst_p2s_add" (concat_all [fp2_overrides, fp_overrides, curve_operations_e2_ovs, [vec_copy_E2_ov_, vec_is_zero_E2_ov_, vec_zero_288_ov, vec_zero_144_ov]]) (POINTonE2s_add_spec_1 2);

_ <- verify "blst_p2s_add" (concat_all [fp2_overrides, fp_overrides, curve_operations_e2_ovs, [vec_copy_E2_ov_, vec_is_zero_E2_ov_, vec_zero_288_ov, vec_zero_144_ov]]) (POINTonE2s_add_spec_2);
