/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

// printing field operations readably:

import "../spec/Parameters.cry";

let {{
  fp12_mul = Fp_12.mul
  fp12_sq = Fp_12.sq
  fp12_add = Fp_12.add
  fp12_div = Fp_12.div
  fp12_zero = Fp_12.field_zero
  fp12_unit = Fp_12.field_unit
  fp12_is_equal = Fp_12.is_equal
  fp12_neg = Fp_12.neg
  fp12_normalize = Fp_12.normalize
  fp2_mul = Fp_2.mul
  fp2_sq = Fp_2.sq
  fp2_add = Fp_2.add
  fp2_div = Fp_2.div
  fp2_zero = Fp_2.field_zero
  fp2_unit = Fp_2.field_unit
  fp2_is_equal = Fp_2.is_equal
  fp2_neg = Fp_2.neg
  fp2_normalize = Fp_2.normalize
  fp_mul = Fp.mul
  fp_sq = Fp.sq
  fp_add = Fp.add
  fp_div = Fp.div
  fp_zero = Fp.field_zero
  fp_unit = Fp.field_unit
  fp_is_equal = Fp.is_equal
  fp_neg = Fp.neg
  fp_normalize = Fp.normalize
}};

readability_rewrites <- for [
  {{ \p q -> Fp.mul (p,q) == fp_mul (p,q) }}
, {{ \p q -> Fp.add (p,q) == fp_add (p,q) }}
, {{ \p -> Fp.sq p == fp_sq p }}
, {{ \p -> Fp.neg p == fp_neg p }}
, {{ \p q -> Fp.div (p, q) == fp_div (p, q) }}
, {{ Fp.field_zero == fp_zero }}
, {{ Fp.field_unit == fp_unit }}
, {{ \x y -> Fp.is_equal (x,y) == fp_is_equal (x,y) }}
, {{ \p q -> Fp_2.mul (p,q) == fp2_mul (p,q) }}
, {{ \p q -> Fp_2.add (p,q) == fp2_add (p,q) }}
, {{ \p -> Fp_2.sq p == fp2_sq p }}
, {{ \p -> Fp_2.neg p == fp2_neg p }}
, {{ \p q -> Fp_2.div (p, q) == fp2_div (p, q) }}
, {{ Fp_2.field_zero == fp2_zero }}
, {{ Fp_2.field_unit == fp2_unit }}
, {{ \x y -> Fp_2.is_equal (x,y) == fp2_is_equal (x,y) }}
, {{ \p q -> Fp_12.mul (p,q) == fp12_mul (p,q) }}
, {{ \p q -> Fp_12.add (p,q) == fp12_add (p,q) }}
, {{ \p -> Fp_12.sq p == fp12_sq p }}
, {{ \p -> Fp_12.neg p == fp12_neg p }}
, {{ \p q -> Fp_12.div (p, q) == fp12_div (p, q) }}
, {{ Fp_12.field_zero == fp12_zero }}
, {{ Fp_12.field_unit == fp12_unit }}
, {{ \x y -> Fp_12.is_equal (x,y) == fp12_is_equal (x,y) }}
, {{ \p -> Fp.normalize p == fp_normalize p }}
, {{ \p -> Fp_2.normalize p == fp2_normalize p }}
, {{ \p -> Fp_12.normalize p == fp12_normalize p }}
  ] (\e -> custom_prove_cryptol (rewrite (cryptol_ss ()) e) (w4_unint_z3 ["Fp","Fp_2","Fp_12"]));

let print_readably =  do { // NOTE this modifies the goal
  unfolding ["/\\", "\\/", "==>"];
  simplify (cryptol_ss());
  simplify (addsimps readability_rewrites cleanup_simpset);
  print_goal;
};
