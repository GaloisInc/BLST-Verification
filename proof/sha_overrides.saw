/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/
import "../cryptol-specs/Primitive/Keyless/Hash/SHA256.cry";

// Needed for the sha subfunction specifications:
let {{
  SHA256Blocks : {n} (fin n) => [8][32] -> [n][16][32] -> [8][32]
  SHA256Blocks H Ms = hs!0 where
    // hs =  [H] # [SHA256Compress H' (SHA256MessageSchedule M) | H' <- hs | M <- Ms]
    hs =  [H] # [processBlock_Common H' M | H' <- hs | M <- Ms]

  // SHA_2_Common:
  SHA256foo : {n} (fin n) => [8][32] -> [64*n][8] -> [8][32]
  SHA256foo H a = SHA256Blocks H Ms where
     Ms = map split (split (join a))
    }};

let blst_sha256_emit_spec = do {
  (h, h_ptr) <- ptr_to_fresh_readonly "h" (llvm_array 8 (llvm_int 32)); // should always be initialized
  let md_type = (llvm_array 32 (llvm_int 8));
  md_ptr <- crucible_alloc md_type;
  crucible_execute_func [md_ptr, h_ptr];
  crucible_points_to md_ptr (crucible_term {{ (split (join h)) : [32][8]}} );
};

let blst_sha256_hcopy_spec = do {
  let h_type = (llvm_array 8 (llvm_int 32));
  dst_ptr <- crucible_alloc h_type;
  (src, src_ptr) <- ptr_to_fresh_readonly "src" h_type;
  crucible_execute_func [dst_ptr, src_ptr];
  crucible_points_to dst_ptr (crucible_term src);
};

// blocks is a number of 512-bit blocks, which corresponds to 64 bytes
let blst_sha256_block_data_order_spec blocks = do {
  let h_type = (llvm_array 8 (llvm_int 32));
  (h, h_ptr) <- ptr_to_fresh "h" h_type;
  (inp, inp_ptr) <- ptr_to_fresh_readonly "inp" (llvm_array (eval_size {| 64*blocks |}) (llvm_int 8));
  crucible_execute_func [h_ptr, inp_ptr, crucible_term {{ `blocks : [64] }}];
  crucible_points_to h_ptr (crucible_term {{ SHA256foo`{blocks} h inp }});
};

let blst_sha256_bcopy_spec len = do {
  let buf_type = (llvm_array len (llvm_int 8));
  buf_ptr <- crucible_alloc buf_type;
  (inp, inp_ptr) <- ptr_to_fresh_readonly "inp" buf_type;
  crucible_execute_func [buf_ptr, inp_ptr, crucible_term {{ `len : [64] }}];
  crucible_points_to buf_ptr (crucible_term inp);
};

// blst_keygen calls sha256_block_data_order and sha256_update_bcopy, which are
// assembly routines that operate on variable-size data. For each call to those
// two routines, we must create an override using the concrete sizes of the
// data used in the call.

// sha256_update_bcopy and sha256_block_data_order are called sha256_update
// (among others). Here we define what data sizes are used in those calls.

// `sha256_update` maintains a 64 bytes buffer that is filled up incrementally
// using `sha256_bcopy`. When it is full, `sha256_block_data_order` is called.
// However, when data of length 64 is readily available in the input and the
// current offset is 0, `sha256_update` does not bother copying input bytes in
// its buffer.

// bcopy copies to a buffer of 64 bytes, and skips the copy if the data is
// exactly 64 bytes, so it copies between 1 and 63 bytes.

// block_data_order processes as many blocks as possible at once, so at most
// l/64, where l is the input size in bytes.

let block_data_order_sizes lens =
  let max = (\x y -> if eval_bool {{ `x > `y }} then x else y)
  in let m = foldr max lens 64
    in from_to 1 (eval_size {| m/64 |});

let make_blst_sha256_block_data_order_ov len = admit "blst_sha256_block_data_order" (blst_sha256_block_data_order_spec len);

let make_blst_sha256_bcopy_ov len = admit "blst_sha256_bcopy" (blst_sha256_bcopy_spec len);

bcopy_ovs <- do {
  let ss = from_to 1 63; // the SHA buffer is 64 bytes long, so we shouldn't be calling bcopy with more than that.
  ovs <- (for ss make_blst_sha256_bcopy_ov);
  return ovs;
};

blst_sha256_emit_ov <- admit "blst_sha256_emit" blst_sha256_emit_spec;
blst_sha256_hcopy_ov <- admit "blst_sha256_hcopy" blst_sha256_hcopy_spec;

let make_block_data_order_ovs lens = do {
  let ss = block_data_order_sizes lens;
  ovs <- for ss make_blst_sha256_block_data_order_ov;
  return ovs;
};
