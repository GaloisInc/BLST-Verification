/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

// NOTE: we only consider inputs that either have the infinity-bit set or compressed-bit set

// aggregate_in_g1_error_precond describes the circumstances under which aggregate_in_g1 returns an error (assuming either the compressed bit is set of the infinity bit is set)
let {{
  aggregate_in_g1_error_precond : [48][8] -> Bool
  aggregate_in_g1_error_precond zwire =
      ~(zwire@0)@1 // not infinity
    /\ (   uncompress_E1_x zwire >= `p
        \/ ~ is_square_fp (uncompress_E1_y2 zwire) // not on curve
        \/ uncompress_E1_x_fp zwire == Fp.field_zero // uncompresses to zero
        \/ ~ is_in_g1_impl (uncompress_E1_OK zwire) ) // not in group g1
}};

// case in which the input is not null and we return BLST_SUCCESS:
let blst_aggregate_in_g1_OK_nonnull_spec = do {
  //
  (out, out_ptr) <- ptr_to_fresh "blst_aggregate_in_g1_out" (llvm_struct "struct.POINTonE1");
  (inp, inp_ptr) <- ptr_to_fresh_readonly "blst_aggregate_in_g1_in" (llvm_struct "struct.POINTonE1");
  (zwire, zwire_ptr) <- ptr_to_fresh_readonly "blst_aggregate_in_g1_zwire" (llvm_array 48 (llvm_int 8));
  //
  llvm_precond {{ (zwire@0)@0 }}; // compressed
  llvm_precond {{ POINTonE1_invariant inp }}; // inp is a valid point (precondition of add)
  llvm_precond {{ ~aggregate_in_g1_error_precond zwire }}; // no error condition
  //
  llvm_execute_func [out_ptr, inp_ptr, zwire_ptr];
  //
  new_out <- llvm_fresh_var "new_out" (llvm_struct "struct.POINTonE1");
  llvm_points_to out_ptr (llvm_term new_out);
  llvm_postcond {{ affinify E (POINTonE1_abs new_out) == if (zwire@0)@1 then affinify E (POINTonE1_abs out) else add E (affinify E (POINTonE1_abs inp)) (uncompress_E1_OK zwire) }};
  //
  llvm_return (llvm_term {{ (`BLST_SUCCESS):[32] }});
};

// Special case: the input is null:

let blst_aggregate_in_g1_null_spec = do {
  //
  (out, out_ptr) <- ptr_to_fresh "blst_aggregate_in_g1_out" (llvm_struct "struct.POINTonE1");
  let inp_ptr = llvm_null;
  //
  (zwire, zwire_ptr) <- ptr_to_fresh_readonly "blst_aggregate_in_g1_zwire" (llvm_array 48 (llvm_int 8));
  llvm_precond {{ (zwire@0)@0 }}; // compressed
  llvm_precond {{ ~aggregate_in_g1_error_precond zwire }}; // no error condition
  //
  llvm_execute_func [out_ptr, inp_ptr, zwire_ptr];
  //
  new_out <- llvm_fresh_var "new_out" (llvm_struct "struct.POINTonE1");
  llvm_points_to out_ptr (llvm_term new_out);
  llvm_postcond {{ affinify E (POINTonE1_abs new_out) ==
    if (zwire@0)@1
    then point_O E
    else uncompress_E1_OK zwire
  }};
  //
  llvm_return (llvm_term {{ (`BLST_SUCCESS):[32] }});
};

// here we cover the error cases:
let blst_aggregate_in_g1_error_spec = do {
  (out, out_ptr) <- ptr_to_fresh "blst_aggregate_in_g1_out" (llvm_struct "struct.POINTonE1");
  (inp, inp_ptr) <- ptr_to_fresh_readonly "blst_aggregate_in_g1_in" (llvm_struct "struct.POINTonE1");
  (zwire, zwire_ptr) <- ptr_to_fresh_readonly "blst_aggregate_in_g1_zwire" (llvm_array 48 (llvm_int 8));
  llvm_precond {{ (zwire@0)@0 }}; // compressed
  llvm_precond {{ aggregate_in_g1_error_precond zwire }};
  llvm_execute_func [out_ptr, inp_ptr, zwire_ptr];
  ret <- llvm_fresh_var "blst_aggregate_in_g1_ret" (llvm_int 32);
  llvm_return (llvm_term ret);
  llvm_postcond {{ ret != `BLST_SUCCESS }};
};

// the behavior in the error case does not depend on whether the input is null or not:
let blst_aggregate_in_g1_null_error_spec = do {
  (out, out_ptr) <- ptr_to_fresh "blst_aggregate_in_g1_out" (llvm_struct "struct.POINTonE1");
  let inp_ptr = llvm_null;
  (zwire, zwire_ptr) <- ptr_to_fresh_readonly "blst_aggregate_in_g1_zwire" (llvm_array 48 (llvm_int 8));
  llvm_precond {{ (zwire@0)@0 }}; // compressed
  llvm_precond {{ aggregate_in_g1_error_precond zwire }};
  llvm_execute_func [out_ptr, inp_ptr, zwire_ptr];
  ret <- llvm_fresh_var "blst_aggregate_in_g1_ret" (llvm_int 32);
  llvm_return (llvm_term ret);
  llvm_postcond {{ ret != `BLST_SUCCESS }};
};

let overrides = foldr concat [vec_overrides,curve_operations_e1_ovs] [POINTonE1_Uncompress_OK_ov,POINTonE1_in_G1_ov];

// Assumptions

uncompress_not_point_O <- admit_cryptol {{ \x -> (is_point_O E (uncompress_E1_OK x)) == if uncompress_E1_x_fp x != Fp.field_zero then False else apply is_point_O E (uncompress_E1_OK x) }};

// decompression yields a point on the curve
uncompress_on_curve <- admit_cryptol {{ \x -> (is_point_affine E (uncompress_E1_OK x)) == True }};

// Proofs

let simpset = addsimps (concat_all [e1_curve_op_thms, POINTonE1_thms, [normalize_uncompress_OK_thm, uncompress_not_point_O, uncompress_on_curve]]) fp_simpset; // uncompress_not_point_O and uncompress_on_curve are there to satisfy the preconditions of the subgroup check

normalize_uncompress_OK_thm' <- custom_prove_cryptol {{ \x -> (affinify E (POINTonE1_abs (x'.0, x'.1, fp_unit_rep)) == uncompress_E1_OK x where x' = POINTonE1_affine_rep (uncompress_E1_OK x)) }}
  do {
    let fp_unit_rep = run ( eval_term {{ (fp_rep Fp.field_unit):[6][64] }} ); // NOTE: this results in type `([6][64])` (a one-tuple?) instead of `[6][64]`, but not in newer versions of SAW.
    let l1 = run (custom_prove_cryptol (rewrite (cryptol_ss ()) {{ \x y -> affinify E (POINTonE1_abs (x, y, fp_unit_rep)) == (fp_abs x, fp_abs y) }}) w4);
    let l2 = run (custom_prove_cryptol (rewrite (cryptol_ss ()) {{ \x -> (Fp.normalize x.0, Fp.normalize x.1) == normalize_affine_point Fp x }}) w4);
    rw_with_1 l1;
    unfolding ["POINTonE1_affine_rep"];
    simplify fp_simpset;
    rw_with [l2, normalize_uncompress_OK_thm];
    w4;
  };

affinify_abs_zero_thm <- custom_prove_cryptol (rewrite (cryptol_ss ()) {{affinify E (POINTonE1_abs (z,z,z)) == point_O E where z = [zero,zero,zero,zero,zero,zero]}}) w4;

let proof_script =
  do {
    hoist_ifs_in_goal;
    simplify simpset;
    rw_with [affinify_abs_zero_thm,normalize_uncompress_OK_thm'];
    simplify remove_higher_order_function_simpset;
    w4_unint_z3 ["sqrt_fp","uncompress_E1_x_fp","uncompress_E1_x","uncompress_E1_y2","is_square_fp","is_in_g1_impl","uncompress_E1_OK","is_point_affine_E","affinify_E","add_E"];
  };

blst_aggregate_in_g1_error_ov <- custom_verify
  "blst_aggregate_in_g1"
  [POINTonE1_Uncompress_BAD_ov,POINTonE1_Uncompress_OK_ov,POINTonE1_in_G1_ov]
  blst_aggregate_in_g1_error_spec
  proof_script;

blst_aggregate_in_g1_null_error_ov <- custom_verify
  "blst_aggregate_in_g1"
  [POINTonE1_Uncompress_BAD_ov,POINTonE1_Uncompress_OK_ov,POINTonE1_in_G1_ov]
  blst_aggregate_in_g1_null_error_spec
  proof_script;

blst_aggregate_in_g1_OK_nonnull_ov <- custom_verify
  "blst_aggregate_in_g1"
  overrides
  blst_aggregate_in_g1_OK_nonnull_spec
  proof_script;

blst_aggregate_in_g1_null_ov <- custom_verify
  "blst_aggregate_in_g1"
  overrides
  blst_aggregate_in_g1_null_spec
  proof_script;
