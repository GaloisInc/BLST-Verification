/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

// Imports

include "helpers.saw";
include "list_utils.saw";
include "types.saw";

m <- llvm_load_module "../build/llvm/libblst.a.bc";
let do_prove = false;

include "proof-helpers.saw";
include "hash_to_field.saw";
include "fp_overrides.saw";
include "vect.saw";
include "curve_operations.saw";
include "ec_mult.saw"; // for e1_scalar_mult_alg_thms

//import "../spec/Parameters.cry";
//import "../spec/ShortWeierstrassCurve.cry";
//import "../spec/HashToCurveE1.cry";
import "../spec/implementation/CurveOperation.cry";
import "../spec/implementation/HashToG1.cry";
EC <- cryptol_load "../spec/ShortWeierstrassCurve.cry";

// Specs

let blst_hash_to_g1_spec msg_len DST_len aug_len = do {
  p_ptr <- llvm_alloc POINTonE1_type;
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (DST, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  (aug, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  llvm_execute_func [p_ptr, msg_ptr, llvm_term {{ `msg_len : [64] }}, DST_ptr, llvm_term {{ `DST_len : [64] }}, aug_ptr, llvm_term {{ `aug_len : [64] }}];
  llvm_points_to p_ptr (llvm_term {{ POINTonE1_rep (hash_to_curve_opt (aug#msg, DST)) }});
};

let map_to_g1_nonnull_spec = do {
  out_ptr <- llvm_alloc POINTonE1_type;
  (u,u_ptr) <- ptr_to_fresh_readonly "u" vec384_type;
  (v,v_ptr) <- ptr_to_fresh_readonly "v" vec384_type;
  llvm_execute_func [out_ptr, u_ptr, v_ptr];
  llvm_points_to out_ptr (llvm_term {{ POINTonE1_rep (map_to_g1 [fp_abs u, fp_abs v]) }});
};

let map_to_isogenous_E1_spec = do {
  p_ptr <- llvm_alloc POINTonE1_type;
  (u, u_ptr) <- ptr_to_fresh_readonly "u" vec384_type;
  llvm_execute_func [p_ptr, u_ptr];
  llvm_points_to p_ptr (llvm_term {{ POINTonE1_rep (map_to_curve_simple_swu (fp_abs u)) }});
};

let isogeny_map_to_E1_alias_spec = do {
  (out, out_ptr) <- ptr_to_fresh "out" POINTonE1_type;
  llvm_execute_func [out_ptr, out_ptr];
  llvm_points_to out_ptr (llvm_term {{ POINTonE1_rep (iso_map (POINTonE1_abs out)) }});
};

let dbl_n_add_spec n = do {
  (out, out_ptr) <- ptr_to_fresh "out" POINTonE1_type;
  (p, p_ptr) <- ptr_to_fresh_readonly "p" POINTonE1_type;
  llvm_precond {{ POINTonE1_invariant out /\ POINTonE1_invariant p }};
  llvm_execute_func [out_ptr, llvm_term {{`n:[64]}}, p_ptr];
  llvm_points_to out_ptr (llvm_term {{ POINTonE1_rep (dbl_n_add (POINTonE1_abs out) `n (POINTonE1_abs p)) }});
};

// Proofs

map_to_isogenous_E1_ov <- admit "map_to_isogenous_E1" map_to_isogenous_E1_spec;
isogeny_map_to_E1_alias_ov <- admit "isogeny_map_to_E1" isogeny_map_to_E1_alias_spec;

lemma_2 <- really_prove_cryptol (rewrite (cryptol_ss ()) {{ \p q -> dbl_n_add p 2 q == point_dadd Fp (point_double Fp (point_double Fp p)) q Fp.field_zero True }}) [];

enable_experimental;

let verify_dbl_n_add n = really_custom_verify "POINTonE1_dbl_n_add" curve_operations_e1_ovs (dbl_n_add_spec n) //(do {print_goal; assume_unsat;});
  (do {
    simplify (addsimps POINTonE1_thms (cryptol_ss ()));
    goal_num_ite 3
      (do {
        unfolding ["dbl_n_add"];
        simplify remove_higher_order_function_simpset;
        w4_unint_z3 (foldr concat [fp_unints, ec_mult_unints] ["point_double_fp","point_add_fp","POINTonE1_rep","Fp"]);
      })
      z3;
  });

//verify_dbl_n_add 2;
let dbl_n_add_ns = [2,3,9,32,16];
dbl_n_add_ovs <- for dbl_n_add_ns verify_dbl_n_add;

let a4_rep = parse_core "[bvNat 64 3415322872136444497, bvNat 64 9675504606121301699, bvNat 64 13284745414851768802, bvNat 64 2873609449387478652, bvNat 64 2897906769629812789, bvNat 64 1536947672689614213]"; // this is the representation of a4
lemma_1 <- prove_cryptol {{ fp_invariant a4_rep == True}} [];

let overrides = foldr concat [curve_operations_e1_ovs, dbl_n_add_ovs] [map_to_isogenous_E1_ov, isogeny_map_to_E1_alias_ov];

map_to_g1_nonnull_ov <- really_custom_verify "map_to_g1" overrides map_to_g1_nonnull_spec
  (do {
    simplify (addsimps POINTonE1_thms (cryptol_ss ()));
    goal_num_ite 8
      (do { // the main safety goal
        unfolding ["map_to_g1","clear_cofactor"];
        simplify (addsimps [lemma_1] empty_ss);
        simplify remove_higher_order_function_simpset;
        w4_unint_z3 ["point_double_fp","point_add_fp","point_dadd_fp","iso_map","dbl_n_add","map_to_curve_simple_swu"];
      })
      z3; // override preconditions
    });

// now let's prove the the multiplication-by-doubling code is correct
let {{
  h_eff = 0xd201000000010001 // For clearing the cofactor
  clear_cofactor_ P = e1_scalar_mult (to_Fp h_eff) P
}};


// unfolding recursion by hand...
dbl_n_add_2_unfold_thm <- really_custom_prove_cryptol (rewrite (cryptol_ss ()) {{ \p q -> dbl_n_add p 2 q == point_dadd Fp (point_double Fp (point_double Fp p)) q Fp.field_zero True }}) w4;
dbl_n_add_3_unfold_thm <- really_custom_prove_cryptol (rewrite (cryptol_ss ()) {{ \p q -> dbl_n_add p 3 q == point_dadd Fp (point_double Fp (point_double Fp (point_double Fp p))) q Fp.field_zero True }}) w4;
dbl_n_add_9_unfold_thm <- really_custom_prove_cryptol (rewrite (cryptol_ss ()) {{ \p q -> dbl_n_add p 9 q == point_dadd Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp p))))))))) q Fp.field_zero True }}) w4;
dbl_n_add_32_unfold_thm <- really_custom_prove_cryptol (rewrite (cryptol_ss ()) {{ \p q -> dbl_n_add p 32 q == point_dadd Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp p)))))))))))))))))))))))))))))))) q Fp.field_zero True }}) w4;
dbl_n_add_16_unfold_thm <- really_custom_prove_cryptol (rewrite (cryptol_ss ()) {{ \p q -> dbl_n_add p 16 q == point_dadd Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp (point_double Fp p)))))))))))))))) q Fp.field_zero True }}) w4;
let dbl_n_add_unfold_thms = [dbl_n_add_2_unfold_thm, dbl_n_add_3_unfold_thm, dbl_n_add_9_unfold_thm, dbl_n_add_32_unfold_thm, dbl_n_add_16_unfold_thm];

let prove_dbl_lemma n = really_custom_prove_cryptol {{ \p q -> affinify E (dbl_n_add p `n q) == add E (e1_scalar_mult (2^^(`n)) (affinify E p)) (affinify E q) }}
  (do {
    simplify (addsimps (foldr concat [e1_scalar_mult_alg_thms, e1_curve_op_thms, dbl_n_add_unfold_thms] []) (cryptol_ss ()));
    simplify remove_higher_order_function_simpset;
    w4_unint_z3 ["Fp","e1_scalar_mult"];
  });

dbl_lemmas <- for dbl_n_add_ns prove_dbl_lemma;

mult_by_doubling_thm <- really_custom_prove_cryptol {{ \p -> affinify E (clear_cofactor p) == clear_cofactor_ (affinify E p) }}
  (do {
    unfolding ["clear_cofactor","clear_cofactor_"];
    simplify (cryptol_ss ());
    print_goal;
    assume_unsat;
  });


let aug_len = 48; // aug_len should be 96 or 48
let msg_len = 32;
let DST_len= 8;
let hash_to_field_nelems = [2]; // the values of nelems for which we prove hash_to_field
hash_to_field_ovs <- for hash_to_field_nelems (verify_hash_to_field_for aug_len msg_len DST_len);

// let's get rid of map:
let map_size_2_term = parse_core "\\(f : Integer -> Vec 6 (Vec 64 Bool)) -> \\(y : Vec 2 Integer) -> map Integer (Vec 6 (Vec 64 Bool)) f 2 y";
let map_size_2_eq_term = beta_reduce_term {{ \x -> map_size_2_term (\(y : Integer) -> fp_rep y) x == [fp_rep (x@0), fp_rep (x@1)]}};
map_size_2_thm <- prove_cryptol map_size_2_eq_term [];

hash_to_g1_ov <- really_custom_verify "blst_hash_to_g1" (concat [map_to_g1_nonnull_ov] hash_to_field_ovs) (blst_hash_to_g1_spec msg_len DST_len aug_len) (do {
    unfolding ["hash_to_curve_opt"];
    unfolding ["map"];
    simplify (cryptol_ss ()); // rewrite cryptol map to SAW map
    simplify (addsimps [map_size_2_thm] empty_ss); // get rid of map
    simplify (addsimps fp_rep_thms empty_ss);// simplify (abs . rep)
    print_goal;
    w4_unint_z3 ["map_to_g1","HashToCurveE1::hash_to_field"];}
  );
