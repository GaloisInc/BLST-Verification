/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/
///////////////////////////////////////////////////////////////////////////////
// Imports
///////////////////////////////////////////////////////////////////////////////

include "helpers.saw";
include "list_utils.saw";
include "types.saw";

m <- llvm_load_module "../build/llvm/libblst.a.bc";
let do_prove = true;
include "proof-helpers.saw";

include "x86.saw";
include "fp12_tower.saw";
include "keygen_defs.saw";
include "hash_to_field_defs.saw";
include "sha_overrides.saw";
include "ec_opts.saw";
include "core_verify_aux.saw";

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

let blst_keygen_spec IKM_len info_len = do {
  SK_ptr <- crucible_alloc pow256_type;

  IKM <- crucible_fresh_var "IKM" (llvm_array IKM_len (llvm_int 8));
  IKM_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array IKM_len (llvm_int 8));
  crucible_points_to IKM_ptr (crucible_term IKM);

  info <- crucible_fresh_var "info" (llvm_array info_len (llvm_int 8));
  info_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array info_len (llvm_int 8));
  crucible_points_to info_ptr (crucible_term info);

  crucible_execute_func [SK_ptr, IKM_ptr, crucible_term {{ `IKM_len:[64]}}, info_ptr, crucible_term {{ `info_len:[64]}}];
  new_SK <- crucible_fresh_var "new_SK" pow256_type;
  crucible_points_to SK_ptr (crucible_term new_SK);
};

let blst_sk_to_pk_in_g1_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1");
  (_, SK_ptr) <- ptr_to_fresh_readonly "SK" vec256_type;
  crucible_execute_func [out_ptr, SK_ptr];
  new_SK <- crucible_fresh_var "new_SK" vec256_type;
  crucible_points_to SK_ptr (crucible_term new_SK);
};

let blst_sk_to_pk_in_g2_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, SK_ptr) <- ptr_to_fresh_readonly "SK" vec256_type;
  crucible_execute_func [out_ptr, SK_ptr];
  new_SK <- crucible_fresh_var "new_SK" vec256_type;
  crucible_points_to SK_ptr (crucible_term new_SK);
};

let hash_to_field_spec nelems aug_len msg_len DST_len = do {
  elems_ptr <- crucible_alloc (llvm_array nelems vec384_type);
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (_, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  crucible_execute_func [elems_ptr, crucible_term {{ `nelems : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}, msg_ptr, crucible_term {{ `msg_len : [64] }}, DST_ptr, crucible_term {{ `DST_len : [64] }}];
  new_hash_to_field_elems <- crucible_fresh_var "new_elems" (llvm_array nelems vec384_type);
  crucible_points_to elems_ptr (crucible_term new_hash_to_field_elems);
};

let blst_p1_affine_in_g1_spec = do {
  (_, p_ptr) <- ptr_to_fresh_readonly "p" (llvm_struct "struct.POINTonE1_affine");
  crucible_execute_func [p_ptr];
};


let blst_p2_affine_in_g2_spec = do {
  (_, p_ptr) <- ptr_to_fresh_readonly "p" (llvm_struct "struct.POINTonE2_affine");
  crucible_execute_func [p_ptr];
};

let blst_p1_deserialize_spec = do { // TODO: out is left invalid if there is an error
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (_, in_ptr) <- ptr_to_fresh_readonly "in" (llvm_array 96 (llvm_int 8));
  crucible_execute_func [out_ptr, in_ptr];
  //new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE1_affine");
  //crucible_points_to out_ptr (crucible_term new_out);
  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_return (crucible_term ret);
};
let blst_p2_deserialize_spec = do { // TODO: out is left invalid if there is an error
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2_affine");
  (_, in_ptr) <- ptr_to_fresh_readonly "in" (llvm_array 192 (llvm_int 8));
  crucible_execute_func [out_ptr, in_ptr];
  //new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE2_affine");
  //crucible_points_to out_ptr (crucible_term new_out);
  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_return (crucible_term ret);
};

let blst_sign_pk_in_g2_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1");
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_struct "struct.POINTonE1");
  (_, sk_ptr) <- ptr_to_fresh_readonly "SK" pow256_type;
  crucible_execute_func [out_ptr, msg_ptr, sk_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE1");
  crucible_points_to out_ptr (crucible_term new_out);
};

let blst_sign_pk_in_g1_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_struct "struct.POINTonE2");
  (_, sk_ptr) <- ptr_to_fresh_readonly "SK" pow256_type;
  crucible_execute_func [out_ptr, msg_ptr, sk_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE2");
  crucible_points_to out_ptr (crucible_term new_out);
};

let blst_core_verify_pk_in_g1_spec aug_len msg_len DST_len = do {
  (_, pk_ptr) <- ptr_to_fresh_readonly "pk" (llvm_struct "struct.POINTonE1_affine");
  (_, signature_ptr) <- ptr_to_fresh_readonly "signature" (llvm_struct "struct.POINTonE2_affine");
  hash_or_encode <- crucible_fresh_var "hash_or_encode" (llvm_int 32);
  (_, sk_ptr) <- ptr_to_fresh_readonly "SK" pow256_type;
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (_, dst_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  crucible_execute_func [pk_ptr, signature_ptr, crucible_term hash_or_encode, msg_ptr, crucible_term {{ `msg_len : [64] }}, dst_ptr, crucible_term {{ `DST_len : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}];
  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_return (crucible_term ret);
};

let blst_core_verify_pk_in_g2_spec aug_len msg_len DST_len = do {
  (_, pk_ptr) <- ptr_to_fresh_readonly "pk" (llvm_struct "struct.POINTonE2_affine");
  (_, signature_ptr) <- ptr_to_fresh_readonly "signature" (llvm_struct "struct.POINTonE1_affine");
  hash_or_encode <- crucible_fresh_var "hash_or_encode" (llvm_int 32);
  (_, sk_ptr) <- ptr_to_fresh_readonly "SK" pow256_type;
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (_, dst_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  crucible_execute_func [pk_ptr, signature_ptr, crucible_term hash_or_encode, msg_ptr, crucible_term {{ `msg_len : [64] }}, dst_ptr, crucible_term {{ `DST_len : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}];
  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_return (crucible_term ret);
};

// NOTE in keygen, something of size `info_len+3` is hashed
block_data_order_ovs <- make_block_data_order_ovs [IKM_len, (eval_size {|info_len+3|}), aug_len, msg_len, dst_len]; // pass a list with the sizes of all the things hashed

let sha_assembly_overrides = concat [blst_sha256_emit_ov, blst_sha256_hcopy_ov] block_data_order_ovs;

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

blst_keygen_ov <- verify "blst_keygen" (concat sha_assembly_overrides assembly_overrides) (blst_keygen_spec IKM_len info_len);
hash_to_field_ov <- verify "hash_to_field" (concat sha_assembly_overrides assembly_overrides) (hash_to_field_spec nelems aug_len msg_len dst_len);

let overrides = foldr concat [ec_ops_overrides, assembly_overrides, fp12_tower_ovs] [];
blst_sk_to_pk_in_g1_ov <- verify "blst_sk_to_pk_in_g1" overrides blst_sk_to_pk_in_g1_spec;
blst_sk_to_pk_in_g2_ov <-verify "blst_sk_to_pk_in_g2" overrides blst_sk_to_pk_in_g2_spec;
blst_p1_affine_in_g1_ov <- verify "blst_p1_affine_in_g1" overrides blst_p1_affine_in_g1_spec;
blst_p2_affine_in_g2_ov <- verify "blst_p2_affine_in_g2" overrides blst_p2_affine_in_g2_spec;
blst_p1_deserialize_ov <- verify "blst_p1_deserialize" overrides blst_p1_deserialize_spec;
blst_p2_deserialize_ov <- verify "blst_p2_deserialize" overrides blst_p2_deserialize_spec;
sign_pk_in_g2_ov <- verify "blst_sign_pk_in_g2" overrides (blst_sign_pk_in_g2_spec);
sign_pk_in_g1_ov <- verify "blst_sign_pk_in_g1" overrides (blst_sign_pk_in_g1_spec);

// core verify:
let make_hash_to_field_ov n = verify "hash_to_field" (concat sha_assembly_overrides assembly_overrides) (hash_to_field_spec n aug_len msg_len dst_len);
hash_to_field_ovs <- for [1,2,4] make_hash_to_field_ov;
let overrides_pk_in_g1 = foldr concat [miller_loop_n_ovs, hash_to_field_ovs, ec_ops_overrides, assembly_overrides, fp12_tower_ovs] [final_exp_alias_ov, final_exp_ov, map_to_g2_v_null_ov, map_to_g2_ov];
blst_core_verify_pk_in_g1_ov <- verify "blst_core_verify_pk_in_g1" overrides_pk_in_g1 (blst_core_verify_pk_in_g1_spec aug_len msg_len dst_len);
let overrides_pk_in_g2 = foldr concat [miller_loop_n_ovs, hash_to_field_ovs, ec_ops_overrides, assembly_overrides, fp12_tower_ovs] [final_exp_alias_ov, final_exp_ov];
blst_core_verify_pk_in_g2_ov <- verify "blst_core_verify_pk_in_g2" overrides_pk_in_g2 (blst_core_verify_pk_in_g2_spec aug_len msg_len dst_len);
