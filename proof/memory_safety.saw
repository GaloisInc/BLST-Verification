///////////////////////////////////////////////////////////////////////////////
// Imports
///////////////////////////////////////////////////////////////////////////////

include "helpers.saw";
include "list_utils.saw";

m <- llvm_load_module "../build/llvm/libblst.a.bc";

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

let vec256_type = (llvm_array 4 (llvm_int 64));
let vec512_type = (llvm_array 8 (llvm_int 64));
let vec384_type = (llvm_array 6 (llvm_int 64));
let vec768_type = (llvm_array 12 (llvm_int 64));
let vec768x_type = (llvm_array 24 (llvm_int 64));
let vec384x_type = (llvm_array 12 (llvm_int 64)); // array of two vec384
let limb_type = (llvm_int 64);
let size_type = (llvm_int 64);

// First we provide specs for assembly routines in order to create overrides
// for them. We will only override assembly routines that operate on
// constant-size data, as otherwise dealing with overrides is difficult (for
// now, those are given C stubs). Thus we also do not specify the assembly
// routines that operate on variable-size data.

// We start with vect.h

// TODO: use a set of spec templates (one for each signature)?

let mul_mont_sparse_256_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_mont_sparse_256_alias_spec = do { // NOTE: first two args are aliases
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_mont_sparse_256_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let redc_mont_256_spec = do {
  ret_ptr <- crucible_alloc vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec512_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let redc_mont_256_alias_1_2_spec = do {
  (_, a_ptr) <- ptr_to_fresh "a" vec512_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [a_ptr, a_ptr, b_ptr, crucible_term n0];
  new_a <- crucible_fresh_var "new_a" vec512_type;
  crucible_points_to a_ptr (crucible_term new_a);
};

let from_mont_256_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let add_mod_256_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sub_mod_256_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_by_3_mod_256_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let cneg_mod_256_spec = do {
  ret_ptr <- crucible_alloc vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  flag <- crucible_fresh_var "flag" limb_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term flag, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let lshift_mod_256_spec = do {
  ret_ptr <- crucible_alloc vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  count <- crucible_fresh_var "count" size_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term count, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let rshift_mod_256_spec = do {
  ret_ptr <- crucible_alloc vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  count <- crucible_fresh_var "count" size_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term count, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let eucl_inverse_mod_256_spec = do {
  ret_ptr <- crucible_alloc vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  (_, one_ptr) <- ptr_to_fresh_readonly "one" vec256_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr, one_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_return (crucible_term ret);
};

let mul_mont_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_mont_384_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_mont_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_mont_384_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_n_mul_mont_384_spec  = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  count <- crucible_fresh_var "count" size_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term count, p_ptr, crucible_term n0, b_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_n_mul_mont_383_spec  = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  count <- crucible_fresh_var "count" size_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term count, p_ptr, crucible_term n0, b_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_n_mul_mont_383_alias_1_2_spec  = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  count <- crucible_fresh_var "count" size_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, crucible_term count, p_ptr, crucible_term n0, b_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_384_spec = do {
  ret_ptr <- crucible_alloc vec768_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_384_spec = do {
  ret_ptr <- crucible_alloc vec768_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let redc_mont_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec768_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let from_mont_384_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sgn0_pty_mont_384_spec = do {
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [a_ptr, p_ptr, crucible_term n0];
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_return (crucible_term ret);
};

let sgn0_pty_mont_384x_spec = do {
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [a_ptr, p_ptr, crucible_term n0];
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_return (crucible_term ret);
};

let sgn0_pty_mod_384_spec = do {
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [a_ptr, p_ptr];
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_return (crucible_term ret);
};

let sgn0_pty_mod_384x_spec = do {
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [a_ptr, p_ptr];
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_return (crucible_term ret);
};

let add_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let add_mod_384_alias_1_2_3_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let add_mod_384_alias_1_2_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};


let sub_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sub_mod_384_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_by_8_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_by_8_mod_384_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_by_3_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_by_3_mod_384_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let cneg_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  flag <- crucible_fresh_var "flag" limb_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term flag, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let cneg_mod_384_alias_1_2_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  flag <- crucible_fresh_var "flag" limb_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, crucible_term flag, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let lshift_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  count <- crucible_fresh_var "count" size_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term count, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let eucl_inverse_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  (_, one_ptr) <- ptr_to_fresh_readonly "one" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr, one_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_return (crucible_term ret);
};

let mul_mont_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_mont_384x_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384x_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_mont_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_mont_384x_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_mont_382x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_mont_382x_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr, crucible_term n0];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_n_mul_mont_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  count <- crucible_fresh_var "count" size_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384x_type;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term count, p_ptr, crucible_term n0, b_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_382x_spec = do {
  ret_ptr <- crucible_alloc vec768x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sqr_382x_spec = do {
  ret_ptr <- crucible_alloc vec768x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let add_mod_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let add_mod_384x_alias_1_2_spec = do {
  (_, ret_ptr) <- ptr_to_fresh_readonly "b" vec384x_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let add_mod_384x_alias_1_2_3_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};


let sub_mod_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sub_mod_384x_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384x_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_by_8_mod_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_by_8_mod_384x_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_by_3_mod_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_by_3_mod_384x_alias_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_by_1_plus_i_mod_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384x_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let add_mod_384x384_spec = do {
  ret_ptr <- crucible_alloc vec768_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec768_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let sub_mod_384x384_spec = do {
  ret_ptr <- crucible_alloc vec768_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec768_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let vec_select_spec (bytes:Int) = do {
  ret_ptr <- crucible_alloc (llvm_array bytes (llvm_int 8));
  (_, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_array bytes (llvm_int 8));
  (_, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_array bytes (llvm_int 8));
  sel_a <- crucible_fresh_var "sel_a" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, crucible_term sel_a];
  new_ret <- crucible_fresh_var "new_ret" (llvm_array bytes (llvm_int 8));
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let vec_select_alias_1_3_spec bytes = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" (llvm_array bytes (llvm_int 8));
  (_, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_array bytes (llvm_int 8));
  sel_a <- crucible_fresh_var "sel_a" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, ret_ptr, crucible_term sel_a];
  new_ret <- crucible_fresh_var "new_ret" (llvm_array bytes (llvm_int 8));
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let vec_select_alias_1_2_spec bytes = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" (llvm_array bytes (llvm_int 8));
  (_, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_array bytes (llvm_int 8));
  sel_a <- crucible_fresh_var "sel_a" limb_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, crucible_term sel_a];
  new_ret <- crucible_fresh_var "new_ret" (llvm_array bytes (llvm_int 8));
  crucible_points_to ret_ptr (crucible_term new_ret);
};

// sha-related functions

let blst_sha256_emit_spec = do {
  (_, h_ptr) <- ptr_to_fresh_readonly "h" (llvm_array 8 (llvm_int 32)); // should always be initialized
  let md_type = (llvm_array 32 (llvm_int 8));
  md_ptr <- crucible_alloc md_type;
  crucible_execute_func [md_ptr, h_ptr];
  new_md <- crucible_fresh_var "new_md" md_type;
  crucible_points_to md_ptr (crucible_term new_md);
};


let blst_sha256_hcopy_spec = do {
  let h_type = (llvm_array 8 (llvm_int 32));
  dst_ptr <- crucible_alloc h_type;
  (_, src_ptr) <- ptr_to_fresh_readonly "src" h_type;
  crucible_execute_func [dst_ptr, src_ptr];
  new_dst <- crucible_fresh_var "new_dst" h_type;
  crucible_points_to dst_ptr (crucible_term new_dst);
};

// blocks is a number of 512-bit blocks, which corresponds to 64 bytes
let blst_sha256_block_data_order_spec blocks = do {
  let h_type = (llvm_array 8 (llvm_int 32));
  (_, h_ptr) <- ptr_to_fresh "h" h_type;
  (_, inp_ptr) <- ptr_to_fresh_readonly "inp" (llvm_array (eval_size {| 64*blocks |}) (llvm_int 8));
  crucible_execute_func [h_ptr, inp_ptr, crucible_term {{ `blocks : [64] }}];
  new_h <- crucible_fresh_var "new_h" h_type;
  crucible_points_to h_ptr (crucible_term new_h);
};

let blst_sha256_bcopy_spec len = do {
  let buf_type = (llvm_array len (llvm_int 8));
  buf_ptr <- crucible_alloc buf_type;
  (_, inp_ptr) <- ptr_to_fresh_readonly "inp" (llvm_array len (llvm_int 8));
  crucible_execute_func [buf_ptr, inp_ptr, crucible_term {{ `len : [64] }}];
  new_buf <- crucible_fresh_var "new_buf" buf_type;
  crucible_points_to buf_ptr (crucible_term new_buf);
};

// blst_keygen calls sha256_block_data_order and sha256_update_bcopy, which are
// assembly routines that operate on variable-size data. The main difficulty is
// that for each call to those two routines, we must create an override using
// the concrete sizes of the data used in the call.

// sha256_update_bcopy and sha256_block_data_order are called sha256_update
// (among others). Here we define what data sizes are used in those calls.

// `sha256_update` maintains a 64 bytes buffer that is filled up incrementally
// using `sha256_bcopy`. When it is full, `sha256_block_data_order` is called.
// However, when data of length 64 is readily available in the input and the
// current offset is 0, `sha256_update` does not bother copying input bytes in
// its buffer.

// bcopy sizes in one call to sha256_update:
let sha256_update_bcopy_sizes len offset = do { // returns a pair; first elem is offset, then list of override sizes
  let sizes =
    if eval_bool {{ `len == 0 \/ (`offset == 0 /\ (`len:Integer) % 64 == 0)}}
    then []
    else
      if eval_bool {{ (`len:Integer) <= (64-(`offset:Integer)) }} // fits in the remaining buffer space, so there will be a single copy
      then [eval_size {| len |}]
      else // does not fit in the remaining buffer space; there will be one or two copies
        if eval_bool {{ `offset == 0 }}
        then [eval_size {| len % 64 |}] // one copy
        else
          if eval_bool {{ ((`offset:Integer) + (`len:Integer)) % 64 == 0 }}
          then [eval_size {| 64-offset |}] // one copy
          else [eval_size {| 64-offset |}, eval_size {| (offset + len) % 64|}]; // two copies
  let new_offset = eval_size {|(offset + len) % 64|};
  return (new_offset, sizes);
};

// `sha256_block_data_order` is called with multiples of the block size. Here
// we compute what sizes are used.

// sha256_block_data_order sizes in one call to sha256_update:
let sha256_update__block_data_order_sizes len offset =
  if eval_bool {{ (`offset  == 0) /\ ((`len:Integer) + (`offset:Integer)) >= 64 }}
  then (eval_size {| len % 64 |}, [eval_size {| len / 64 |}])
  else
    if eval_bool {{ ((`len:Integer) + (`offset:Integer)) >= 64 }}
    then
      if eval_bool {{ ((`len:Integer) + (`offset:Integer)) >= 128 }}
      then (eval_size {| (offset + len) % 64 |}, [1, eval_size {| ((len + offset) / 64) - 1 |}])
      else (eval_size {| (offset + len) % 64 |}, [1])
    else (eval_size {| (offset + len) % 64 |}, []);

// Now we define the sizes for the whole of blst_keygen.

let HMAC_init_bcopy_sizes len = do {
  (_, ss_1_) <- sha256_update_bcopy_sizes len 0;
  let ss_1 =
    if eval_bool {{ (`len:Integer) > 64 }}
    then ss_1_
    else [len];
  (_, ss_2) <- sha256_update_bcopy_sizes 64 0;
  return (0, (dedup (concat ss_1 ss_2)));
};

let HMAC_init_block_data_order_sizes len = do {
  let (_, ss_1_) = sha256_update__block_data_order_sizes len 0;
  let ss_1 =
    if eval_bool {{ (`len:Integer) > 64 }}
    then ss_1_
    else [];
  let (_, ss_2) = sha256_update__block_data_order_sizes 64 0;
  //for (dedup (foldr concat [ss_1, ss_2] [1])) print;
  return (0, (dedup (foldr concat [ss_1, ss_2] [1])));
};

let blst_keygen_bcopy_sizes salt_len IKM_len info_len L = do {
  // * HKDF_extract
  //   * HMAC_init
  (_, ss_1) <- HMAC_init_bcopy_sizes salt_len;
  //   * offset is 0 after this
  //   * HMAC_update
  (offset_2, ss_2) <- sha256_update_bcopy_sizes IKM_len 0;
  //   * HMAC_update again (with size 1)
  (_, ss_x) <- sha256_update_bcopy_sizes 1 offset_2; // TODO: ss_x because added later
  //   * HMAC_final
  //      nothing
  // * HKDF_expand
  //   * HMAC_init (resets the offset? it seems)
  (offset_3, ss_3) <- HMAC_init_bcopy_sizes 32;
  let ss_4 = if eval_bool {{ `info_len != 0 }} then [info_len] else [];
  (offset_5, ss_5) <- sha256_update_bcopy_sizes (eval_size {| info_len + 3 |}) 0; // NOTE: in the C code, info_len is first increased by 2 and then sha256_update is called with info_len + 1
  // now there is a while loop, but the offset is reset at every iteration and the sizes are constant
  (_, ss_6) <- sha256_update_bcopy_sizes 32 0; // offset is 32 after this
  (_, ss_7) <- sha256_update_bcopy_sizes (eval_size {| info_len + 3 |}) 32; // NOTE: in the C code, info_len is first increased by 2 and then sha256_update is called with info_len + 1
  let ss_8 = [ eval_size {| L % 32 |} ];
  //let res = foldr concat [ss_1, ss_2, ss_x, ss_3, ss_4, ss_5, ss_6, ss_7, ss_8] [];
  let res = dedup (foldr concat [ss_1, ss_2, ss_x, ss_3, ss_4, ss_5, ss_6, ss_7, ss_8] []);
  //for res print;
  return res;
};

let blst_keygen_block_data_order_sizes salt_len IKM_len info_len L = do {
  // * HKDF_extract
  //   * HMAC_init
  (_, ss_1) <- HMAC_init_block_data_order_sizes salt_len;
  //   * offset is 0 after this
  //   * HMAC_update
  let (offset_2, ss_2) = sha256_update__block_data_order_sizes IKM_len 0;
  //   * HMAC_update again (with size 1)
  let (_, ss_x) = sha256_update__block_data_order_sizes 1 offset_2; // TODO: ss_x because added later
  //   * HMAC_final (size is 1 here)
  // * HKDF_expand
  //   * HMAC_init (resets the offset)
  (offset_3, ss_3) <- HMAC_init_block_data_order_sizes 32;
  let (offset_5, ss_5) = sha256_update__block_data_order_sizes (eval_size {| info_len + 3 |}) offset_3; // NOTE: in the C code, info_len is first increased by 2 and then sha256_update is called with info_len + 1
  // now there is a while loop, but the offset is reset at every iteration and the sizes are constant
  let (_, ss_6) = sha256_update__block_data_order_sizes 32 0; // offset is 32 after this
  let (_, ss_7) = sha256_update__block_data_order_sizes (eval_size {| info_len + 3 |}) 32; // NOTE: in the C code, info_len is first increased by 2 and then sha256_update is called with info_len + 1
  let res = dedup (foldr concat [ss_1, ss_2, ss_x, ss_3, ss_5, ss_6, ss_7] [1]); // sha256_final uses size 1
  //for res print;
  return res;
};

// Now we do the same for `hash_to_field`.

// `hash_to_field` calls `expand_message_xmd`, which calls the sha-related functions.
let blst_expand_message_xmd__block_data_order_sizes len_in_bytes aug_len msg_len DST_len = do {
  // sha256_update(&ctx, aug, aug_len)
  let (offset_1, ss_1) = sha256_update__block_data_order_sizes aug_len 0;
  // sha256_update(&ctx, msg, msg_len)
  let (offset_2, ss_2) = sha256_update__block_data_order_sizes msg_len offset_1;
  // sha256_update(&ctx, b_i.c + 30, 3 + DST_len + 1)
  let (_, ss_3) = sha256_update__block_data_order_sizes (eval_size {|DST_len + 4|}) offset_2;
  // sha256_final(b_0.c, &ctx)
  // sha256_block_data_order(ctx.h, b_i.c, b_i_blocks / 64)
  let rest = [1, eval_int {{ ( ((33 + `dst_len + 1 + 9) + 63) && (-64:[64]) ) /64 }}];
  //for (foldr concat [ss_1, ss_2, ss_3] rest) print;
  return (dedup (foldr concat [ss_1, ss_2, ss_3] rest));
};

// Now we give specs for the functions we verify:

let blst_keygen_spec IKM_len info_len = do {
  SK_ptr <- crucible_alloc vec256_type;

  IKM <- crucible_fresh_var "IKM" (llvm_array IKM_len (llvm_int 8));
  IKM_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array IKM_len (llvm_int 8));
  crucible_points_to IKM_ptr (crucible_term IKM);

  info <- crucible_fresh_var "info" (llvm_array info_len (llvm_int 8));
  info_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array info_len (llvm_int 8));
  crucible_points_to info_ptr (crucible_term info);

  crucible_execute_func [SK_ptr, IKM_ptr, crucible_term {{ `IKM_len:[64]}}, info_ptr, crucible_term {{ `info_len:[64]}}];
  // TODO: replace by points_to
  new_SK <- crucible_fresh_var "new_SK" vec256_type;
  crucible_points_to SK_ptr (crucible_term new_SK);
};

let blst_sk_to_pk_in_g1_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1");
  (_, SK_ptr) <- ptr_to_fresh_readonly "SK" vec256_type;
  crucible_execute_func [out_ptr, SK_ptr];
  new_SK <- crucible_fresh_var "new_SK" vec256_type;
  crucible_points_to SK_ptr (crucible_term new_SK);
};

let blst_sk_to_pk_in_g2_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, SK_ptr) <- ptr_to_fresh_readonly "SK" vec256_type;
  crucible_execute_func [out_ptr, SK_ptr];
  new_SK <- crucible_fresh_var "new_SK" vec256_type;
  crucible_points_to SK_ptr (crucible_term new_SK);
};

let hash_to_field_spec nelems aug_len msg_len DST_len = do {
  elems_ptr <- crucible_alloc (llvm_array nelems vec384_type);
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 64));
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 64));
  (_, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 64));
  crucible_execute_func [elems_ptr, crucible_term {{ `nelems : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}, msg_ptr, crucible_term {{ `msg_len : [64] }}, DST_ptr, crucible_term {{ `DST_len : [64] }}];
  new_elems <- crucible_fresh_var "new_elems" (llvm_array nelems vec384_type);
  crucible_points_to elems_ptr (crucible_term new_elems);
};

let blst_p1_affine_in_g1_spec = do {
  (_, p_ptr) <- ptr_to_fresh_readonly "p" (llvm_struct "struct.POINTonE1_affine");
  crucible_execute_func [p_ptr];
};


let blst_p2_affine_in_g2_spec = do {
  (_, p_ptr) <- ptr_to_fresh_readonly "p" (llvm_struct "struct.POINTonE2_affine");
  crucible_execute_func [p_ptr];
};

let blst_p1_deserialize_spec = do { // TODO: out is left invalid if there is an error
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (_, in_ptr) <- ptr_to_fresh_readonly "in" (llvm_array 96 (llvm_int 8));
  crucible_execute_func [out_ptr, in_ptr];
  //new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE1_affine");
  //crucible_points_to out_ptr (crucible_term new_out);
  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_return (crucible_term ret);
};
let blst_p2_deserialize_spec = do { // TODO: out is left invalid if there is an error
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2_affine");
  (_, in_ptr) <- ptr_to_fresh_readonly "in" (llvm_array 192 (llvm_int 8));
  crucible_execute_func [out_ptr, in_ptr];
  //new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE2_affine");
  //crucible_points_to out_ptr (crucible_term new_out);
  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_return (crucible_term ret);
};

// ec_ops.h

let POINTonE1_384_dadd_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE1");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE1");
  (_, a4_ptr) <- ptr_to_fresh_readonly "a4" vec384_type;
  crucible_execute_func [out_ptr, p1_ptr, p2_ptr, a4_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE1");
  crucible_points_to out_ptr (crucible_term new_out);
};

let POINTonE2_384x_dadd_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE2");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE2");
  (_, a4_ptr) <- ptr_to_fresh_readonly "a4" vec384x_type;
  crucible_execute_func [out_ptr, p1_ptr, p2_ptr, a4_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE2");
  crucible_points_to out_ptr (crucible_term new_out);
};

let POINTonE1_384_dadd_affine_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE1");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE1");
  crucible_execute_func [out_ptr, p1_ptr, p2_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE1");
  crucible_points_to out_ptr (crucible_term new_out);
};

let POINTonE2_384x_dadd_affine_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE2");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE2");
  crucible_execute_func [out_ptr, p1_ptr, p2_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE2");
  crucible_points_to out_ptr (crucible_term new_out);
};

let POINTonE1_add_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE1");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE1");
  crucible_execute_func [out_ptr, p1_ptr, p2_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE1");
  crucible_points_to out_ptr (crucible_term new_out);
};

let POINTonE1_add_alias_spec = do {
  (_, out_ptr) <- ptr_to_fresh "out" (llvm_struct "struct.POINTonE1");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE1");
  crucible_execute_func [out_ptr, out_ptr, p2_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE1");
  crucible_points_to out_ptr (crucible_term new_out);
};

let POINTonE1_add_alias_1_3_spec = do {
  (_, out_ptr) <- ptr_to_fresh "out" (llvm_struct "struct.POINTonE1");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE1");
  crucible_execute_func [out_ptr, p1_ptr, out_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE1");
  crucible_points_to out_ptr (crucible_term new_out);
};

let POINTonE2_add_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE2");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE2");
  crucible_execute_func [out_ptr, p1_ptr, p2_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE2");
  crucible_points_to out_ptr (crucible_term new_out);
};

let POINTonE2_add_alias_spec = do {
  (_, out_ptr) <- ptr_to_fresh "out" (llvm_struct "struct.POINTonE2");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE2");
  crucible_execute_func [out_ptr, out_ptr, p2_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE2");
  crucible_points_to out_ptr (crucible_term new_out);
};


let POINTonE1_add_affine_spec = do {
  p3_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE1");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE1_affine");
  crucible_execute_func [p3_ptr, p1_ptr, p2_ptr];
  new_p3 <- crucible_fresh_var "new_p3" (llvm_struct "struct.POINTonE1");
  crucible_points_to p3_ptr (crucible_term new_p3);
};

let POINTonE1_add_affine_alias_spec = do {
  (_, p3_ptr) <- ptr_to_fresh "p3" (llvm_struct "struct.POINTonE1");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE1_affine");
  crucible_execute_func [p3_ptr, p3_ptr, p2_ptr];
  new_p3 <- crucible_fresh_var "new_p3" (llvm_struct "struct.POINTonE1");
  crucible_points_to p3_ptr (crucible_term new_p3);
};

let POINTonE2_add_affine_spec = do {
  p3_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE2");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE2_affine");
  crucible_execute_func [p3_ptr, p1_ptr, p2_ptr];
  new_p3 <- crucible_fresh_var "new_p3" (llvm_struct "struct.POINTonE2");
  crucible_points_to p3_ptr (crucible_term new_p3);
};

let POINTonE2_add_affine_alias_spec = do {
  (_, p3_ptr) <- ptr_to_fresh "p3" (llvm_struct "struct.POINTonE2");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE2_affine");
  crucible_execute_func [p3_ptr, p3_ptr, p2_ptr];
  new_p3 <- crucible_fresh_var "new_p3" (llvm_struct "struct.POINTonE2");
  crucible_points_to p3_ptr (crucible_term new_p3);
};

let POINTonE1_double_spec = do {
  p3_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE1");
  crucible_execute_func [p3_ptr, p1_ptr];
  new_p3 <- crucible_fresh_var "new_p3" (llvm_struct "struct.POINTonE1");
  crucible_points_to p3_ptr (crucible_term new_p3);
};

let POINTonE1_double_alias_spec = do {
  (_, p3_ptr) <- ptr_to_fresh "p3" (llvm_struct "struct.POINTonE1");
  crucible_execute_func [p3_ptr, p3_ptr];
  new_p3 <- crucible_fresh_var "new_p3" (llvm_struct "struct.POINTonE1");
  crucible_points_to p3_ptr (crucible_term new_p3);
};

let POINTonE2_double_spec = do {
  p3_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE2");
  crucible_execute_func [p3_ptr, p1_ptr];
  new_p3 <- crucible_fresh_var "new_p3" (llvm_struct "struct.POINTonE2");
  crucible_points_to p3_ptr (crucible_term new_p3);
};

let POINTonE2_double_alias_spec = do {
  (_, p3_ptr) <- ptr_to_fresh "p3" (llvm_struct "struct.POINTonE2");
  crucible_execute_func [p3_ptr, p3_ptr];
  new_p3 <- crucible_fresh_var "new_p3" (llvm_struct "struct.POINTonE2");
  crucible_points_to p3_ptr (crucible_term new_p3);
};

let POINTonE1_is_equal_spec = do {
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE2");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE2");
  crucible_execute_func [p1_ptr, p2_ptr];
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_return (crucible_term ret);
};

let POINTonE2_is_equal_spec = do {
  (_, p1_ptr) <- ptr_to_fresh_readonly "p1" (llvm_struct "struct.POINTonE2");
  (_, p2_ptr) <- ptr_to_fresh_readonly "p2" (llvm_struct "struct.POINTonE2");
  crucible_execute_func [p1_ptr, p2_ptr];
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_return (crucible_term ret);
};



///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

let IKM_len = 129;
let info_len = 67;
// sizes fixed in keygen.c:
let salt_len = 20;
let L = 64; // sizeof(vec384) + 128/8 = 64; vec384 has 6 limbs

// for hash_to_field:
// nelems = 2 to be fixed. Rest is variable, but aug_len is 96 or 48
let aug_len = 96;
let msg_len = 200;
let dst_len= 97;
let nelems = 2;

// Now we create all the overrides

mul_mont_sparse_256_alias_ov <- crucible_llvm_unsafe_assume_spec m "mulx_mont_sparse_256" mul_mont_sparse_256_alias_spec;
mul_mont_sparse_256_ov <- crucible_llvm_unsafe_assume_spec m "mulx_mont_sparse_256" mul_mont_sparse_256_spec;
sqr_mont_sparse_256_ov <- crucible_llvm_unsafe_assume_spec m "sqrx_mont_sparse_256" sqr_mont_sparse_256_spec;
redc_mont_256_ov <- crucible_llvm_unsafe_assume_spec m "redcx_mont_256" redc_mont_256_spec;
redc_mont_256_alias_1_2_ov <- crucible_llvm_unsafe_assume_spec m "redcx_mont_256" redc_mont_256_alias_1_2_spec;
from_mont_256_ov <- crucible_llvm_unsafe_assume_spec m "fromx_mont_256" from_mont_256_spec;
add_mod_256_ov <- crucible_llvm_unsafe_assume_spec m "add_mod_256" add_mod_256_spec;
sub_mod_256_ov <- crucible_llvm_unsafe_assume_spec m "sub_mod_256" sub_mod_256_spec;
mul_by_3_mod_256_ov <- crucible_llvm_unsafe_assume_spec m "mul_by_3_mod_256" mul_by_3_mod_256_spec;
cneg_mod_256_ov <- crucible_llvm_unsafe_assume_spec m "cneg_mod_256" cneg_mod_256_spec;
lshift_mod_256_ov <- crucible_llvm_unsafe_assume_spec m "lshift_mod_256" lshift_mod_256_spec;
rshift_mod_256_ov <- crucible_llvm_unsafe_assume_spec m "rshift_mod_256" rshift_mod_256_spec;
eucl_inverse_mod_256_ov <- crucible_llvm_unsafe_assume_spec m "eucl_inverse_mod_256" eucl_inverse_mod_256_spec;
mul_mont_384_ov <- crucible_llvm_unsafe_assume_spec m "mulx_mont_384" mul_mont_384_spec;
mul_mont_384_alias_ov <- crucible_llvm_unsafe_assume_spec m "mulx_mont_384" mul_mont_384_alias_spec;
sqr_mont_384_ov <- crucible_llvm_unsafe_assume_spec m "sqrx_mont_384" sqr_mont_384_spec;
sqr_mont_384_alias_ov <- crucible_llvm_unsafe_assume_spec m "sqrx_mont_384" sqr_mont_384_alias_spec;
// TODO: unused below?
//sqr_n_mul_mont_384_ov <- crucible_llvm_unsafe_assume_spec m "sqrx_n_mul_mont_384" sqr_n_mul_mont_384_spec;
sqr_n_mul_mont_383_ov  <- crucible_llvm_unsafe_assume_spec m "sqrx_n_mul_mont_383" sqr_n_mul_mont_383_spec;
sqr_n_mul_mont_383_alias_1_2_ov  <- crucible_llvm_unsafe_assume_spec m "sqrx_n_mul_mont_383" sqr_n_mul_mont_383_alias_1_2_spec;
// TODO: unused below?
//mul_384_ov <- crucible_llvm_unsafe_assume_spec m "mulx_384" mul_384_spec;
// TODO: unused below?
//sqr_384_ov <- crucible_llvm_unsafe_assume_spec m "sqrx_384" sqr_384_spec;
redc_mont_384_ov <- crucible_llvm_unsafe_assume_spec m "redcx_mont_384" redc_mont_384_spec;
from_mont_384_ov <- crucible_llvm_unsafe_assume_spec m "fromx_mont_384" from_mont_384_spec;
sgn0_pty_mont_384_ov <- crucible_llvm_unsafe_assume_spec m "sgn0x_pty_mont_384" sgn0_pty_mont_384_spec;
sgn0_pty_mont_384x_ov <- crucible_llvm_unsafe_assume_spec m "sgn0x_pty_mont_384x" sgn0_pty_mont_384x_spec;
sgn0_pty_mod_384_ov <- crucible_llvm_unsafe_assume_spec m "sgn0_pty_mod_384" sgn0_pty_mod_384_spec;
sgn0_pty_mod_384x_ov <- crucible_llvm_unsafe_assume_spec m "sgn0_pty_mod_384x" sgn0_pty_mod_384x_spec;
add_mod_384_ov <- crucible_llvm_unsafe_assume_spec m "add_mod_384" add_mod_384_spec;
add_mod_384_alias_1_2_3_ov <- crucible_llvm_unsafe_assume_spec m "add_mod_384" add_mod_384_alias_1_2_3_spec;
add_mod_384_alias_1_2_ov <- crucible_llvm_unsafe_assume_spec m "add_mod_384" add_mod_384_alias_1_2_spec;
sub_mod_384_ov <- crucible_llvm_unsafe_assume_spec m "sub_mod_384" sub_mod_384_spec;
sub_mod_384_alias_ov <- crucible_llvm_unsafe_assume_spec m "sub_mod_384" sub_mod_384_alias_spec;
mul_by_8_mod_384_ov <- crucible_llvm_unsafe_assume_spec m "mul_by_8_mod_384" mul_by_8_mod_384_spec;
mul_by_8_mod_384_alias_ov <- crucible_llvm_unsafe_assume_spec m "mul_by_8_mod_384" mul_by_8_mod_384_alias_spec;
mul_by_3_mod_384_ov <- crucible_llvm_unsafe_assume_spec m "mul_by_3_mod_384" mul_by_3_mod_384_spec;
mul_by_3_mod_384_alias_ov <- crucible_llvm_unsafe_assume_spec m "mul_by_3_mod_384" mul_by_3_mod_384_alias_spec;
cneg_mod_384_ov <- crucible_llvm_unsafe_assume_spec m "cneg_mod_384" cneg_mod_384_spec;
cneg_mod_384_alias_1_2_ov <- crucible_llvm_unsafe_assume_spec m "cneg_mod_384" cneg_mod_384_alias_1_2_spec;
lshift_mod_384_ov <- crucible_llvm_unsafe_assume_spec m "lshift_mod_384" lshift_mod_384_spec;
eucl_inverse_mod_384_ov <- crucible_llvm_unsafe_assume_spec m "eucl_inverse_mod_384" eucl_inverse_mod_384_spec;
mul_mont_384x_ov <- crucible_llvm_unsafe_assume_spec m "mulx_mont_384x" mul_mont_384x_spec;
mul_mont_384x_alias_ov <- crucible_llvm_unsafe_assume_spec m "mulx_mont_384x" mul_mont_384x_alias_spec;
sqr_mont_384x_ov <- crucible_llvm_unsafe_assume_spec m "sqrx_mont_384x" sqr_mont_384x_spec;
sqr_mont_384x_alias_ov <- crucible_llvm_unsafe_assume_spec m "sqrx_mont_384x" sqr_mont_384x_alias_spec;
sqr_mont_382x_ov <- crucible_llvm_unsafe_assume_spec m "sqrx_mont_382x" sqr_mont_382x_spec;
sqr_mont_382x_alias_ov <- crucible_llvm_unsafe_assume_spec m "sqrx_mont_382x" sqr_mont_382x_alias_spec;
// TODO: unused below?
//sqr_n_mul_mont_384x_ov <- crucible_llvm_unsafe_assume_spec m "sqr_n_mul_mont_384x" sqr_n_mul_mont_384x_spec;
mul_382x_ov <- crucible_llvm_unsafe_assume_spec m "mulx_382x" mul_382x_spec;
sqr_382x_ov <- crucible_llvm_unsafe_assume_spec m "sqrx_382x" sqr_382x_spec;
add_mod_384x_ov  <- crucible_llvm_unsafe_assume_spec m "add_mod_384x" add_mod_384x_spec;
add_mod_384x_alias_1_2_3_ov <- crucible_llvm_unsafe_assume_spec m "add_mod_384x" add_mod_384x_alias_1_2_3_spec;
add_mod_384x_alias_1_2_ov <- crucible_llvm_unsafe_assume_spec m "add_mod_384x" add_mod_384x_alias_1_2_spec;
sub_mod_384x_ov <- crucible_llvm_unsafe_assume_spec m "sub_mod_384x" sub_mod_384x_spec;
sub_mod_384x_alias_ov <- crucible_llvm_unsafe_assume_spec m "sub_mod_384x" sub_mod_384x_alias_spec;
mul_by_8_mod_384x_ov <- crucible_llvm_unsafe_assume_spec m "mul_by_8_mod_384x" mul_by_8_mod_384x_spec;
mul_by_8_mod_384x_alias_ov <- crucible_llvm_unsafe_assume_spec m "mul_by_8_mod_384x" mul_by_8_mod_384x_alias_spec;
mul_by_3_mod_384x_ov <- crucible_llvm_unsafe_assume_spec m "mul_by_3_mod_384x" mul_by_3_mod_384x_spec;
mul_by_3_mod_384x_alias_ov <- crucible_llvm_unsafe_assume_spec m "mul_by_3_mod_384x" mul_by_3_mod_384x_alias_spec;
mul_by_1_plus_i_mod_384x_ov <- crucible_llvm_unsafe_assume_spec m "mul_by_1_plus_i_mod_384x" mul_by_1_plus_i_mod_384x_spec;
add_mod_384x384_ov <- crucible_llvm_unsafe_assume_spec m "add_mod_384x384" add_mod_384x384_spec;
sub_mod_384x384_ov <- crucible_llvm_unsafe_assume_spec m "sub_mod_384x384" sub_mod_384x384_spec;

let mk_vec_select_ov bytes = crucible_llvm_unsafe_assume_spec m (str_concat "vec_select_" (show bytes)) (vec_select_spec bytes);
let mk_vec_select_alias_1_2_ov bytes = crucible_llvm_unsafe_assume_spec m (str_concat "vec_select_" (show bytes)) (vec_select_alias_1_2_spec bytes);
let mk_vec_select_alias_1_3_ov bytes = crucible_llvm_unsafe_assume_spec m (str_concat "vec_select_" (show bytes)) (vec_select_alias_1_3_spec bytes);
let vec_select_sizes = [48, 96, 144, 192, 288];
vec_select_ovs <- do {
  ovs <- (for vec_select_sizes mk_vec_select_ov);
  ovs_1_2  <- (for vec_select_sizes mk_vec_select_alias_1_2_ov);
  ovs_1_3  <- (for vec_select_sizes mk_vec_select_alias_1_3_ov);
  return (foldr concat [ovs, ovs_1_2] ovs_1_3);
};

blst_sha256_emit_ov <- crucible_llvm_unsafe_assume_spec m "blst_sha256_emit" blst_sha256_emit_spec;
blst_sha256_hcopy_ov <- crucible_llvm_unsafe_assume_spec m "blst_sha256_hcopy" blst_sha256_hcopy_spec;

// sha256_block_data_order:
let make_blst_sha256_block_data_order_ov len = crucible_llvm_unsafe_assume_spec m "blst_sha256_block_data_order" (blst_sha256_block_data_order_spec len);

let make_keygen__blst_sha256_block_data_order_ovs salt_len IKM_len info_len L = do {
  ss <- (blst_keygen_block_data_order_sizes salt_len IKM_len info_len L);
  ovs <- (for ss make_blst_sha256_block_data_order_ov);
  return ovs;
};
keygen__blst_sha256_block_data_order_ovs <- make_keygen__blst_sha256_block_data_order_ovs salt_len IKM_len info_len L;

// sha256_bcopy:
// TODO: there is an error with sha256_bcopy, thus for now it's replaced by a C stub.
let make_blst_sha256_bcopy_ov len = crucible_llvm_unsafe_assume_spec m "blst_sha256_bcopy" (blst_sha256_bcopy_spec len);
let make_keygen__blst_sha256_bcopy_ovs salt_len IKM_len info_len L = do {
  ss <- (blst_keygen_bcopy_sizes salt_len IKM_len info_len L);
  ovs <- (for ss make_blst_sha256_bcopy_ov);
  return ovs;
};
keygen__blst_sha256_bcopy_ovs <- make_keygen__blst_sha256_bcopy_ovs salt_len IKM_len info_len L;
// The brute-force approach (too slow):
//keygen__blst_sha256_bcopy_ovs <- do {
  //let ss = from_to 1 200;
  //ovs <- (for ss make_blst_sha256_bcopy_ov);
  //return ovs;
//};


let make_hash_to_field__blst_sha256_block_data_order_ovs len_in_bytes aug_len msg_len dst_len = do {
  ss <- (blst_expand_message_xmd__block_data_order_sizes (eval_size {| nelems*L |}) aug_len msg_len dst_len);
  ovs <- (for ss make_blst_sha256_block_data_order_ov);
  return ovs;
};
hash_to_field__blst_sha256_block_data_order_ovs <- make_hash_to_field__blst_sha256_block_data_order_ovs nelems aug_len msg_len dst_len;

let assumed_overrides = concat vec_select_ovs [redc_mont_256_ov, redc_mont_256_alias_1_2_ov, mul_mont_sparse_256_alias_ov, mul_mont_sparse_256_ov, sqr_mont_sparse_256_ov, from_mont_256_ov, add_mod_256_ov, sub_mod_256_ov, mul_by_3_mod_256_ov, cneg_mod_256_ov, lshift_mod_256_ov, rshift_mod_256_ov, eucl_inverse_mod_256_ov, mul_mont_384_ov, mul_mont_384_alias_ov, sqr_mont_384_ov, sqr_mont_384_alias_ov, sqr_n_mul_mont_383_alias_1_2_ov, sqr_n_mul_mont_383_ov, redc_mont_384_ov, from_mont_384_ov, sgn0_pty_mont_384_ov, sgn0_pty_mont_384x_ov, sgn0_pty_mod_384_ov, sgn0_pty_mod_384x_ov, add_mod_384_ov, add_mod_384_alias_1_2_ov, add_mod_384_alias_1_2_3_ov, sub_mod_384_ov, sub_mod_384_alias_ov, mul_by_8_mod_384_ov, mul_by_8_mod_384_alias_ov, mul_by_3_mod_384_ov, mul_by_3_mod_384_alias_ov, cneg_mod_384_ov, cneg_mod_384_alias_1_2_ov, lshift_mod_384_ov, eucl_inverse_mod_384_ov, mul_mont_384x_ov, mul_mont_384x_alias_ov, sqr_mont_384x_alias_ov, sqr_mont_384x_ov, sqr_mont_384x_alias_ov, sqr_mont_382x_alias_ov, sqr_mont_382x_ov, mul_382x_ov, sqr_382x_ov, add_mod_384x_ov, add_mod_384x_alias_1_2_ov, add_mod_384x_alias_1_2_3_ov, sub_mod_384x_ov, sub_mod_384x_alias_ov, mul_by_8_mod_384x_ov, mul_by_8_mod_384x_alias_ov, mul_by_3_mod_384x_ov, mul_by_3_mod_384x_alias_ov, mul_by_1_plus_i_mod_384x_ov, add_mod_384x384_ov, blst_sha256_emit_ov, blst_sha256_hcopy_ov, blst_sha256_emit_ov, blst_sha256_hcopy_ov];

// finally we verify functions:

// ec_ops.h:

POINTonE1_384_dadd_ov <- crucible_llvm_verify m "POINTonE1_dadd" assumed_overrides false POINTonE1_384_dadd_spec abc;
POINTonE2_384x_dadd_ov <- crucible_llvm_verify m "POINTonE2_dadd" assumed_overrides false POINTonE2_384x_dadd_spec abc;
POINTonE1_384_dadd_affine_ov <- crucible_llvm_verify m "POINTonE1_dadd_affine" assumed_overrides false POINTonE1_384_dadd_affine_spec abc;
POINTonE2_384x_dadd_affine_ov <- crucible_llvm_verify m "POINTonE2_dadd_affine" assumed_overrides false POINTonE2_384x_dadd_affine_spec abc;
POINTonE1_add_ov <- crucible_llvm_verify m "POINTonE1_add" assumed_overrides false POINTonE1_add_spec abc;
POINTonE1_add_alias_ov <- crucible_llvm_verify m "POINTonE1_add" assumed_overrides false POINTonE1_add_alias_spec abc;
POINTonE1_add_alias_1_3_ov <- crucible_llvm_verify m "POINTonE1_add" assumed_overrides false POINTonE1_add_alias_1_3_spec abc;
POINTonE2_add_ov <- crucible_llvm_verify m "POINTonE2_add" assumed_overrides false POINTonE2_add_spec abc;
POINTonE2_add_alias_ov <- crucible_llvm_verify m "POINTonE2_add" assumed_overrides false POINTonE2_add_alias_spec abc;
POINTonE1_add_affine_ov <- crucible_llvm_verify m "POINTonE1_add_affine" assumed_overrides false POINTonE1_add_affine_spec abc;
POINTonE1_add_affine_alias_ov <- crucible_llvm_verify m "POINTonE1_add_affine" assumed_overrides false POINTonE1_add_affine_alias_spec abc;
POINTonE2_add_affine_ov <- crucible_llvm_verify m "POINTonE2_add_affine" assumed_overrides false POINTonE2_add_affine_spec abc;
POINTonE2_add_affine_alias_ov <- crucible_llvm_verify m "POINTonE2_add_affine" assumed_overrides false POINTonE2_add_affine_alias_spec abc;
POINTonE1_double_ov <- crucible_llvm_verify m "POINTonE1_double" assumed_overrides false POINTonE1_double_spec abc;
POINTonE1_double_alias_ov <- crucible_llvm_verify m "POINTonE1_double" assumed_overrides false POINTonE1_double_alias_spec abc;
POINTonE2_double_ov <- crucible_llvm_verify m "POINTonE2_double" assumed_overrides false POINTonE2_double_spec abc;
POINTonE2_double_alias_ov <- crucible_llvm_verify m "POINTonE2_double" assumed_overrides false POINTonE2_double_alias_spec abc;
POINTonE1_is_equal_ov <- crucible_llvm_verify m "POINTonE1_is_equal" assumed_overrides false POINTonE1_is_equal_spec abc;
POINTonE2_is_equal_ov <- crucible_llvm_verify m "POINTonE2_is_equal" assumed_overrides false POINTonE2_is_equal_spec abc;

let ec_ops_overrides = [POINTonE1_is_equal_ov,POINTonE2_double_alias_ov,POINTonE2_double_ov,POINTonE1_double_alias_ov,POINTonE1_double_ov,POINTonE2_add_affine_alias_ov,POINTonE2_add_affine_ov,POINTonE1_add_affine_alias_ov,POINTonE1_add_affine_ov,POINTonE2_add_alias_ov,POINTonE2_add_ov,POINTonE1_add_ov,POINTonE1_add_alias_1_3_ov,POINTonE1_add_alias_ov,POINTonE2_384x_dadd_affine_ov,POINTonE1_384_dadd_affine_ov,POINTonE2_384x_dadd_ov,POINTonE1_384_dadd_ov];

blst_keygen_ov <- crucible_llvm_verify m "blst_keygen" (concat keygen__blst_sha256_block_data_order_ovs assumed_overrides) false (blst_keygen_spec IKM_len info_len) abc;
hash_to_field_ov <- crucible_llvm_verify m "hash_to_field" (concat hash_to_field__blst_sha256_block_data_order_ovs assumed_overrides) false (hash_to_field_spec nelems aug_len msg_len dst_len) abc;
blst_sk_to_pk_in_g1_ov <- crucible_llvm_verify m "blst_sk_to_pk_in_g1" (concat ec_ops_overrides assumed_overrides) false blst_sk_to_pk_in_g1_spec abc;
blst_sk_to_pk_in_g2_ov <-crucible_llvm_verify m "blst_sk_to_pk_in_g2" (concat ec_ops_overrides assumed_overrides) false blst_sk_to_pk_in_g2_spec abc;
blst_p1_affine_in_g1_ov <- crucible_llvm_verify m "blst_p1_affine_in_g1" (concat ec_ops_overrides assumed_overrides) false blst_p1_affine_in_g1_spec abc;
blst_p2_affine_in_g2_ov <- crucible_llvm_verify m "blst_p2_affine_in_g2" (concat ec_ops_overrides assumed_overrides) false blst_p2_affine_in_g2_spec abc;
blst_p1_deserialize_ov <- crucible_llvm_verify m "blst_p1_deserialize" (concat ec_ops_overrides assumed_overrides) false blst_p1_deserialize_spec abc;
blst_p2_deserialize_ov <- crucible_llvm_verify m "blst_p2_deserialize" (concat ec_ops_overrides assumed_overrides) false blst_p2_deserialize_spec abc;
