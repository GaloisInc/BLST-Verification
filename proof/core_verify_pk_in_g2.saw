/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/


// Specifications

let msg_len = 32;
let dst_len = 8;
let aug_len = 8;

let {{
  blst_core_verify_pk_in_g2_error_precond : POINTonE2_affine_t -> POINTonE1_affine_t -> Bool
  blst_core_verify_pk_in_g2_error_precond pk sig =
       is_point_O E' (POINTonE2_affine_abs pk) \/ ( ~(is_point_O E (POINTonE1_affine_abs sig)) /\ ~is_in_g1_impl (POINTonE1_affine_abs sig) )
}};

// case in which no argument is null and the error condition is false
let blst_core_verify_pk_in_g2_non_null_spec msg_len dst_len aug_len = do {
  (pk, pk_ptr) <- ptr_to_fresh_readonly "pk" (llvm_struct "struct.POINTonE2_affine");
  (sig, signature_ptr) <- ptr_to_fresh_readonly "signature" (llvm_struct "struct.POINTonE1_affine");
  llvm_precond {{ POINTonE2_affine_invariant pk /\ POINTonE1_affine_invariant sig /\ is_point_affine E (POINTonE1_affine_abs sig) /\ ~blst_core_verify_pk_in_g2_error_precond pk sig }};
  hash_or_encode <- crucible_fresh_var "hash_or_encode" (llvm_int 32);
  llvm_precond {{ hash_or_encode != zero }};
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (dst, dst_ptr) <- ptr_to_fresh_readonly "dst" (llvm_array dst_len (llvm_int 8));
  (aug, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  crucible_execute_func [pk_ptr, signature_ptr, crucible_term hash_or_encode, msg_ptr, crucible_term {{ `msg_len : [64] }}, dst_ptr, crucible_term {{ `dst_len : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}];
  crucible_return (crucible_term {{ if core_verify_pk_in_g2_impl (POINTonE2_affine_abs pk) (POINTonE1_affine_abs sig) msg dst aug then (`BLST_SUCCESS:[32]) else `BLST_VERIFY_FAIL }});
};

// error case
let blst_core_verify_pk_in_g2_error_spec msg_len dst_len aug_len = do {
  (pk, pk_ptr) <- ptr_to_fresh_readonly "pk" (llvm_struct "struct.POINTonE2_affine");
  (sig, signature_ptr) <- ptr_to_fresh_readonly "signature" (llvm_struct "struct.POINTonE1_affine");
  llvm_precond {{ POINTonE2_affine_invariant pk /\ POINTonE1_affine_invariant sig /\ is_point_affine E (POINTonE1_affine_abs sig) /\ blst_core_verify_pk_in_g2_error_precond pk sig }};
  hash_or_encode <- crucible_fresh_var "hash_or_encode" (llvm_int 32);
  llvm_precond {{ hash_or_encode != zero }};
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (dst, dst_ptr) <- ptr_to_fresh_readonly "dst" (llvm_array dst_len (llvm_int 8));
  (aug, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  crucible_execute_func [pk_ptr, signature_ptr, crucible_term hash_or_encode, msg_ptr, crucible_term {{ `msg_len : [64] }}, dst_ptr, crucible_term {{ `dst_len : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}];
  ret <- llvm_fresh_var "blst_core_verify_pk_in_g2_ret" (llvm_int 32);
  llvm_return (llvm_term ret);
  llvm_postcond {{ ret != `BLST_SUCCESS }};
};

// null cases

// sig is null
let blst_core_verify_pk_in_g2_null_sig_spec msg_len dst_len aug_len = do {
  (pk, pk_ptr) <- ptr_to_fresh_readonly "pk" (llvm_struct "struct.POINTonE2_affine");
  let signature_ptr = llvm_null;
  llvm_precond {{ POINTonE2_affine_invariant pk }};
  hash_or_encode <- crucible_fresh_var "hash_or_encode" (llvm_int 32);
  llvm_precond {{ hash_or_encode != zero }};
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (dst, dst_ptr) <- ptr_to_fresh_readonly "dst" (llvm_array dst_len (llvm_int 8));
  (aug, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  crucible_execute_func [pk_ptr, signature_ptr, crucible_term hash_or_encode, msg_ptr, crucible_term {{ `msg_len : [64] }}, dst_ptr, crucible_term {{ `dst_len : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}];
  crucible_return (crucible_term {{ if is_point_O E' (POINTonE2_affine_abs pk) then `BLST_PK_IS_INFINITY else if core_verify_pk_in_g2_impl (POINTonE2_affine_abs pk) (POINTonE1_affine_abs zero) msg dst aug then (`BLST_SUCCESS:[32]) else `BLST_VERIFY_FAIL }});
};

// overrides:

Hash_to_G1_ov <- prove_Hash_to_G1_impl_ov msg_len dst_len aug_len;

let overrides = foldr concat [
  mul_fp12_ovs ] [ // fp12.saw
  Hash_to_G1_ov
, POINTonE1_from_Jacobian_alias_ov // compress-p1.saw
, POINTonE2_from_Jacobian_ov // compress-p2.saw
, POINTonE1_from_Jacobian_ov // compress-p1.saw
, miller_loop_n_1_ov // pairing.saw
, conjugate_fp12_ov // fp12.saw
, final_exp_alias_ov
, vec_copy_2fp_ov
, vec_copy_POINTonE2_affine_ov
, vec_copy_POINTonE1_affine_ov
, vec_copy_fp12_ov
, vec_select_Fp_ov
, vec_is_zero_10fp_ov
, vec_is_zero_2fp2_ov
, vec_is_zero_2fp_is_equal_ov
, vec_is_zero_fp2_ov
, vec_is_equal_fp2_ov
, POINTonE1_in_G1_ov // subgroup_check_g1.saw
];

// Proofs

// TODO:
core_verify_pk_in_g2_impl_thm <- admit_cryptol {{ \pk sig msg dst aug -> core_verify_pk_in_g2_impl pk sig msg dst aug == core_verify_pk_in_g2 pk sig msg dst aug }};

normalize_hash_to_curve_impl <- do {
  l1 <- simp_then_admit {{ \(msg:[msg_len][8]) (DST:[dst_len][8]) (aug:[aug_len][8]) -> normalize_point Fp (hash_to_curve_opt_impl (aug#msg, DST)) == hash_to_curve_opt_impl (aug#msg, DST) }};
  l2 <- simp_then_admit {{ \(msg:[msg_len][8]) (DST:[dst_len][8]) (aug:[aug_len][8]) -> Fp.normalize (hash_to_curve_opt_impl (aug#msg, DST)).2 == (hash_to_curve_opt_impl (aug#msg, DST)).2 }};
  return [l1,l2];
};

miller_loop_zero_thm <- admit_cryptol {{  \x -> fp12_conjugate (miller_loop_opt_checked x BP') == if (is_point_O E x) then Fp_12.field_unit else apply miller_loop_opt_checked x BP' }};

fp_unit_rep <- eval_term {{ fp_rep Fp.field_unit }};
let select_term = rewrite (add_cryptol_defs ["ecEq"] (cryptol_ss ())) {{ \(x:POINTonE1_affine_t) -> select x.0 fp_unit_rep (~((if ((Fp.is_equal (fp_abs x.0, Fp.field_zero)) /\ (Fp.is_equal (fp_abs x.1, Fp.field_zero))) then (1:[64]) else zero) == zero)) }};
affinify_projectify_is_id <- admit_cryptol (rewrite (cryptol_ss ()) {{ \x -> affinify E (POINTonE1_abs (x.0,x.1,select_term x)) == if POINTonE1_affine_invariant x then (POINTonE1_affine_abs x) else apply affinify E (POINTonE1_abs (x.0,x.1,select_term x)) }});

core_verify_pk_in_g2_POINTonE1_from_Jacobian_sig_preconds <- do {
  on_curve <- admit_cryptol (rewrite (cryptol_ss ()) {{ \sig  -> is_point_projective E (POINTonE1_abs (sig.0,sig.1,select_term sig)) == if (is_point_affine E (POINTonE1_affine_abs sig)) then True else apply is_point_projective E (POINTonE1_abs (sig.0,sig.1,select_term sig)) }});
  not_zero <- admit_cryptol (rewrite (cryptol_ss ()) {{ \sig-> Fp.is_equal (fp_abs (select_term sig), Fp.field_zero) == (is_point_O E (POINTonE1_affine_abs sig))  }});
  return [on_curve,not_zero];
};

core_verify_pk_in_g2_POINTonE1_from_Jacobian_hash_preconds <- do {
  on_curve <- admit_cryptol (rewrite (cryptol_ss ()) {{ \(msg:[msg_len][8]) (DST:[dst_len][8]) (aug:[aug_len][8]) -> is_point_projective E (hash_to_curve_opt_impl (aug#msg, DST)) == True }});
  not_zero <- admit_cryptol (rewrite (cryptol_ss ()) {{ \(msg:[msg_len][8]) (DST:[dst_len][8]) (aug:[aug_len][8]) -> Fp.is_equal ((hash_to_curve_opt_impl (aug#msg, DST)).2, Fp.field_zero) == False }}); // NOTE: this is unsound, but it's morally okay as it's deemed it will never happen
  return [on_curve,not_zero];
};

let core_verify_pk_in_g2_unints = ["BP'","is_in_g1_impl","hash_to_curve_opt_impl","miller_loop_opt_checked","final_exponentiation_impl","fp12_conjugate","affinify_E","affinify_E'", "projectify_E'", "projectify_E","is_point_projective_E","is_point_projective_E'","is_point_affine_E","is_point_affine_E'","Fp_12"]; // the stuff we want to leave unfolded

rewrite_unit <- custom_prove_cryptol (rewrite (cryptol_ss ()) {{ fp_abs fp_unit_rep == Fp.field_unit }}) w4;
let BP'_rep = run (eval_term {{ POINTonE2_affine_rep BP' }});
let BP'_rewrite = run (custom_prove_cryptol (rewrite (cryptol_ss ()) {{ POINTonE2_affine_abs BP'_rep == BP' }}) w4);

// core_verify_pk_in_g2_POINTonE1_from_Jacobian_preconds <- do {
  // on_curve <- admit_cryptol (rewrite (cryptol_ss ()) {{ \(msg:[msg_len][8]) (DST:[dst_len][8]) (aug:[aug_len][8]) -> is_point_projective E (hash_to_curve_opt_impl (aug#msg, DST)) == True }});
  // not_zero <- admit_cryptol (rewrite (cryptol_ss ()) {{ \(msg:[msg_len][8]) (DST:[dst_len][8]) (aug:[aug_len][8]) -> Fp.is_equal ((hash_to_curve_opt_impl (aug#msg, DST)).2, Fp.field_zero) == False }}); // NOTE: this is unsound, but it's morally okay as it's deemed it will never happen
  // return [on_curve,not_zero];
// };

let side_conditions_script = do {
  rw_with (concat POINTonE1_thms POINTonE2_thms);
  unfolding ["POINTonE2_rep"];
  simplify fp12_simpset;
  simplify fp2_simpset;
  simplify fp_simpset;
  // get rid of normalize terms produced by the rewrites:
  rw_with (concat normalize_hash_to_curve_impl [normalize_miller_loop_opt_checked_thm]);
  // take care of the round-trip that sig takes from affine represetation to jacobian and back to affine:
  rw_with [affinify_projectify_is_id];
  // establish the preconditions of POINTonE2_from_Jacobian:
  rw_with (concat core_verify_pk_in_g2_POINTonE1_from_Jacobian_hash_preconds core_verify_pk_in_g2_POINTonE1_from_Jacobian_sig_preconds);
  unfolding ["apply"];
  rw_with remove_ho_rules;
  goal_eval_unint (concat core_verify_pk_in_g2_unints ["fp_rep","fp_abs","fp_invariant"]);
  simplify fp_simpset;
  w4_unint_z3 (concat core_verify_pk_in_g2_unints ["fp_rep","fp_abs"]);
}

let post_condition_script = do {
    // get rid of `abs rep` terms
    rw_with (concat POINTonE1_thms POINTonE2_thms);
    unfolding ["POINTonE2_rep"];
    simplify fp12_simpset;
    simplify fp2_simpset;
    simplify fp_simpset;
    // get rid of normalize terms produced by the rewrites:
    rw_with (concat normalize_hash_to_curve_impl [normalize_miller_loop_opt_checked_thm]);
    // take care of the round-trip that sig takes from affine represetation to jacobian and back to affine:
    rw_with [affinify_projectify_is_id];
    // establish the preconditions of POINTonE2_from_Jacobian:
    rw_with (concat core_verify_pk_in_g2_POINTonE1_from_Jacobian_hash_preconds core_verify_pk_in_g2_POINTonE1_from_Jacobian_sig_preconds);
    // rewrite abstracted constants (we're leaving fp_rep and fp_abs uninterpreted, so we need to rewrite the concrete constants):
    simplify (addsimps [BP'_rewrite,rewrite_fp12_unit,rewrite_fp2_unit,rewrite_unit] empty_ss);
    // we rewrite the spec term:
    unfolding ["core_verify_pk_in_g2_impl"];
    rw_with [miller_loop_zero_thm];
    unfolding ["apply"];
    rw_with [rewrite_is_equal];
    rw_with remove_ho_rules;
    goal_eval_unint (concat core_verify_pk_in_g2_unints ["fp_rep","fp_abs","POINTonE2_invariant","POINTonE1_invariant","POINTonE2_affine_invariant","POINTonE1_affine_invariant","fp2_invariant","fp_invariant"]);
    rw_with restitching_rules;
    simplify fp_simpset; // get rid of remaining `abs rep` terms
    rw_with normalize_final_exp_thms; // get rid of `normalize` terms introduced by fp_simpset
    w4_unint_z3 (concat core_verify_pk_in_g1_unints ["fp_rep","fp_abs","POINTonE1_invariant","POINTonE2_invariant","POINTonE2_affine_invariant","POINTonE1_affine_invariant","fp2_invariant","fp_invariant"]);
}

let verify_blst_core_verify_pk_in_g2_non_null msg_len dst_len aug_len = custom_verify_path_sat
  "blst_core_verify_pk_in_g2"
  overrides
  (blst_core_verify_pk_in_g2_non_null_spec msg_len dst_len aug_len)
  (goal_num_ite 17
    post_condition_script
    side_conditions_script);

verify_blst_core_verify_pk_in_g2_non_null msg_len dst_len aug_len;

// case in which no argument is null and we reach the final check
blst_core_verify_pk_in_g2_non_null_ov <- custom_verify
  "blst_core_verify_pk_in_g2"
  overrides
  (blst_core_verify_pk_in_g2_non_null_spec msg_len dst_len aug_len)
  do {
    let projectify_on_curve = run (admit_cryptol {{ \sig  -> is_point_projective E (projectify E (POINTonE1_affine_abs sig)) == if (sig != zero /\ is_point_affine E (POINTonE1_affine_abs sig)) then True else apply is_point_projective E (projectify E (POINTonE1_affine_abs sig)) }});
    simplify (addsimps (concat POINTonE2_thms POINTonE1_thms) empty_ss);
    unfolding ["POINTonE1_rep"];
    simplify fp12_simpset;
    simplify fp2_simpset;
    simplify fp_simpset;
    simplify (addsimps core_verify_pk_in_g2_POINTonE1_from_Jacobian_preconds empty_ss);
    unfolding ["select"];
    hoist_ifs_in_goal; // this is slow but works and avoids using the ugly-looking rules in hoist_ifs_rules
    // simplify (addsimps hoist_ifs_rules empty_ss);
    simplify (addsimps [rewrite_unit,from_affine_nz_rewrite,projectify_on_curve] empty_ss);
    simplify (addsimps [rewrite_fp12_unit,BP'_rewrite,affinify_projectify_is_id] empty_ss);
    unfolding ["core_verify_pk_in_g2_impl"];
    simplify (addsimp miller_loop_zero_thm empty_ss);
    simplify (addsimp rewrite_is_equal empty_ss);
    unfolding ["apply"];
    simplify (addsimps remove_ho_rules empty_ss);
    goal_eval_unint (concat core_verify_pk_in_g2_unints ["fp_rep","fp_abs"]);
    simplify (addsimps restitching_rules empty_ss);
    simplify fp_simpset; // get rid of remaining `abs rep` terms
    (w4_unint_z3 core_verify_pk_in_g2_unints);
  };

let do_prove = true;

blst_core_verify_pk_in_g2_error_ov <- custom_verify
  "blst_core_verify_pk_in_g2"
  overrides
  (blst_core_verify_pk_in_g2_error_spec msg_len dst_len aug_len)
  do {
    unfolding ["blst_core_verify_pk_in_g2_error_precond"];
    // hoist_ifs_in_goal;
    simplify (addsimps (concat POINTonE1_thms POINTonE2_thms) empty_ss);
    unfolding ["POINTonE1_rep"];
    simplify fp12_simpset;
    simplify fp2_simpset;
    simplify fp_simpset;
    simplify (addsimps remove_ho_rules empty_ss);
    print_readably;
    goal_num_ite 17 // post-condition
      do {
        // here there should be only the zero tests and the subgroup tests that matter, so we can leave Fp uninterpreted (as long as the is_zero overrides is Fp operations)
        (unint_z3 (concat ["Fp","fp12_rep","POINTonE2_invariant","POINTonE1_invariant","fp_invariant","fp2_invariant"] core_verify_pk_in_g2_unints)); // w4_unint_z3 produces a problem on which Z3 does not return
      }
      (w4_unint_z3 core_verify_pk_in_g2_unints);
  };

// blst_core_verify_pk_in_g2_null_pk_ov <- custom_verify
  // "blst_core_verify_pk_in_g2"
  // overrides
  // (blst_core_verify_pk_in_g2_null_pk_spec msg_len dst_len aug_len)
    // do {
      // assume_unsat;
      // // // TODO: no idea why this fails on the first goal (matching vec_is_zero)
      // // unfolding ["blst_core_verify_pk_in_g2_error_precond"];
      // // // get rid of `abs rep` terms
      // // simplify (addsimps (concat POINTonE2_thms POINTonE1_thms) empty_ss);
      // // unfolding ["POINTonE1_rep"];
      // // simplify fp2_simpset;
      // // simplify fp_simpset;
      // // simplify fp12_simpset;
      // // // all remaining simulation side-conditions:
      // // print_readably;
      // // simplify (addsimps remove_ho_rules empty_ss);
      // // w4_unint_z3 core_verify_pk_in_g2_unints;
    // };

blst_core_verify_pk_in_g2_null_sig_ov <- custom_verify
  "blst_core_verify_pk_in_g2"
  overrides
  (blst_core_verify_pk_in_g2_null_sig_spec msg_len dst_len aug_len)
  do {
    let projectify_on_curve = run (admit_cryptol {{ \sig  -> is_point_projective E (projectify E (POINTonE1_affine_abs sig)) == if (sig != zero /\ is_point_affine E (POINTonE1_affine_abs sig)) then True else apply is_point_projective E (projectify E (POINTonE1_affine_abs sig)) }});
    simplify (addsimps (concat POINTonE2_thms POINTonE1_thms) empty_ss);
    unfolding ["POINTonE1_rep"];
    simplify fp12_simpset;
    simplify fp2_simpset;
    simplify fp_simpset;
    simplify (addsimps core_verify_pk_in_g2_POINTonE1_from_Jacobian_preconds empty_ss);
    unfolding ["select"];
    hoist_ifs_in_goal; // this is slow but works and avoids using the ugly-looking rules in hoist_ifs_rules
    // simplify (addsimps hoist_ifs_rules empty_ss);
    simplify (addsimps [rewrite_unit,from_affine_nz_rewrite,projectify_on_curve] empty_ss);
    simplify (addsimps [rewrite_fp12_unit,BP'_rewrite,affinify_projectify_is_id] empty_ss);
    unfolding ["core_verify_pk_in_g2_impl"];
    simplify (addsimp miller_loop_zero_thm empty_ss);
    simplify (addsimp rewrite_is_equal empty_ss);
    unfolding ["apply"];
    simplify (addsimps remove_ho_rules empty_ss);
    goal_eval_unint (concat core_verify_pk_in_g2_unints ["fp_rep","fp_abs"]);
    simplify (addsimps restitching_rules empty_ss);
    simplify fp_simpset; // get rid of remaining `abs rep` terms
    (w4_unint_z3 core_verify_pk_in_g2_unints);
  };
