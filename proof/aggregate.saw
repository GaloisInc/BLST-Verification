/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

let blst_pairing_init_spec DST_len = do {
  ctx_ptr <- crucible_alloc (llvm_struct "struct.PAIRING");
  hash_or_encode <- crucible_fresh_var "hash_or_encode" (llvm_int 32);
  DST_ptr <- crucible_fresh_pointer (llvm_array DST_len (llvm_int 8));
  crucible_execute_func [ctx_ptr, crucible_term hash_or_encode, DST_ptr, crucible_term {{`DST_len:[64]}}];
  ctx_ctrl <- crucible_fresh_var "new_pairing_init_ctx_ctrl" (llvm_int 32);
  crucible_points_to (crucible_field ctx_ptr "ctrl") (crucible_term ctx_ctrl);
  crucible_points_to (crucible_field ctx_ptr "nelems") (crucible_term {{0:[32]}});
  crucible_points_to (crucible_field ctx_ptr "DST") DST_ptr;
  crucible_points_to (crucible_field ctx_ptr "DST_len") (crucible_term {{`DST_len:[64]}});
};

// the enum for aggregate-operations errors
let AGGR_UNDEFINED = {{ zero:[32] }};
let AGGR_MIN_SIG = {{ 1:[32] }};
let AGGR_MIN_PK = {{ 2:[32] }};
let AGGR_SIGN_SET = {{ 16:[32] }};
let AGGR_GT_SET = {{ 32:[32] }};
let AGGR_HASH_OR_ENCODE = {{ 64:[32] }};
let MIN_SIG_OR_PK = {{ AGGR_MIN_SIG || AGGR_MIN_PK }};

// BLST_ERROR enum:
let BLST_SUCCESS = 0;
let BLST_AGGR_TYPE_MISMATCH = 4;
let BLST_PK_IS_INFINITY = 6;
let BLST_POINT_NOT_IN_GROUP = 3;

let N_MAX = 8; // NOTE: must match N_MAX defined in C code

let {{ is_in_G1 (p : ([6][64], [6][64])) = (undefined:[64]) }}; // NOTE: the goal is to leave it uninterpreted
let POINTonE1_in_G1_spec = do {
  (p, p_ptr) <- ptr_to_fresh_readonly "p" (llvm_struct "struct.POINTonE1_affine");
  crucible_execute_func [p_ptr];
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_postcond {{ ret == is_in_G1 p }};
  crucible_return (crucible_term ret);
};

let {{ is_in_G2 (p : ([2][6][64], [2][6][64])) = (undefined:[64]) }}; // NOTE: the goal is to leave it uninterpreted
let POINTonE2_in_G2_spec = do {
  (p, p_ptr) <- ptr_to_fresh_readonly "p" (llvm_struct "struct.POINTonE2_affine");
  crucible_execute_func [p_ptr];
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_postcond {{ ret == is_in_G2 p }};
  crucible_return (crucible_term ret);
};

let blst_pairing_aggregate_pk_in_spec DST_len msg_len aug_len nelems null_sig min_sig = do {

  let sig_type = if min_sig then (llvm_struct "struct.POINTonE1") else (llvm_struct "struct.POINTonE2");
  let pk_type = if min_sig then (llvm_struct "struct.POINTonE2") else (llvm_struct "struct.POINTonE1");
  let sig_type_affine = if min_sig then (llvm_struct "struct.POINTonE1_affine") else (llvm_struct "struct.POINTonE2_affine");
  let pk_type_affine = if min_sig then (llvm_struct "struct.POINTonE2_affine") else (llvm_struct "struct.POINTonE1_affine");
  let method_name = if min_sig then "pairing_aggregate_pk_in_g2" else "pairing_aggregate_pk_in_g1";
  let group_test = if min_sig then {{is_in_G1}} else {{is_in_G2}};
  let null_sig_val = if min_sig then {{zero:([6][64], [6][64])}} else {{zero:([2][6][64], [2][6][64])}};

  crucible_precond {{ `nelems < `N_MAX }};

  ctx_ptr <- crucible_alloc (llvm_struct "struct.PAIRING");
  ctx_ctrl <- crucible_fresh_var (str_concat method_name "_ctx_ctrl") (llvm_int 32);
  crucible_precond {{ ctx_ctrl && ~(AGGR_MIN_SIG || AGGR_SIGN_SET || AGGR_MIN_PK || AGGR_GT_SET || AGGR_HASH_OR_ENCODE) == zero }};
  crucible_points_to (crucible_field ctx_ptr "ctrl") (crucible_term ctx_ctrl);

  crucible_points_to (crucible_field ctx_ptr "nelems") (crucible_term {{ `nelems:[32] }});

  ctx_Q <- crucible_fresh_var "pairing_aggregate_pk_in_g2_ctx_Q" (llvm_array nelems (llvm_struct "struct.POINTonE2_affine"));
  crucible_points_to_untyped (crucible_field ctx_ptr "Q") (crucible_term ctx_Q);
  ctx_P <- crucible_fresh_var "pairing_aggregate_pk_in_g2_ctx_P" (llvm_array nelems (llvm_struct "struct.POINTonE1_affine"));
  crucible_points_to_untyped (crucible_field ctx_ptr "P") (crucible_term ctx_P);

  ctx_GT <- crucible_fresh_var (str_concat method_name "_ctx_GT") vec384fp12_type;
  crucible_conditional_points_to {{ (ctx_ctrl && AGGR_GT_SET) != zero }} (crucible_field ctx_ptr "GT") (crucible_term ctx_GT);

  ctx_AggrSign <- crucible_fresh_var (str_concat method_name "_ctx_AggrSign") sig_type;
  crucible_conditional_points_to_untyped {{ (ctx_ctrl && AGGR_SIGN_SET) != zero }} (crucible_field ctx_ptr "AggrSign") (crucible_term ctx_AggrSign);

  (_, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  crucible_points_to (crucible_field ctx_ptr "DST") DST_ptr;
  crucible_points_to (crucible_field ctx_ptr "DST_len") (crucible_term {{`DST_len:[64]}});

  (PK, PK_ptr) <- ptr_to_fresh_readonly "PK" pk_type_affine;
  (sig, sig_ptr) <-
    if (eval_bool {{ (`null_sig:Bit) != False }})
      then return (null_sig_val ,crucible_null)
      else (ptr_to_fresh_readonly "sig" sig_type_affine);
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  aug <- crucible_fresh_var "aug" (llvm_array aug_len (llvm_int 8));
  aug_ptr <- crucible_alloc_readonly_aligned aug_len (llvm_array aug_len (llvm_int 8));
  crucible_points_to aug_ptr (crucible_term aug);

  crucible_execute_func [ctx_ptr, PK_ptr, sig_ptr, msg_ptr, crucible_term {{`msg_len:[64]}}, aug_ptr, crucible_term {{`aug_len:[64]}}];

  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_postcond {{ ret == `BLST_AGGR_TYPE_MISMATCH \/ ret == `BLST_POINT_NOT_IN_GROUP \/ ret == `BLST_PK_IS_INFINITY \/ ret == `BLST_SUCCESS }};
  let cond1 = if min_sig then {{ctx_ctrl && AGGR_MIN_PK == zero}} else {{ctx_ctrl && AGGR_MIN_SIG == zero}} ;
  crucible_postcond {{ ~cond1 ==> ret == `BLST_AGGR_TYPE_MISMATCH }};
  crucible_postcond {{ cond1 /\ ((`null_sig:Bit) == False) /\ sig != zero /\ (group_test sig == zero) ==> ret == `BLST_POINT_NOT_IN_GROUP }};
  crucible_postcond {{ cond1 /\ (((`null_sig:Bit) == True) \/ sig == zero \/ (group_test sig != zero)) /\ PK == zero ==> ret == `BLST_PK_IS_INFINITY }};
  new_ctx_ctrl <- crucible_fresh_var (str_concat "new_" (str_concat method_name "_ctx_ctrl")) (llvm_int 32);
  crucible_points_to (crucible_field ctx_ptr "ctrl") (crucible_term new_ctx_ctrl);

  if min_sig
    then
      crucible_postcond {{ cond1 ==> new_ctx_ctrl && AGGR_MIN_SIG != zero }}
    else
      crucible_postcond {{ cond1 ==> new_ctx_ctrl && AGGR_MIN_PK != zero }};

  new_nelems <- crucible_fresh_var (str_concat "new_" (str_concat method_name "_ctx_nelems")) (llvm_int 32);
  crucible_points_to (crucible_field ctx_ptr "nelems") (crucible_term new_nelems);
  crucible_postcond {{ ret == `BLST_SUCCESS /\ `nelems < `N_MAX-1 ==> new_nelems == ((`nelems+1):[32]) }};
  crucible_postcond {{ ret == `BLST_SUCCESS /\ `nelems == `N_MAX-1 ==> new_nelems == (zero:[32]) }};

  crucible_postcond {{ (cond1 /\ (((`null_sig:Bit) == True) \/ sig == zero \/ (group_test sig != zero)) /\ PK != zero) == (ret == `BLST_SUCCESS) }};
  new_ctx_Q <- crucible_fresh_var "new_pairing_aggregate_pk_in_g2_ctx_Q" (llvm_array (eval_size {| nelems+1 |}) (llvm_struct "struct.POINTonE2_affine"));
  new_ctx_P <- crucible_fresh_var "new_pairing_aggregate_pk_in_g2_ctx_P" (llvm_array (eval_size {| nelems+1 |}) (llvm_struct "struct.POINTonE1_affine"));
  crucible_conditional_points_to_untyped {{ ret == `BLST_SUCCESS }} (crucible_field ctx_ptr "Q") (crucible_term new_ctx_Q);
  crucible_conditional_points_to_untyped {{ ret == `BLST_SUCCESS }} (crucible_field ctx_ptr "P") (crucible_term new_ctx_P);

  crucible_postcond {{ ret == `BLST_SUCCESS /\ `nelems == (`N_MAX-1) ==> new_ctx_ctrl && AGGR_GT_SET != zero }};
  new_ctx_GT <- crucible_fresh_var (str_concat "new_" (str_concat method_name "_ctx_GT")) vec384fp12_type;
  crucible_conditional_points_to {{ ret == `BLST_SUCCESS /\ `nelems == (`N_MAX-1) }} (crucible_field ctx_ptr "GT") (crucible_term new_ctx_GT);

  crucible_postcond {{ (ctx_ctrl && AGGR_SIGN_SET) != zero \/ (cond1 /\ ((`null_sig:Bit) == False) /\ sig != zero /\ (group_test sig) != zero) ==> new_ctx_ctrl && AGGR_SIGN_SET != zero }};
  new_ctx_AggrSign <- crucible_fresh_var (str_concat "new_" (str_concat method_name "_ctx_AggrSign")) sig_type;
  crucible_conditional_points_to_untyped {{ (ctx_ctrl && AGGR_SIGN_SET) != zero \/ (cond1 /\ ((`null_sig:Bit) == False) /\ sig != zero /\ (group_test sig) != zero) }} (crucible_field ctx_ptr "AggrSign") (crucible_term new_ctx_AggrSign);

  crucible_return (crucible_term ret);
};

let blst_pairing_commit_spec nelems = do {
  ctx_ptr <- crucible_alloc (llvm_struct "struct.PAIRING");

  ctx_ctrl <- crucible_fresh_var "new_pairing_commit_ctx_ctrl" (llvm_int 32);
  crucible_points_to (crucible_field ctx_ptr "ctrl") (crucible_term ctx_ctrl);

  crucible_precond {{ `nelems <= `N_MAX }};
  crucible_points_to (crucible_field ctx_ptr "nelems") (crucible_term {{`nelems:[32]}});

  ctx_GT <- crucible_fresh_var "pairing_commit_ctx_GT" vec384fp12_type;
  crucible_conditional_points_to {{ ctx_ctrl && AGGR_GT_SET != zero }} (crucible_field ctx_ptr "GT") (crucible_term ctx_GT);

  ctx_Q <- crucible_fresh_var "pairing_commit_ctx_Q" (llvm_array N_MAX (llvm_struct "struct.POINTonE2_affine"));
  crucible_points_to_untyped (crucible_field ctx_ptr "Q") (crucible_term ctx_Q);
  ctx_P <- crucible_fresh_var "pairing_commit_ctx_P" (llvm_array N_MAX (llvm_struct "struct.POINTonE1_affine"));
  crucible_points_to_untyped (crucible_field ctx_ptr "P") (crucible_term ctx_P);

  crucible_execute_func [ctx_ptr];

  new_nelems <- crucible_fresh_var "new_pairing_commit_nelems" (llvm_int 32);
  crucible_points_to (crucible_field ctx_ptr "nelems") (crucible_term new_nelems);
  crucible_postcond {{ new_nelems == zero }};

  new_ctx_GT <- crucible_fresh_var "new_pairing_commit_ctx_GT" vec384fp12_type;
  crucible_conditional_points_to {{ `nelems != zero }} (crucible_field ctx_ptr "GT") (crucible_term new_ctx_GT);
  crucible_points_to (crucible_field ctx_ptr "nelems") (crucible_term {{ zero:[32] }});

};

let blst_pairing_finalverify_spec null_GTsig min_sig sign_set = do {
  ctx_ptr <- crucible_alloc (llvm_struct "struct.PAIRING");

  ctx_ctrl <- crucible_fresh_var "pairing_final_verify_ctx_ctrl" (llvm_int 32);
  crucible_points_to (crucible_field ctx_ptr "ctrl") (crucible_term ctx_ctrl);

  (GTsig, GTsig_ptr) <-
    if null_GTsig
      then return ({{ zero:[72][64] }},crucible_null)
      else (ptr_to_fresh_readonly "GTsig" vec384fp12_type);

  if (eval_bool {{ `min_sig:Bit }})
    then crucible_precond {{ (ctx_ctrl && AGGR_MIN_SIG) != zero /\ (ctx_ctrl && AGGR_MIN_PK) == zero}}
    else crucible_precond {{ (ctx_ctrl && AGGR_MIN_PK) != zero /\ (ctx_ctrl && AGGR_MIN_SIG) == zero}};

  if (eval_bool {{ `sign_set:Bit }})
    then crucible_precond {{ (ctx_ctrl && AGGR_SIGN_SET) != zero }}
    else crucible_precond {{ (ctx_ctrl && AGGR_SIGN_SET) == zero }};

  ctx_AggrSign <- if (eval_bool {{ (`min_sig:Bit) /\ (`sign_set:Bit) }})
      then (crucible_fresh_var "pairing_finalverify_ctx_AggrSign" (llvm_struct "struct.POINTonE1"))
      else (crucible_fresh_var "pairing_finalverify_ctx_AggrSign" (llvm_struct "struct.POINTonE2"));

  crucible_conditional_points_to_untyped {{ (ctx_ctrl && AGGR_SIGN_SET) != zero }} (crucible_field ctx_ptr "AggrSign") (crucible_term ctx_AggrSign);

  ctx_GT <- crucible_fresh_var "pairing_finalverify_ctx_GT" vec384fp12_type;
  crucible_points_to (crucible_field ctx_ptr "GT") (crucible_term ctx_GT);

  crucible_execute_func [ctx_ptr, GTsig_ptr];
//  ret <- crucible_fresh_var "ret" (llvm_int 64);
  ret <- crucible_fresh_var "ret" (llvm_int 32); // new return type
  crucible_postcond {{ ((ctx_ctrl && AGGR_GT_SET) == zero) ==> ret == zero }};

  crucible_return (crucible_term ret);
};

let blst_pairing_merge_spec min_sig = do {
  ctx_ptr <- crucible_alloc (llvm_struct "struct.PAIRING");
  ctx1_ptr <- crucible_alloc (llvm_struct "struct.PAIRING");

  ctx_ctrl <- crucible_fresh_var "pairing_merge_ctx_ctrl" (llvm_int 32);
  crucible_points_to (crucible_field ctx_ptr "ctrl") (crucible_term ctx_ctrl);
  ctx1_ctrl <- crucible_fresh_var "pairing_merge_ctx1_ctrl" (llvm_int 32);
  crucible_points_to (crucible_field ctx1_ptr "ctrl") (crucible_term ctx1_ctrl);

  nelems <- crucible_fresh_var "pairing_merge_ctx_nelems" (llvm_int 32);
  crucible_points_to (crucible_field ctx_ptr "nelems") (crucible_term nelems);
  nelems1 <- crucible_fresh_var "pairing_merge_ctx1_nelems" (llvm_int 32);
  crucible_points_to (crucible_field ctx1_ptr "nelems") (crucible_term nelems1);

  AggrSignE1 <- crucible_fresh_var "pairing_merge_ctx_AggrSignE1" (llvm_struct "struct.POINTonE1");
  AggrSignE1_1 <- crucible_fresh_var "pairing_merge_ctx_AggrSignE1" (llvm_struct "struct.POINTonE1");
  AggrSignE2 <- crucible_fresh_var "pairing_merge_ctx_AggrSignE2" (llvm_struct "struct.POINTonE2");
  AggrSignE2_1 <- crucible_fresh_var "pairing_merge_ctx_AggrSignE2" (llvm_struct "struct.POINTonE2");

  if min_sig
    then do {
      crucible_precond {{ ctx_ctrl && AGGR_MIN_SIG != zero }};
      crucible_conditional_points_to_untyped {{ ctx_ctrl && AGGR_MIN_SIG != zero /\ ctx_ctrl && ctx1_ctrl && AGGR_SIGN_SET != zero }} (crucible_field ctx_ptr "AggrSign") (crucible_term AggrSignE1);
      crucible_conditional_points_to_untyped {{ (ctx_ctrl && AGGR_MIN_SIG != zero /\ ctx_ctrl && ctx1_ctrl && AGGR_SIGN_SET != zero) \/ (ctx_ctrl && AGGR_MIN_SIG != zero /\ ctx_ctrl && ctx1_ctrl && AGGR_SIGN_SET == zero /\ ctx1_ctrl && AGGR_SIGN_SET != zero) }} (crucible_field ctx1_ptr "AggrSign") (crucible_term AggrSignE1_1);
    }
    else do {
      crucible_precond {{ ctx_ctrl && AGGR_MIN_PK != zero }};
      crucible_conditional_points_to {{ ctx_ctrl && AGGR_MIN_PK != zero /\ ctx_ctrl && ctx1_ctrl && AGGR_SIGN_SET != zero }} (crucible_field ctx_ptr "AggrSign") (crucible_term AggrSignE2);
      crucible_conditional_points_to {{ (ctx_ctrl && AGGR_MIN_PK != zero /\ ctx_ctrl && ctx1_ctrl && AGGR_SIGN_SET != zero) \/ (ctx_ctrl && AGGR_MIN_PK != zero /\ ctx_ctrl && ctx1_ctrl && AGGR_SIGN_SET == zero /\ ctx1_ctrl && AGGR_SIGN_SET != zero) }} (crucible_field ctx1_ptr "AggrSign") (crucible_term AggrSignE2_1);
    };

  ctx_GT <- crucible_fresh_var "pairing_merge_ctx_GT" vec384fp12_type;
  crucible_conditional_points_to {{ ctx_ctrl && ctx1_ctrl && AGGR_GT_SET != zero }} (crucible_field ctx_ptr "GT") (crucible_term ctx_GT);
  ctx1_GT <- crucible_fresh_var "pairing_merge_ctx1_GT" vec384fp12_type;
  crucible_conditional_points_to {{ ctx1_ctrl && AGGR_GT_SET != zero }} (crucible_field ctx1_ptr "GT") (crucible_term ctx1_GT);

  crucible_execute_func [ctx_ptr, ctx1_ptr];
  ret <- crucible_fresh_var "ret" (llvm_int 32);

  crucible_postcond {{
    ctx_ctrl && MIN_SIG_OR_PK != zero /\ ctx_ctrl && ctx1_ctrl && MIN_SIG_OR_PK == zero
      ==> ret == `BLST_AGGR_TYPE_MISMATCH }};
  crucible_postcond {{ (nelems != zero) || (nelems1 != zero) ==> ret == `BLST_AGGR_TYPE_MISMATCH }};

  new_ctx_ctrl <- crucible_fresh_var "new_merge_ctx_ctrl" (llvm_int 32);
  crucible_points_to (crucible_field ctx_ptr "ctrl") (crucible_term new_ctx_ctrl);
  new_ctx1_ctrl <- crucible_fresh_var "new_merge_ctx1_ctrl" (llvm_int 32);
  crucible_points_to (crucible_field ctx1_ptr "ctrl") (crucible_term new_ctx1_ctrl);
  crucible_postcond {{ ~(ctx_ctrl && MIN_SIG_OR_PK != zero /\ ctx_ctrl && ctx1_ctrl && MIN_SIG_OR_PK == zero) /\ nelems == zero /\ nelems1 == zero /\ ctx1_ctrl && AGGR_SIGN_SET != zero /\ (ctx_ctrl && MIN_SIG_OR_PK == AGGR_MIN_SIG \/ ctx_ctrl && MIN_SIG_OR_PK == AGGR_MIN_PK) ==> new_ctx_ctrl && AGGR_SIGN_SET != zero }};

  crucible_return (crucible_term ret);
};

let blst_aggregated_in_g1_spec = do {
  ret_ptr <- crucible_alloc vec384fp12_type;
  (_, sig_ptr) <- ptr_to_fresh_readonly "aggregated_in_g1_sig" (llvm_struct "struct.POINTonE1_affine");
  crucible_execute_func [ret_ptr, sig_ptr];
  new_ret <- crucible_fresh_var "new_aggregated_in_g1_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let blst_aggregated_in_g2_spec = do {
  ret_ptr <- crucible_alloc vec384fp12_type;
  (_, sig_ptr) <- ptr_to_fresh_readonly "aggregated_in_g2_sig" (llvm_struct "struct.POINTonE2_affine");
  crucible_execute_func [ret_ptr, sig_ptr];
  new_ret <- crucible_fresh_var "new_aggregated_in_g2_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

POINTonE1_in_G1_ov <- admit "POINTonE1_in_G1" POINTonE1_in_G1_spec;

// Also make sure this is memory safe (even if we don't use this override):
let POINTonE1_in_G1_spec_ = do {
  (_, p_ptr) <- ptr_to_fresh_readonly "p" (llvm_struct "struct.POINTonE1_affine");
  crucible_execute_func [p_ptr];
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_return (crucible_term ret);
};
// POINTonE1_in_G1_ov_ <- verify "POINTonE1_in_G1" (concat ec_ops_overrides assembly_overrides) POINTonE1_in_G1_spec_;
POINTonE1_in_G1_ov_ <- admit "POINTonE1_in_G1"  POINTonE1_in_G1_spec_; // no override for mulx_mont_384 worked

POINTonE2_in_G2_ov <- admit "POINTonE2_in_G2" POINTonE2_in_G2_spec;

// Also make sure this is memory safe (even if we don't use this override):
let POINTonE2_in_G2_spec_ = do {
  (_, p_ptr) <- ptr_to_fresh_readonly "p" (llvm_struct "struct.POINTonE2_affine");
  crucible_execute_func [p_ptr];
  ret <- crucible_fresh_var "ret" limb_type;
  crucible_return (crucible_term ret);
};
// POINTonE2_in_G2_ov_ <- verify "POINTonE2_in_G2" (concat ec_ops_overrides assembly_overrides) POINTonE2_in_G2_spec_;
POINTonE2_in_G2_ov_ <- admit "POINTonE2_in_G2"  POINTonE2_in_G2_spec_; // "Error during memory load" ?

let overrides = foldr concat [hash_to_field_ovs, ec_ops_overrides, assembly_overrides, fp12_tower_ovs, miller_loop_n_ovs] [final_exp_alias_ov, final_exp_ov, map_to_g2_ov, map_to_g2_v_null_ov, POINTonE2_in_G2_ov, POINTonE1_in_G1_ov];

pairing_init_ov <- verify "blst_pairing_init" [] (blst_pairing_init_spec 8);

let aggregate_ns = [0,1,7]; // aggregate_... calls miller_loop_n for nelems+1

let make_aggregate_pk_in_g1_ov null_sig nelems = verify_unint "blst_pairing_aggregate_pk_in_g1" overrides ["is_in_G2"] (blst_pairing_aggregate_pk_in_spec DST_len msg_len aug_len nelems null_sig false); // null_sig should be 0 or 1
//aggregate_pk_in_g1_null_sig_ovs <- for aggregate_ns (make_aggregate_pk_in_g1_ov 1);
//aggregate_pk_in_g1_non_null_sig_ovs <- for aggregate_ns (make_aggregate_pk_in_g1_ov 0);
// "error when loading through a pointer"

let make_aggregate_pk_in_g2_ov null_sig nelems = verify_unint "blst_pairing_aggregate_pk_in_g2" overrides ["is_in_G1"] (blst_pairing_aggregate_pk_in_spec DST_len msg_len aug_len nelems null_sig true); // null_sig should be 0 or 1
//aggregate_pk_in_g2_null_sig_ovs <- for aggregate_ns (make_aggregate_pk_in_g2_ov 1);
//aggregate_pk_in_g2_non_null_sig_ovs <- for aggregate_ns (make_aggregate_pk_in_g2_ov 0);
// "error when loading through a pointer"

let mk_pairing_commit_ov n = verify "blst_pairing_commit" overrides (blst_pairing_commit_spec n);
pairing_commit_ovs <- for miller_loop_ns mk_pairing_commit_ov;

pairing_finalverify_1 <- verify "blst_pairing_finalverify" overrides (blst_pairing_finalverify_spec false 0 1);
pairing_finalverify_2 <- verify "blst_pairing_finalverify" overrides (blst_pairing_finalverify_spec false 0 0);
pairing_finalverify_3  <- verify "blst_pairing_finalverify" overrides (blst_pairing_finalverify_spec false 1 1);
pairing_finalverify_4 <- verify "blst_pairing_finalverify" overrides (blst_pairing_finalverify_spec false 1 0);
//pairing_finalverify_5 <- verify "blst_pairing_finalverify" overrides (blst_pairing_finalverify_spec true 0 1);
//pairing_finalverify_6 <- verify "blst_pairing_finalverify" overrides (blst_pairing_finalverify_spec true 0 0);
//pairing_finalverify_7 <- verify "blst_pairing_finalverify" overrides (blst_pairing_finalverify_spec true 1 1);
//pairing_finalverify_8 <- verify "blst_pairing_finalverify" overrides (blst_pairing_finalverify_spec true 1 0);
// ... needs  "ctx_inverse_mod_383

//pairing_merge <- verify "blst_pairing_merge" overrides (blst_pairing_merge_spec true); // postcondition FAILS
// pairing_merge <- verify "blst_pairing_merge" overrides (blst_pairing_merge_spec false); // postcondition FAILS

aggregated_in_g1_ov <- verify "blst_aggregated_in_g1" overrides blst_aggregated_in_g1_spec;
aggregated_in_g2_ov <- verify "blst_aggregated_in_g2" overrides blst_aggregated_in_g2_spec;
