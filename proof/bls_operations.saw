/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

import "../spec/BLSMinimalSignatureSize.cry";

/*
let do_prove = true;
include "proof-helpers.saw";
*/

let {{
  drop_join_reverse: {n_bits, n_bytes} (fin n_bytes, n_bits <= 8*n_bytes) => [n_bytes][8] -> [n_bits]
  drop_join_reverse bytes = drop`{back=n_bits} (join (reverse bytes))

  same_point_affine_E' = same_point_affine E'
  same_point_affine_E  = same_point_affine E

  is_bad_O_form_E: POINTonE1_t -> Bool
  is_bad_O_form_E P = ((is_point_O E (fp_abs P.0, fp_abs P.1)) /\
                       (fp_abs (P.2) != Fp.field_zero)) \/
                      ((~(is_point_O E (fp_abs P.0, fp_abs P.1))) /\
                       fp_abs (P.2) == Fp.field_zero)

  is_bad_O_form_E': POINTonE2_t -> Bool
  is_bad_O_form_E' P = ((is_point_O E' (fp2_abs P.0, fp2_abs P.1)) /\
                        (fp2_abs (P.2) != Fp_2.field_zero)) \/
                       ((~(is_point_O E' (fp2_abs P.0, fp2_abs P.1))) /\
                        fp2_abs (P.2) == Fp_2.field_zero)

  pubkey_to_point_is_affine: [96][8] -> Bool
  pubkey_to_point_is_affine pk =
    maybe_cases (pubkey_to_point (join pk))
      False
      (\y -> is_point_affine E' y)

  signature_to_point_is_affine: [48][8] -> Bool
  signature_to_point_is_affine sig =
    maybe_cases (signature_to_point (join sig))
      False
      (\y -> is_point_affine E y)
}};

same_point_affine_E_thm <- prove_cryptol
  {{ \P1 P2 -> same_point_affine E P1 P2 == same_point_affine_E P1 P2 }} [];

let demo_SkToPk_A_spec = do {
  let n_bytes = 32;
  let bits = 255;
  out_ptr <- llvm_alloc (llvm_array 96 (llvm_int 8));
  scalar_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array n_bytes (llvm_int 8));
  scalar <- crucible_fresh_var "scalar" (llvm_array n_bytes (llvm_int 8));
  crucible_points_to scalar_ptr (crucible_term scalar);
  // extra precondition from POINTonE2_mult_w5
  crucible_precond {{ e2_order BP' > scalar_value`{bits,n_bytes} scalar + shift }};
  llvm_precond {{ scalar != zero }};
  llvm_execute_func [out_ptr, scalar_ptr];
  // TODO: is this `join . reverse` (and `reverse . split`) necessary?  Seems
  // like an endianness conversion?
  // TODO: I *think* you only need the endianness reversal going in, but it
  // isn't necessary on the way out because the key is supposed to be big
  // endian.  Double check though.
  //llvm_points_to out_ptr (llvm_term {{ reverse (split`{each=8} (sk_to_pk (drop_join_reverse scalar))) }});
  llvm_points_to out_ptr (llvm_term {{ (split`{each=8} (sk_to_pk (drop_join_reverse scalar))) }});
};

let or_core = parse_core "or";
let not_core = parse_core "not";
let and_core = parse_core "and";

affine_inv_affine_rep_e2_thm <- custom_prove_cryptol
  {{ \P -> POINTonE2_affine_invariant (POINTonE2_affine_rep P) == True }}
  do {
    unfolding [ "POINTonE2_affine_rep" , "POINTonE2_affine_invariant" ];
    rw_with fp2_rep_thms;
    print_goal;
    w4_unint_z3 [];
  };

affine_E'_inv_thm <- test_cryptol (rewrite (cryptol_ss())
  {{ \P1 P2 ->
     (and_core (same_point_affine E' (affinify E' (POINTonE2_abs P1)) P2)
               (and_core (POINTonE2_invariant P1)
                         (and_core (not_core (is_bad_O_form_E' P1))
                                   (is_point_projective E' (POINTonE2_abs P1))))) ==
     (same_point_affine E' (affinify E' (POINTonE2_abs P1)) P2 /\
      ~(is_bad_O_form_E' P1) /\
      is_point_affine E' P2) }});

// NOTE: Too slow to quickcheck
e2_scalar_mult_on_curve_thm <- admit_cryptol
  {{ \sk P -> is_point_affine E' (e2_scalar_mult sk P) ==
              if is_point_affine E' P
              then True
              else apply is_point_affine E' (e2_scalar_mult sk P) }};

BP'_is_point_affine_thm <- prove_cryptol
  {{ is_point_affine E' BP' == True }} [];

let boolEq_core = parse_core "boolEq";

and_true_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \b1 b2 -> boolEq_core (and_core b1 b2) (b1 /\ (b2 /\ True)) == True }}) [];

e2_scalar_mult_not_bad_O_thm <- admit_cryptol (rewrite (cryptol_ss())
  {{ \P sk -> (same_point_affine
                E'
                (affinify E' (POINTonE2_abs P))
                (e2_scalar_mult (scalar_value`{255,32} sk) BP')) ==
              ((apply same_point_affine
                      E'
                      (affinify E' (POINTonE2_abs P))
                      (e2_scalar_mult (scalar_value`{255,32} sk) BP')) &&
                ~(is_bad_O_form_E' P)) }});

same_point_affine_E'_thm <- prove_cryptol
  {{ \P1 P2 -> same_point_affine E' P1 P2 == same_point_affine_E' P1 P2 }} [];


// Can't use normal conditional formulation because "sk" is a fresh var that
// exists only on the right hand side of the substitution, so the override
// never applies
test_thm_correct <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \P sk -> (same_point_affine
                E'
                (affinify E' (POINTonE2_abs P))
                (e2_scalar_mult (scalar_value`{255,32} sk) BP')) ==
              ((apply same_point_affine
                      E'
                      (affinify E' (POINTonE2_abs P))
                      (e2_scalar_mult (scalar_value`{255,32} sk) BP')) &&
               POINTonE2_invariant P &&
               ~(is_bad_O_form_E' P) &&
               is_point_projective E' (POINTonE2_abs P)) }})
  do {
    rw_with_1 e2_scalar_mult_not_bad_O_thm;
    unfolding ["apply"];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps [ affine_E'_inv_thm
                       , affine_inv_affine_rep_e2_thm
                       , e2_scalar_mult_on_curve_thm
                       , BP'_is_point_affine_thm ] empty_ss);
    simplify basic_ss;
    simplify (addsimp same_point_affine_E'_thm empty_ss);
    print_goal;
    w4_unint_z3 (concat [ "e2_scalar_mult"
                        , "is_bad_O_form_E'"
                        , "scalar_value"
                        , "same_point_affine_E'" ]
                        e2_unints);
  };

mult_scalar_mult_thm <- admit_cryptol
  {{ \b P -> mult E' b P == e2_scalar_mult (toInt b) P }};

fold_scalar_value_thm <- prove_cryptol
  {{ \x -> toInt`{255} (drop_join_reverse`{255, 32} x) == scalar_value`{255, 32} x }} [];

split_join_thms <- for [48, 96]
  (\x -> prove_cryptol (rewrite (cryptol_ss())
    {{ \v -> split`{x, 8, Bool} (join`{x, 8, Bool} v) == v }}) []);

let vecEq = parse_core "vecEq 96 (Vec 8 Bool) (bvEq 8)";

is_equal_thms <- for
  [ {{ \ x y -> E.base_field.is_equal (x,y) == (x==y) }}
  , {{ \ x y -> E'.base_field.is_equal (x,y) == (x==y) }}
  ] (\ t -> prove_cryptol t []);

serialize_e2_eq_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P1 P2 -> (vecEq (serialize_E2 P1) (serialize_E2 P2)) ==
               if same_point_affine E' P1 P2
               then True
               else apply vecEq (serialize_E2 P1) (serialize_E2 P2) }})
  ["serialize_E2"];

point_e2_eq <- parse_core "pairEq (Vec 2 Integer) (Vec 2 Integer) (vecEq 2 Integer intEq) (vecEq 2 Integer intEq)";

eq_to_same_point_affine_E'_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P1 P2 -> (point_e2_eq P1 P2) == same_point_affine E' P1 P2 }}) [];

  // TODO: This feels provable
affinify_affine_thm <- test_cryptol
  {{ \P -> serialize_E2 (fp2_abs P.0, fp2_abs P.1) ==
           if (fp2_abs P.2) ==  Fp_2.field_unit
           then serialize_E2 (affinify E' (POINTonE2_abs P))
           else apply serialize_E2 (fp2_abs P.0, fp2_abs P.1) }};

include "horrible_core_terms.saw";

if_elim_thms <- for at_96_cores
 (\x -> prove_cryptol (rewrite (cryptol_ss())
    {{ \b1 b2 b3 (x1 : [96][8]) (x2 : [96][8]) ->
          (if (and_core (and_core b1 b2) b3)
           then x (if b2 then x1 else x2)
           else (x x1)) == (x x1) }}) []);

O_O_unit_implies_bad_O_form_E' <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> (is_bad_O_form_E' P) ==
           if (is_point_O E' (fp2_abs P.0, fp2_abs P.1)) /\
              (fp2_abs (P.2) == Fp_2.field_unit)
           then True
           else apply is_bad_O_form_E' P }}) [];

demo_SkToPk_A_ov <- custom_verify "demo_SkToPk_A"
  [blst_sk_to_pk_in_g2_ov, blst_p2_compress_projective_ov, blst_p2_compress_affine_ov]
  demo_SkToPk_A_spec
  do {
    unfolding [ "sk_to_pk"
              , "module parameter point_to_pubkey"
              , "module parameter other_curve"
              , "module parameter P"
              , "other_curve"
              , "P"
              , "point_to_pubkey" ];
    simplify (cryptol_ss());
    simplify (addsimp eq_to_same_point_affine_E'_thm empty_ss);
    simplify (addsimps [test_thm_correct] empty_ss);
    simplify basic_ss;
    simplify (cryptol_ss());
    unfolding ["apply"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with_1 O_O_unit_implies_bad_O_form_E';
    // BEGIN final goal proof
    simplify (addsimps (concat split_join_thms
                               [mult_scalar_mult_thm,
                                affinify_affine_thm,
                                fold_scalar_value_thm,
                                serialize_e2_eq_thm])
                       empty_ss);
    simplify (addsimps split_join_thms empty_ss);
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps if_elim_thms empty_ss);
    simplify (addsimps [unrip_thm_96, serialize_e2_eq_thm] empty_ss);
    simplify basic_ss;
    simplify (cryptol_ss());
    unfolding ["apply"];
    simplify remove_higher_order_function_simpset;
    simplify (addsimp same_point_affine_E'_thm empty_ss);
    print_goal;
    w4_unint_z3 (concat [ "e2_order"
                        , "scalar_value"
                        , "POINTonE2_abs"
                        , "serialize_E2"
                        , "fp2_abs"
                        , "e2_scalar_mult"
                        , "same_point_affine_E'"
                        , "POINTonE2_invariant" ]
                        e2_unints);
  };

let {{
  // TODO: Rename to indicate this is actually the KeyValidate precond
  verify_A_pk_precond: [96][8] -> Bool
  verify_A_pk_precond pk = (uncompress_E2_imp pk != nothing) /\
                           (~((pk@0)@1)) /\
                           pubkey_to_point_is_affine pk
}};


let demo_KeyValidate_A_spec = do {
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE2_Uncompress_in" compressed_E2_rep_type;
  llvm_precond {{ verify_A_pk_precond inp }};
  llvm_execute_func [ in_ptr ];
  llvm_return (llvm_term {{ bool_to_limb (KeyValidate (join inp)) }});
};

uncompress_E2_OK_on_curve <- admit_cryptol
  {{ \x -> is_point_affine E' (uncompress_E2_OK x) ==
           if uncompress_E2_imp x != nothing
           then True
           else is_point_affine E' (uncompress_E2_OK x) }};

is_point_O_E'_affine_rev_thm <- prove_cryptol
  {{ \x y -> (Fp_2.is_equal (x, Fp_2.field_zero) /\
              Fp_2.is_equal (y, Fp_2.field_zero)) ==
             is_point_O E' (x, y) }} [];

just_thm <- prove_cryptol (rewrite (cryptol_ss()) {{ \(x : AffinePoint t_Fp_2) -> just x == (True, x) }}) [];

// We assume that pubkey_subgroup_check is equivalent to is_in_g2_impl for
// points on the curve.  This assumption is proved in Bowe "Faster Subgroup
// Checks for BLS12-381".
is_in_g2_impl_thm <- admit_cryptol
  (rewrite (cryptol_ss())
  {{ \P -> pubkey_subgroup_check P ==
           if is_point_affine_E' P
           then is_in_g2_impl P
           else apply pubkey_subgroup_check P }});

hoist_POINTonE2_affine_invariant <- prove_cryptol
  (rewrite (cryptol_ss())
    {{ \c p1 p2 -> POINTonE2_affine_invariant (if c then p1 else p2) ==
                   if c then POINTonE2_affine_invariant p1 else POINTonE2_affine_invariant p2 }})
  ["POINTonE2_affine_invariant"];

// TODO: Is this proved somewhere?
deserialize_E2_uncompress_E2_OK_thm <- admit_cryptol (rewrite (cryptol_ss())
  {{ \x -> deserialize_E2 x ==
           if uncompress_E2_imp x != nothing
           then (True, uncompress_E2_OK x)
           else apply deserialize_E2 x }});

fold_normalize_affine_fp2_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> (Fp_2.normalize P.0, Fp_2.normalize P.1) ==
           normalize_affine_point Fp_2 P }}) [];

hoist_normalize_affine_fp2_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \b P1 P2 -> normalize_affine_point Fp_2 (if b then P1 else P2) ==
                 if b
                 then normalize_affine_point Fp_2 P1
                 else normalize_affine_point Fp_2 P2 }}) [];

hoist_pair_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \b (x : t_Fp_2) (y : t_Fp_2) -> (x, if b then y else x) ==
                                      if b then (x, y) else (x, x) }}) [];

normalize_point_O_E'_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ normalize_affine_point Fp_2 (point_O E') == point_O E' }}) [];

unfold_Fp_2_normalize_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \(x : t_Fp_2) -> (Fp_2.normalize x ==
                       [Fp.normalize x0, Fp.normalize x1] where
                       [x0, x1] = x) }}) [];

include "print_readably.saw";

normalize_uncompress_E2_OK_thm <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \x -> normalize_affine_point Fp_2 (uncompress_E2_OK x) ==
           uncompress_E2_OK x }})
  do {
    unfolding ["uncompress_E2_OK", "uncompress_E2_x_fp", "uncompress_E2_y"];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps [hoist_normalize_affine_fp2_thm] empty_ss);
    unfolding ["normalize_affine_point"];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps fp2_laws empty_ss);
    simplify (addsimps [normalize_sqrt_fp2_thm] empty_ss);
    simplify (addsimps [unfold_Fp_2_normalize_thm] empty_ss);
    simplify (addsimps fp_laws empty_ss);
    print_goal;
    print_readably;
    w4_unint_z3 fp2_unints;
  };

demo_KeyValidate_A_ov <- custom_verify "demo_KeyValidate_A"
  [ blst_p2_uncompress_OK_ov
  , POINTonE2_affine_on_curve_ov
  , vec_is_zero_2fp2_ov
  , blst_p2_affine_in_g2_ov ]
  demo_KeyValidate_A_spec
  do {
    unfolding [ "KeyValidate"
              , "maybe_cases"
              , "module parameter pubkey_to_point"
              , "module parameter other_curve"
              , "bool_to_limb"
              , "POINTonE2_affine_rep"
              , "pubkey_to_point_is_affine"
              , "POINTonE2_affine_abs"
              , "other_curve"
              , "pubkey_to_point"
              , "verify_A_pk_precond"
              , "reexport_pubkey_subgroup_check"
              , "module parameter pubkey_subgroup_check"];
    simplify (addsimp is_point_affine_E'_thm empty_ss);
    simplify (addsimps [ uncompress_E2_OK_on_curve] empty_ss);
    simplify basic_ss;
    simplify (addsimp is_point_O_E'_affine_rev_thm empty_ss);
    simplify (cryptol_ss());
    simplify (addsimps core_rewrites empty_ss);
    simplify (addsimp fp2_abs_ite_thm empty_ss);
    simplify fp2_simpset;
    simplify (addsimp is_in_g2_impl_thm empty_ss);
    simplify basic_ss;
    simplify (addsimp is_point_O_E'_thm empty_ss);
    simplify (basic_ss);
    simplify (addsimps [ hoist_POINTonE2_affine_rep
                       , affine_inv_affine_rep_e2_thm
                       , hoist_POINTonE2_affine_invariant ] empty_ss);
    simplify (basic_ss);
    simplify (cryptol_ss());
    simplify (addsimps core_rewrites empty_ss);
    simplify (addsimps split_join_thms empty_ss);
    simplify (addsimps [ deserialize_E2_uncompress_E2_OK_thm ] empty_ss);
    simplify remove_higher_order_function_simpset;
    goal_num_ite 4
      (do {
        simplify (addsimp just_thm empty_ss);
        simplify (basic_ss);
        simplify (cryptol_ss());
        simplify (addsimps [ fold_normalize_affine_fp2_thm
                           , hoist_pair_thm
                           , normalize_point_O_E'_thm
                           , normalize_uncompress_E2_OK_thm
                           , hoist_normalize_affine_fp2_thm ] empty_ss);
        simplify (basic_ss);
        simplify (cryptol_ss());
        (print_goal);
        w4_unint_z3 [ "is_in_g2_impl"
                    , "uncompress_E2_OK"
                    , "is_point_affine_E'"
                    , "pubkey_subgroup_check"
                    , "is_point_O_E'"
                    , "is_point_affine_E'"
                    , "deserialize_E2"
                    , "POINTonE2_affine_invariant"
                    , "fp2_rep"
                    , "uncompress_E2_imp"];
      })
      (do { 
        (print_goal);
        w4_unint_z3 [ "is_in_g2_impl"
                    , "uncompress_E2_OK"
                    , "is_point_affine_E'"
                    , "pubkey_subgroup_check"
                    , "is_point_O_E'"
                    , "is_point_affine_E'"
                    , "deserialize_E2"
                    , "uncompress_E2_imp"];
       });
  };

let demo_BasicSign_A_spec = do {
  //let DST = {{ "BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_" }};
  global_alloc_init "demo_DST_A" {{ DST }};
  let msg_len = 32;
  out_ptr <- llvm_alloc (llvm_array 48 (llvm_int 8));
  // SK must be aligned
  SK_ptr <- llvm_alloc_readonly_aligned 8 pow256_type;
  SK <- llvm_fresh_var "SK" pow256_type;
  llvm_points_to SK_ptr (llvm_term SK);
  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  // TODO: This precond was the only way I could think of to be able to talk
  // about the relationship between SK and the result of blst_hash_to_g1.  Is
  // there maybe a theorem that would work better?
  llvm_precond {{ e1_order (affinify E (hash_to_curve_opt_impl (msg,DST))) >
                  scalar_value`{255,32} SK + shift }};
  // TODO: Do I need this precond VV ?
  llvm_precond {{ SK != zero }};
  llvm_execute_func [ out_ptr
                    , SK_ptr
                    , msg_ptr
                    , llvm_term {{ `msg_len : [64] }} ];
  // TODO: Endianness?  (Both for return, and for args to CoreSign)
  llvm_points_to
    out_ptr
    (llvm_term {{ split`{each=8} (CoreSign ((drop_join_reverse`{255, 32} SK), msg)) }});
};

// TODO: Under what conditions is this true?  Should probably be done over IETF
// spec version rather than _impl version.  Also, see note on
// hash_to_g2.saw:118 to see why this is with is_point_affine rather than
// is_point_projective (it might not be easy to transform goal to
// is_point_projective)
hash_to_g1_on_curve_thm <- admit_cryptol
  {{ \x -> is_point_affine E (affinify E (hash_to_curve_opt_impl x)) == True }};

affine_inv_thm <- test_cryptol
  {{ \P1 P2 ->
     (and_core (same_point_affine E (affinify E (POINTonE1_abs P1)) P2)
               (and_core (POINTonE1_invariant P1)
                         (and_core (not_core (is_bad_O_form_E P1))
                                   (is_point_projective E (POINTonE1_abs P1))))) ==
               (same_point_affine E (affinify E (POINTonE1_abs P1)) P2 /\
                ~(is_bad_O_form_E P1) /\
                is_point_affine E P2) }};

affine_inv_affine_rep_e1_thm <- custom_prove_cryptol
  {{ \P -> POINTonE1_affine_invariant (POINTonE1_affine_rep P) == True }}
  do {
    unfolding [ "POINTonE1_affine_rep" , "POINTonE1_affine_invariant" ];
    rw_with fp_rep_thms;
    print_goal;
    w4_unint_z3 [];
  };

// NOTE: Too slow to quickcheck
e1_scalar_mult_on_curve_thm <- admit_cryptol
  {{ \sk P -> is_point_affine E (e1_scalar_mult sk P) ==
              if is_point_affine E P
              then True
              else apply is_point_affine E (e1_scalar_mult sk P) }};

e1_scalar_mult_not_bad_O_thm <- admit_cryptol (rewrite (cryptol_ss())
  {{ \P sk (x:([32][8],[43][8])) ->
                (same_point_affine
                  E
                  (affinify E (POINTonE1_abs P))
                  (e1_scalar_mult (scalar_value`{255,32} sk)
                                  (affinify E (hash_to_curve_opt_impl x)))) ==
                ((apply same_point_affine
                        E
                        (affinify E (POINTonE1_abs P))
                        (e1_scalar_mult (scalar_value`{255,32} sk)
                                        (affinify E (hash_to_curve_opt_impl x)))) &&
                  ~(is_bad_O_form_E P)) }});

let remove_ho_rules = concat
  [ point_add_fp2_thm, point_dadd_fp2_thm, point_double_fp2_thm, point_neg_fp2_thm
   , point_add_affine_fp2_thm, point_dadd_affine_fp2_thm
   , add_E'_thm, add'_E'_thm, neg_E'_thm
   , affinify_E'_thm, projectify_E'_thm
   , is_point_affine_E'_thm, is_point_projective_E'_thm
   , is_point_O_E'_thm ]
  [ point_add_fp_thm, point_dadd_fp_thm, point_double_fp_thm, point_neg_fp_thm
   , point_add_affine_fp_thm, point_dadd_affine_fp_thm
   , add_E_thm, add'_E_thm, affinify_E_thm,  projectify_E_thm
   , is_point_affine_E_thm, is_point_projective_E_thm, is_point_O_E_thm, point_O_E_thm
   ];


test_thm_correct' <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \P sk (x:([32][8],[43][8])) ->
                (same_point_affine
                  E
                  (affinify E (POINTonE1_abs P))
                  (e1_scalar_mult (scalar_value`{255,32} sk)
                                  (affinify E (hash_to_curve_opt_impl x)))) ==
                ((apply same_point_affine
                        E
                        (affinify E (POINTonE1_abs P))
                        (e1_scalar_mult (scalar_value`{255,32} sk)
                                        (affinify E (hash_to_curve_opt_impl x)))) &&
                  POINTonE1_invariant P &&
                  ~(is_bad_O_form_E P) &&
                  is_point_projective E (POINTonE1_abs P)) }})
  do {
    rw_with_1 e1_scalar_mult_not_bad_O_thm;
    unfolding ["apply"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with POINTonE1_base_thms;
    simplify (addsimps [ affine_inv_thm
                       , e1_scalar_mult_on_curve_thm
                       , hash_to_g1_on_curve_thm
                       , affine_inv_affine_rep_e1_thm ]
                       empty_ss);
    simplify basic_ss;
    rw_with remove_ho_rules;
    rw_with_1 same_point_affine_E_thm;
    rw_with_1 and_true_thm;
    print_goal;
    w4_unint_z3 (concat [ "same_point_affine_E"
                        , "hash_to_curve_opt_impl"
                        , "scalar_value"
                        , "is_bad_O_form_E" ]
                        ec_mult_unints);
  };

hash_to_curve_e1_opt_thm <- admit_cryptol
  {{ \x -> HE1::hash_to_curve x == HE1::hash_to_curve_opt x }};

hash_to_curve_arg_expand_thm <- prove_cryptol
  {{ \(x:([32][8],[43][8])) ->
       hash_to_curve_opt_impl x ==
       apply hash_to_curve_opt_impl (([]:[0][8])#x.0, x.1) }} ["hash_to_curve_opt_impl"];

// TODO: why is this needed here (see prove_hash_to_g1_ov in hash_to_g1.saw)?
hash_to_curve_e1_impl_thm <- custom_prove_cryptol
  {{ \(x:([32][8],[43][8])) -> HE1::hash_to_curve x == affinify E (hash_to_curve_opt_impl x) }}
  do {
    simplify (addsimp hash_to_curve_arg_expand_thm empty_ss);
    unfolding ["apply"];
    simplify (addsimp hash_to_curve_E1_opt_impl_equiv_ov empty_ss);
    simplify (addsimp hash_to_curve_e1_opt_thm empty_ss);
    simplify basic_ss;
    (print_goal);
    w4_unint_z3 ["HashToCurveE1::hash_to_curve_opt"];
  };

mult_e1_scalar_mult_thm <- admit_cryptol
  {{ \b P -> mult E b P == e1_scalar_mult (toInt b) P }};

let vecEq48 = parse_core "vecEq 48 (Vec 8 Bool) (bvEq 8)";

serialize_e1_eq_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P1 P2 -> (vecEq48 (serialize_E1 P1) (serialize_E1 P2)) ==
               if same_point_affine E P1 P2
               then True
               else apply vecEq48 (serialize_E1 P1) (serialize_E1 P2) }})
  ["serialize_E1"];

hoist_if_vecEq48_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \b v1 v2 v3 -> (vecEq48 (if b then v1 else v2) v3) ==
                    (if b then (vecEq48 v1 v3) else (vecEq48 v2 v3)) }}) [];

point_e1_eq <- parse_core "pairEq Integer Integer intEq intEq";

eq_to_same_point_affine_E_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P1 P2 -> (point_e1_eq P1 P2) == same_point_affine E P1 P2 }}) [];

// The proof of eliminate_normalized_args_affinify_E_thm is a bit intricate:
div_0_fp_lemma_1 <- prove_cryptol {{ \x -> Fp.div(x, Fp.field_zero) == Fp.field_zero }} [];

div_0_fp_lemma_2 <- custom_prove_cryptol
  {{ \x y -> Fp.div(x,y) == if is_zero Fp y then apply Fp.div(x, Fp.field_zero) else apply Fp.div(x,y)}}
  do { unfolding ["is_zero", "apply"]; rw_with_1 fp_is_equal_elim_thm; w4_unint_z3 ["Fp"]; };

div_0_fp_lemma <- custom_prove_cryptol
  {{ \x y -> Fp.div(x,y) == if is_zero Fp y then Fp.field_zero else apply Fp.div(x,y)}}
  do { rw_with_1 div_0_fp_lemma_2;
       unfolding ["apply"];
       rw_with_1 div_0_fp_lemma_1;
       w4_unint_z3 ["Fp"]; };

hoist_fp_mul_arg_thms <- for
  [ {{ \ c x y z -> Fp.mul (if c then x else y, z) == if c then Fp.mul(x,z) else Fp.mul(y,z) }}
  , {{ \ c x y z -> Fp.mul (x, if c then y else z) == if c then Fp.mul(x,y) else Fp.mul(x,z) }}
  ] (\ t -> prove_cryptol (rewrite (cryptol_ss()) t) ["Fp"]);

affinify_E_needs_no_special_case_thm <- custom_prove_cryptol
  {{ \ p -> (affinify E p == (Fp.mul(lambda2, x), Fp.mul(lambda3, y))
    where
        (x,y,z) = p
        lambda = Fp.div (Fp.field_unit, z)
        lambda2 = Fp.sq lambda
        lambda3 = Fp.mul(lambda, lambda2)) }}
  do { unfolding ["affinify", "E", "is_point_O", "same_point_affine", "point_O"];
      rw_with_1 div_0_fp_lemma;
      unfolding ["apply"];
      simplify (addsimps hoist_fp_mul_arg_thms  (addsimps fp_alg_thms fp_simpset));
      w4_unint_z3 fp_unints; };


eliminate_normalized_args_affinify_E_thm <- custom_prove_cryptol
  {{ \ p -> affinify E (normalize_point Fp p) == affinify E p }}
  do {
    rw_with_1 affinify_E_needs_no_special_case_thm;
    unfolding ["E", "normalize_point"];
    simplify fp_simpset;
    print_goal;
    w4_unint_z3 fp_unints;
  };

affinify_concrete_z_unit_thm <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> affinify E (POINTonE1_abs P) ==
           if (POINTonE1_invariant P) /\ ((fp_abs P.2) == Fp.field_unit)
           then affinify E (fp_abs P.0, fp_abs P.1, Fp.field_unit)
           else apply affinify E (POINTonE1_abs P) }})
  do {
    unfolding ["apply"];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps remove_ho_rules empty_ss);
    print_goal;
    w4_unint_z3 (concat ["fp_abs", "Fp"] ec_mult_unints);
  };

Fp_div_unit_unit_thm <- prove_cryptol
  {{ Fp.div (Fp.field_unit, Fp.field_unit) == Fp.field_unit }} [];

Fp_normalize_abs_thm <- custom_prove_cryptol
  {{ \x -> Fp.normalize (fp_abs x) == fp_abs x }}
  do {
    simplify (addsimps [fp_abs_normalize_thm, fp_abstract_invariant_thm] empty_ss);
    (print_goal);
    w4_unint_z3 [];
  };

affinify_z_1_thm <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> affinify E (POINTonE1_abs P) ==
           if (POINTonE1_invariant P) /\ ((fp_abs P.2) == Fp.field_unit)
           then (fp_abs P.0, fp_abs P.1)
           else apply affinify E (POINTonE1_abs P) }})
  do {
    simplify (addsimp affinify_concrete_z_unit_thm empty_ss);
    simplify (addsimps [affinify_E_needs_no_special_case_thm] empty_ss);
    unfolding ["apply"];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimp Fp_div_unit_unit_thm empty_ss);
    simplify (addsimps fp_laws empty_ss);
    unfolding ["POINTonE1_invariant"];
    simplify (addsimp Fp_normalize_abs_thm empty_ss);
    simplify (addsimps remove_ho_rules empty_ss);
    (print_goal);
    w4_unint_z3 (concat ["Fp", "fp_invariant", "fp_abs"] ec_mult_unints);
  };

serialize_e1_affine_thm <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> serialize_E1 (fp_abs P.0, fp_abs P.1) ==
           if (POINTonE1_invariant P) /\ (fp_abs (P.2) == Fp.field_unit)
           then serialize_E1 (affinify E (POINTonE1_abs P))
           else apply serialize_E1 (fp_abs P.0, fp_abs P.1) }})
  do {
    simplify (addsimps [affinify_z_1_thm] empty_ss);
    simplify basic_ss;
    simplify (cryptol_ss());
    unfolding ["apply"];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps remove_ho_rules empty_ss);
    print_goal;
    w4_unint_z3 ["fp_abs", "serialize_E1", "affinify_E", "POINTonE1_abs"];
  };

O_O_unit_implies_bad_O_form_E <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> (is_bad_O_form_E P) ==
           if (is_point_O E (fp_abs P.0, fp_abs P.1)) /\
              (fp_abs (P.2) == Fp.field_unit)
           then True
           else apply is_bad_O_form_E P }}) [];

// TODO: Solution is going to be some kind of "zero is not one" theorem, since
// we have to leave Fp uninterpreted (or that ~is_bad_O_form_E -> P.2 != 1)
demo_BasicSign_A_ov <- custom_verify "demo_BasicSign_A"
  [ hash_to_g1_impl_ov
  // [ hash_to_g1_ov
  , POINTonE1_mult_w5_sk_ov
  , blst_p1_compress_affine_ov
  , blst_p1_compress_projective_ov ]
  demo_BasicSign_A_spec
  do {
    simplify (addsimp eq_to_same_point_affine_E_thm (cryptol_ss()));
    rw_with POINTonE1_base_thms;
    simplify (addsimps POINTonE1_thms (cryptol_ss()));
    simplify (addsimp eliminate_normalized_args_affinify_E_thm empty_ss);
    simplify basic_ss;
    simplify (addsimps [test_thm_correct'] empty_ss);
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with_1 O_O_unit_implies_bad_O_form_E;
    unfolding ["apply", "BLSMinimalSignatureSize::DST", "is_bad_O_form_E"];
    simplify basic_ss;
    simplify (cryptol_ss());
    // BEGIN final goal proof
    unfolding [ "CoreSign"
              , "module parameter point_to_signature"
              , "module parameter main_curve"
              , "main_curve"
              , "module parameter hash_to_point"
              , "hash_to_point"
              , "point_to_signature"
              , "BLSMinimalSignatureSize::DST" ];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps (concat split_join_thms
                               [ hash_to_curve_e1_impl_thm
                               , fold_scalar_value_thm
                               // [ fold_scalar_value_thm
                               , serialize_e1_eq_thm
                               , mult_e1_scalar_mult_thm ])
                       empty_ss);
    simplify basic_ss;
    simplify (addsimps [hoist_unrip_48_thm] empty_ss);
    simplify (addsimps [hoist_if_vecEq48_thm] empty_ss);
    simplify (addsimps [serialize_e1_affine_thm] empty_ss);
    simplify (addsimps [serialize_e1_eq_thm] empty_ss);
    simplify (addsimps [hoist_if_vecEq48_thm] empty_ss);
    simplify (addsimps [serialize_e1_eq_thm] empty_ss);
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps remove_ho_rules empty_ss);
    simplify (addsimps [same_point_affine_E_thm] empty_ss);
    (print_goal);
    w4_unint_z3 (concat [ "e1_order"
                        , "e1_scalar_mult"
                        , "fp_abs"
                        , "Fp"
                        , "is_point_projective_E"
                        , "hash_to_curve_opt_impl"
                        , "scalar_value"
                        , "same_point_affine_E"
                        , "hash_to_curve_opt_impl" ]
                        ec_mult_unints);
  };

let compressed_E1_rep_type = llvm_array 48 (llvm_int 8);

let verify_A_sig_preconds sig = do {
  crucible_precond {{ uncompress_E1_imp sig != nothing }};
  // TODO: Maybe drop this precond vv
  crucible_precond {{ ~((sig@0)@1) }};
  // TODO: Explain (the library disagrees with spec on treating point_O as on
  // the curve?)
  let uncompressed_sig = {{ uncompress_E1_OK sig }};
  llvm_precond {{ ~(((uncompressed_sig.0) == Fp.field_zero) /\
                    ((uncompressed_sig.1) == Fp.field_zero)) }};
  llvm_precond {{ signature_to_point_is_affine sig }};
  // TODO: Maybe drop this precond vv
  crucible_precond {{ uncompress_E1_x_fp sig != Fp.field_zero }};
};

let verify_A_pk_preconds pk = do {
  crucible_precond {{ uncompress_E2_imp pk != nothing }};
  // TODO: Maybe drop this precond vv
  crucible_precond {{ ~((pk@0)@1) }};
  llvm_precond {{ pubkey_to_point_is_affine pk }};
};

let demo_BasicVerify_A_spec = do {
  global_alloc_init "demo_DST_A" {{ DST }};
  (sig, sig_ptr) <- ptr_to_fresh_readonly "sig" compressed_E1_rep_type;
  (pk, pk_ptr) <- ptr_to_fresh_readonly "pk" compressed_E2_rep_type;
  let message_len = 32;
  (message, message_ptr) <-
      ptr_to_fresh_readonly "message" (llvm_array message_len (llvm_int 8));
  verify_A_sig_preconds sig;
  llvm_precond {{ verify_A_pk_precond pk }};
  //verify_A_pk_preconds pk;
  llvm_execute_func [ sig_ptr
                    , pk_ptr
                    , message_ptr
                    , llvm_term {{ `message_len : [64] }} ];
  // TODO: Postcond
  llvm_return (llvm_term
      {{ bool_to_limb (CoreVerify (join pk) message (join sig)) }});
};

is_point_O_E_affine_rev_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x y -> (((fp_abs x) == Fp.field_zero) /\ ((fp_abs y) == Fp.field_zero)) ==
             is_point_O E (POINTonE1_affine_abs (x, y)) }}) [];

hoist_POINTonE1_affine_invariant <- prove_cryptol
  (rewrite (cryptol_ss())
    {{ \c p1 p2 -> POINTonE1_affine_invariant (if c then p1 else p2) ==
                   if c then POINTonE1_affine_invariant p1 else POINTonE1_affine_invariant p2 }})
  ["POINTonE1_affine_invariant"];

let BasicVerify_A_unints = (concat [
  "HE1::hash_to_curve"
, "KeyValidate"
, "POINTonE1_affine_abs"
, "POINTonE1_affine_invariant"
, "POINTonE1_affine_rep"
, "POINTonE2_affine_abs"
, "POINTonE2_affine_invariant"
, "POINTonE2_affine_rep"
//, "point_O_E"
//, "Fp"
//, "fp_abs"
, "bls_ate_pairing"
, "deserialize_E2"
, "fp_invariant"
, "fp_rep"
, "is_in_g1_impl"
, "is_in_g2_impl"
, "is_point_affine_E"
, "is_point_affine_E'"
, "is_square_fp"
, "nothing"
, "pubkey_subgroup_check"
, "pubkey_to_point_is_affine"
, "sign_F_p"
, "reexport_signature_subgroup_check"
, "signature_to_point_is_affine"
, "sqrt_fp"
, "uncompress_E1"
, "uncompress_E1_OK"
, "uncompress_E1_imp"
, "uncompress_E1_x"
, "uncompress_E1_x_fp"
, "uncompress_E1_y2"
, "uncompress_E2_OK"
, "uncompress_E2_imp"
] []); //(concat ec_mult_unints e2_unints));

zero_lt_one_thm <- prove_core abc
  "EqTrue (boolEq (intLe (natToInt 0) (natToInt 1)) True)";

fold_POINTonE1_affine_invariant <- prove_cryptol
  {{ \P -> (fp_invariant (P.0) /\ fp_invariant (P.1)) ==
           POINTonE1_affine_invariant P }} [];

fold_POINTonE2_affine_invariant <- prove_cryptol
  {{ \P -> (fp2_invariant (P.0) /\ fp2_invariant (P.1)) ==
           POINTonE2_affine_invariant P }} [];

// TODO: Is this proved somewhere?
uncompress_E1_uncompress_E1_OK_thm <- admit_cryptol (rewrite (cryptol_ss())
  {{ \x -> uncompress_E1 x ==
           if uncompress_E1_imp x != nothing
           then (True, uncompress_E1_OK x)
           else apply uncompress_E1 x }});

// We assume that signature_subgroup_check is equivalent to is_in_g1_impl for
// points on the curve.  This assumption is proved in Bowe "Faster Subgroup
// Checks for BLS12-381".
is_in_g1_impl_thm <- admit_cryptol
  (rewrite (cryptol_ss())
  {{ \P -> reexport_signature_subgroup_check P ==
           if is_point_affine_E P
           then is_in_g1_impl P
           else apply reexport_signature_subgroup_check P }});

fold_normalize_affine_fp_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> (Fp.normalize P.0, Fp.normalize P.1) ==
           normalize_affine_point Fp P }}) [];

POINTonE1_affine_abs_rep_thm <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> POINTonE1_affine_abs (POINTonE1_affine_rep P) ==
           normalize_affine_point Fp P }})
  do {
    unfolding [ "POINTonE1_affine_abs"
              , "POINTonE1_affine_rep"
              , "normalize_affine_point"];
    rw_with fp_rep_thms;
    print_goal;
    w4_unint_z3 [];
  };

hoist_normalize_affine_fp_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \b P1 P2 -> normalize_affine_point Fp (if b then P1 else P2) ==
                 if b
                 then normalize_affine_point Fp P1
                 else normalize_affine_point Fp P2 }}) [];

normalize_uncompress_E1_OK_thm <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \x -> normalize_affine_point Fp (uncompress_E1_OK x) ==
           uncompress_E1_OK x }})
  do {
    unfolding ["uncompress_E1_OK", "uncompress_E1_x_fp", "uncompress_E1_y"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with_1 hoist_normalize_affine_fp_thm;
    unfolding ["normalize_affine_point"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with fp_laws;
    rw_with [normalize_sqrt_fp_thm];
    print_goal;
    w4_unint_z3 fp_unints;
  };

let fp_rep_at0 = parse_core "\\ (x:(Vec 2 (Vec 6 (Vec 64 Bool)))) -> at 2 (Vec 6 (Vec 64 Bool)) x 0";

squash_at_0_thm <- prove_cryptol
  {{ \(x : Fp_rep_t) (y : Fp_rep_t) -> (fp_rep_at0 [x, y]) == x }} [];

uncompress_E1_OK_on_curve <- admit_cryptol
  {{ \x -> is_point_affine E (uncompress_E1_OK x) ==
           if uncompress_E1_imp x != nothing
           then True
           else apply is_point_affine E (uncompress_E1_OK x) }};

// TODO: Do not use
denorm <- admit_cryptol {{ \x -> Fp_2.normalize x == x }};

denorm_ap <- admit_cryptol {{ \x -> normalize_affine_point Fp_2 x == x }};

is_point_O_E_affine_no_abs_rev_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \x y -> ((peq x Fp.field_zero) /\ (peq y Fp.field_zero)) ==
             is_point_O E (x, y) }}) [];

fold_POINTonE2_affine_abs_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> ((fp2_abs P.0), (fp2_abs P.1)) == POINTonE2_affine_abs P }}) [];

hoist_POINTonE2_affine_abs_thm <- prove_cryptol
  (rewrite (cryptol_ss())
    {{ \c p1 p2 -> POINTonE2_affine_abs (if c then p1 else p2) ==
                   if c then POINTonE2_affine_abs p1 else POINTonE2_affine_abs p2 }})
  ["POINTonE2_affine_abs"];

hoist_is_point_O_E'_thm <- prove_cryptol
  (rewrite (cryptol_ss())
    {{ \c p1 p2 -> is_point_O E' (if c then p1 else p2) ==
                   if c then is_point_O E' p1 else is_point_O E' p2 }}) [];

POINTonE2_affine_abs_rep_thm <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> POINTonE2_affine_abs (POINTonE2_affine_rep P) ==
           normalize_affine_point Fp_2 P }})
  do {
    unfolding [ "POINTonE2_affine_abs"
              , "POINTonE2_affine_rep"
              , "normalize_affine_point" ];
    rw_with fp2_rep_thms;
    w4_unint_z3 fp2_unints;
  };

// TODO: Prove
// TODO: Try new is_point_O assumption based on CoreVerify precondition instead
is_point_O_KeyValidate_thm <- admit_cryptol (rewrite (cryptol_ss())
  {{ \pk -> is_point_O E' (uncompress_E2_OK pk) ==
            if KeyValidate (join pk) 
            then False
            else apply is_point_O E' (uncompress_E2_OK pk) }});

let {{
  core_verify_pk_in_g2 pk sig msg dst = Fp_12.is_equal(c1, c2) where
    c1 = bls_ate_pairing (HE1::hash_to_curve (msg, dst)) pk
    c2 = bls_ate_pairing sig BP'
}};

core_verify_pk_in_g2_impl_thm <- admit_cryptol {{ \pk sig msg dst -> core_verify_pk_in_g2_impl pk sig msg dst [] == core_verify_pk_in_g2 pk sig msg dst }};

blst_core_verify_pk_in_g2_ov <- verify_blst_core_verify_pk_in_g2_null_aug 32 43 0;

demo_BasicVerify_A_ov <- custom_verify "demo_BasicVerify_A"
  [ POINTonE1_Uncompress_OK_ov // blst_p1_uncompress_OK_ov
  , POINTonE1_affine_on_curve_ov
  , vec_is_zero_2fp_ov
  , blst_p1_affine_in_g1_ov
  , blst_p2_uncompress_OK_ov
  , POINTonE2_affine_on_curve_ov
  , vec_is_zero_2fp2_ov
  , blst_p2_affine_in_g2_ov
  , demo_KeyValidate_A_ov
  , blst_core_verify_pk_in_g2_ov ]
  demo_BasicVerify_A_spec
  do {
    (goal_num_ite 7
      (do {
        // Postcondition proof
        unfolding [ "CoreVerify"
                  , "module parameter signature_to_point"
                  //, "module parameter signature_subgroup_check"
                  , "signature_to_point_is_affine"
                  , "maybe_cases"
                  //, "POINTonE1_affine_rep"
                  , "signature_to_point"
                  //, "POINTonE1_affine_abs"
                  //, "POINTonE2_affine_abs"
                  , "module parameter pubkey_to_point"
                  , "pubkey_to_point"
                  , "blst_core_verify_pk_in_g2_error_precond"];
        rw_with_1 core_verify_pk_in_g2_impl_thm;
        unfolding [ "core_verify_pk_in_g2"
                  , "module parameter pairing"
                  , "pairing"
                  , "module parameter hash_to_point"
                  , "hash_to_point"
                  , "module parameter P"
                  , "P" ];
        rw_with split_join_thms;
        rw_with [ uncompress_E1_uncompress_E1_OK_thm
                , POINTonE1_affine_abs_rep_thm
                , is_in_g1_impl_thm];
        unfolding ["apply"];
        simplify basic_ss;
        simplify (cryptol_ss());
        simplify fp_simpset;
        simplify (addsimps core_rewrites empty_ss);
        //rw_with_1 squash_at_0_thm;
        rw_with [ fold_normalize_affine_fp_thm
                , intLe_sym_thm
                , normalize_uncompress_E1_OK_thm ];
        simplify basic_ss;
        simplify (cryptol_ss());
        unfolding ["POINTonE1_affine_rep"];
        rw_with fp_rep_thms;
        rw_with [ normalize_uncompress_E1_OK_thm
                , intLe_sym_thm
                , zero_lt_one_thm
                , is_point_O_E_affine_no_abs_rev_thm
                , uncompress_E1_OK_on_curve ];
        simplify basic_ss;
        simplify (cryptol_ss());
        rw_with_1 is_point_O_E_affine_no_abs_rev_thm;
        rw_with [ fold_normalize_affine_fp_thm
                , deserialize_E2_uncompress_E2_OK_thm
                , normalize_uncompress_E1_OK_thm ];
        // TODO: core_verify rewrite rule goes here
        rw_with [ POINTonE2_affine_abs_rep_thm
                , hoist_normalize_affine_fp2_thm
                , normalize_uncompress_E2_OK_thm ];
        rw_with remove_ho_rules;
        print_goal;
        w4_unint_z3 BasicVerify_A_unints;
      })
      (do {
        // Precondition proof(s)
        unfolding [ "POINTonE1_affine_abs"
                  , "uncompress_E1_imp"
                  , "POINTonE2_affine_abs"
                  /*
                  , "KeyValidate"
                  , "module parameter pubkey_to_point"
                  , "pubkey_to_point"
                  , "module parameter pubkey_subgroup_check"
                  , "module parameter other_curve"
                  , "other_curve"
                  , "maybe_cases"
                  */
                  , "blst_core_verify_pk_in_g2_error_precond"
                  ];
        simplify basic_ss;
        simplify (cryptol_ss());
        simplify basic_ss;
        rw_with [ hoist_POINTonE1_affine_rep
                , hoist_POINTonE1_affine_invariant
                , hoist_POINTonE2_affine_rep
                , hoist_POINTonE2_affine_invariant
                , affine_inv_affine_rep_e2_thm
                , zero_lt_one_thm
                , intLe_sym_thm
                , affine_inv_affine_rep_e1_thm ];
        rw_with structural_rewrites;
        simplify basic_ss;
        rw_with [ fold_POINTonE1_affine_invariant
                , fold_POINTonE2_affine_invariant
                , hoist_POINTonE1_affine_invariant
                , hoist_POINTonE2_affine_invariant
                , affine_inv_affine_rep_e2_thm
                , fold_POINTonE2_affine_abs_thm
                , hoist_POINTonE2_affine_abs_thm
                , hoist_is_point_O_E'_thm
                , POINTonE2_affine_abs_rep_thm
                , is_point_O_KeyValidate_thm
                , normalize_uncompress_E2_OK_thm
                , affine_inv_affine_rep_e1_thm ];
        //rw_with_1 is_point_O_affine_rev_thm;
        simplify basic_ss;
        simplify (cryptol_ss());
        rw_with remove_ho_rules;
        // END Precondition proofs
        print_goal;
        w4_unint_z3 BasicVerify_A_unints;
      }));
  };
