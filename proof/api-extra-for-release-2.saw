/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

blst_p1_affine_in_g1_ov <- verify_unint "blst_p1_affine_in_g1"
    [POINTonE1_in_G1_ov]
    (concat fp_unints ["POINTonE1_affine_invariant" // , "is_point_affine", "E"
                      , "POINTonE1_affine_abs", "bool_to_limb" // , "is_point_O"
                      , "is_in_g1_impl"])
    POINTonE1_in_G1_spec;

blst_p2_affine_in_g2_ov <- verify_unint "blst_p2_affine_in_g2"
    [POINTonE2_in_g2_ov]
    (concat fp_unints ["POINTonE2_affine_invariant" // , "is_point_affine", "E"
                      , "POINTonE2_affine_abs", "bool_to_limb" // , "is_point_O"
                      , "is_in_g2_impl"])
    POINTonE2_in_g2_spec;

POINTonE1_mult_w5_sk_ov <- admit "POINTonE1_mult_w5" (POINTonE1_mult_w5_spec 32 255);

POINTonE2_mult_w5_sk_ov <- admit "POINTonE2_mult_w5" (POINTonE2_mult_w5_spec 32 255);

// representation of the basepoint BP
// the constant was computed by Cryptol, but agree with the definition of BLS12_381_G1
let {{ G1 = ([0x5cb38790fd530c16, 0x7817fc679976fff5, 0x154f95c7143ba1c1,
              0xf0ae6acdf3d0e747, 0xedce6ecc21dbf440, 0x120177419e0bfb75],
             [0xbaac93d50ce72271, 0x8c22631a7918fd8e, 0xdd595f13570725ce,
              0x51ac582950405194, 0x0e1c8c3fad0059c0, 0x0bbc3efc5008a26a],
             [0x760900000002fffd, 0xebf4000bc40c0002, 0x5f48985753c758ba,
              0x77ce585370525745, 0x5c071a97a256ec6d, 0x15f65ec3fa80e493]) }};

BLS12_381_G1_thms <- for [
   {{ POINTonE1_invariant G1 == True }}
 , {{ affinify E (POINTonE1_abs G1) == BP }}
  ] (\ t -> prove_cryptol (rewrite (cryptol_ss()) (unfold_term ["G1"] t)) []);          

// Again computed by Cryptol, BP'

let {{ G2 = ([[0xf5f28fa202940a10, 0xb3f5fb2687b4961a, 0xa1a893b53e2ae580,
               0x9894999d1a3caee9, 0x6f67b7631863366b, 0x058191924350bcd7],
              [0xa5a9c0759e23f606, 0xaaa0c59dbccd60c3, 0x3bb17e18e2867806,
               0x1b1ab6cc8541b367, 0xc2b6ed0ef2158547, 0x11922a097360edf3]],
             [[0x4c730af860494c4a, 0x597cfa1f5e369c5a, 0xe7e6856caa0a635a,
               0xbbefb5e96e0d495f, 0x07d3a975f0ef25a2, 0x0083fd8e7e80dae5],
              [0xadc0fc92df64b05d, 0x18aa270a2b1461dc, 0x86adac6a3be4eba0,
               0x79495c4ec93da33a, 0xe7175850a43ccaed, 0x0b2bc2a163de1bf2]],
             [[0x760900000002fffd, 0xebf4000bc40c0002, 0x5f48985753c758ba,
               0x77ce585370525745, 0x5c071a97a256ec6d, 0x15f65ec3fa80e493],
              [0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
              0x0000000000000000, 0x0000000000000000, 0x0000000000000000]]) }};

BLS12_381_G2_thms <- for
   [ {{ POINTonE2_invariant G2 == True }}
   , {{ affinify E' (POINTonE2_abs G2) == BP' }}
   ] (\t -> prove_cryptol (rewrite (cryptol_ss ()) (unfold_term ["G2"] t)) []) ;

let blst_sk_to_pk_in_g1_spec = do {
    let n_bytes = 32;
    let bits = 255;
    ret_ptr <- crucible_alloc POINTonE1_type;
    scalar_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array n_bytes (llvm_int 8));
    scalar <- crucible_fresh_var "scalar" (llvm_array n_bytes (llvm_int 8));
    crucible_points_to scalar_ptr (crucible_term scalar);
    // extra precondition from POINTonE1_mult_w5
    crucible_precond {{ e1_order BP > scalar_value`{bits,n_bytes} scalar + shift }};
    crucible_execute_func [ret_ptr, scalar_ptr];
    ret <- crucible_fresh_var "ret" POINTonE1_type;
    crucible_points_to ret_ptr (crucible_term ret);
    crucible_postcond {{ affinify E (POINTonE1_abs ret) ==
                          e1_scalar_mult (scalar_value`{bits,n_bytes} scalar) BP }} ;
    };

blst_sk_to_pk_in_g1_ov <- custom_verify "blst_sk_to_pk_in_g1"
    [POINTonE1_mult_w5_sk_ov]
    blst_sk_to_pk_in_g1_spec
    // We cannot just go with "affinify" uninterpreted, as it is higher-order
    do { simplify (addsimps BLS12_381_G1_thms (cryptol_ss() ) );
         w4_unint_z3 (concat fp_unints
                             ["POINTonE1_invariant", "POINTonE1_abs", "e1_order" // , "affinify", "E"
                             , "scalar_value", "e1_scalar_mult"]); };


let blst_sk_to_pk_in_g2_spec = do {
    let n_bytes = 32;
    let bits = 255;
    ret_ptr <- crucible_alloc POINTonE2_type;
    scalar_ptr <- crucible_alloc_readonly_aligned 8 (llvm_array n_bytes (llvm_int 8));
    scalar <- crucible_fresh_var "scalar" (llvm_array n_bytes (llvm_int 8));
    crucible_points_to scalar_ptr (crucible_term scalar);
    // extra precondition from POINTonE2_mult_w5
    crucible_precond {{ e2_order BP' > scalar_value`{bits,n_bytes} scalar + shift }};
    crucible_execute_func [ret_ptr, scalar_ptr];
    ret <- crucible_fresh_var "ret" POINTonE2_type;
    crucible_points_to ret_ptr (crucible_term ret);
    crucible_postcond {{ affinify E' (POINTonE2_abs ret) ==
                          e2_scalar_mult (scalar_value`{bits,n_bytes} scalar) BP' }} ;
    };

blst_sk_to_pk_in_g2_ov <- custom_verify "blst_sk_to_pk_in_g2"
    [POINTonE2_mult_w5_sk_ov]
    blst_sk_to_pk_in_g2_spec
    // We cannot just go with "affinify" uninterpreted, as it is higher-order
    do { simplify (addsimps BLS12_381_G2_thms (cryptol_ss() ) );
         w4_unint_z3 (concat fp_unints
                             ["POINTonE2_invariant", "POINTonE2_abs", "e2_order" // , "affinify", "E"
                             , "scalar_value", "e2_scalar_mult"]); };
