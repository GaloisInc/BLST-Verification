/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

include "blst_error.saw";

import "../spec/Serialization.cry";
EC <- cryptol_load "../spec/ShortWeierstrassCurve.cry";
import "../Parameters.cry";
import "../spec/implementation/Types.cry";
import "../spec/Maybe.cry";
import "../spec/implementation/CurveOperation.cry";
import "../spec/implementation/serialization.cry";

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

// The main specification here is for blst_p1_uncompress

let blst_p1_uncompress_OK_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Uncompress_in" (llvm_array 48 (llvm_int 8));
  crucible_precond {{ uncompress_E1_imp inp != nothing }};
  crucible_execute_func [out_ptr, in_ptr];

  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_return (crucible_term ret);
  crucible_points_to out_ptr (crucible_term {{
    POINTonE1_affine_rep (if (inp@0)@1 // infinity bit // was uncompress_E1_imp inp == just (point_O E)
                          then point_O E
                          else uncompress_E1_OK inp) }});
  // the return still might be BLST_POINT_NOT_IN_GROUP rather than BLST_SUCCESS
};

// The proof is a compostional verification, in 3 stages: first proofs about POINTonE1_Uncompress_BE,
// then proofs about  POINTonE1_Uncompress, and finally the proof of blst_p1_uncompress.

// POINTonE1_Uncompress_BE has two different error conditions, which we deal with by having
// three different specifications and overrides, one for each error and one for success.

// ... the success case
let POINTonE1_Uncompress_BE_OK_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Uncompress_in" (llvm_array 48 (llvm_int 8));
  // crucible_precond {{ fp_invariant (uncompress_E1_x inp) }};
  crucible_precond {{ uncompress_E1_x inp < `p }};
  crucible_precond {{ is_square_fp (uncompress_E1_y2 inp) }};
  crucible_execute_func [out_ptr, in_ptr];
  crucible_points_to out_ptr (crucible_term {{
     (fp_rep (uncompress_E1_x_fp inp), fp_rep (sqrt_fp (uncompress_E1_y2 inp))) }}) ;
  // This return value is copied from sgn0_pty_mont_384_spec
  crucible_return (crucible_term {{ if sign_F_p (sqrt_fp (uncompress_E1_y2 inp)) then zext 0b10 else (zero:[64]) }});
};

// ... first error case, when the given X coordinate is too large
let POINTonE1_Uncompress_BE_BAD0_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Uncompress_in" (llvm_array 48 (llvm_int 8));
  crucible_precond {{ uncompress_E1_x inp >= `p }};
  crucible_execute_func [out_ptr, in_ptr];
  crucible_return (crucible_term {{ (0:Limb) - `BLST_BAD_ENCODING }} );
};

// ... second error case, when the X coordinate does not belong to a point on the curve
let POINTonE1_Uncompress_BE_BAD1_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Uncompress_in" (llvm_array 48 (llvm_int 8));
  crucible_precond {{ uncompress_E1_x inp < `p }};
  crucible_precond {{ ~ (is_square_fp (uncompress_E1_y2 inp)) }};
  crucible_execute_func [out_ptr, in_ptr];
  crucible_return (crucible_term {{ (0:Limb) - `BLST_POINT_NOT_ON_CURVE }} );
};

// Uncompress

let POINTonE1_Uncompress_OK_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Uncompress_in" (llvm_array 48 (llvm_int 8));

  crucible_precond {{ (inp@0)@0 }}; // only dealing with compressed points
  crucible_precond {{ ~ (inp@0)@1 }}; // not point-at-infinity
  crucible_precond {{ uncompress_E1_x inp < `p }}; // given X is not too big
  crucible_precond {{ is_square_fp (uncompress_E1_y2 inp) }}; // and is on the curve
  crucible_execute_func [out_ptr, in_ptr];
  crucible_points_to out_ptr (crucible_term {{ POINTonE1_affine_rep (uncompress_E1_OK inp) }});
  crucible_return (crucible_term {{ if uncompress_E1_x_fp inp == Fp.field_zero
                                    then `BLST_POINT_NOT_IN_GROUP
                                    else `BLST_SUCCESS: [32] }});
  };

let POINTonE1_Uncompress_inf_OK_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Uncompress_in" (llvm_array 48 (llvm_int 8));

  crucible_precond {{ (inp@0)@0 }}; // only dealing with compressed points
  crucible_precond {{ (inp@0)@1 }}; // point-at-infinity
  crucible_precond {{ ~(inp@0)@2 }}; // sign bit clear
  crucible_precond {{ uncompress_E1_x inp == zero }};

  crucible_execute_func [out_ptr, in_ptr];

  crucible_points_to out_ptr (crucible_term {{ POINTonE1_affine_rep (EC::point_O E) }});
  crucible_return (crucible_term {{ `BLST_SUCCESS: [32] }});
};

let POINTonE1_Uncompress_inf_BAD_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Uncompress_in" (llvm_array 48 (llvm_int 8));

  crucible_precond {{ (inp@0)@0 }}; // only dealing with compressed points
  crucible_precond {{ (inp@0)@1 }}; // point-at-infinity
  crucible_precond {{ (inp@0)@2 \/ uncompress_E1_x inp != zero }};

  crucible_execute_func [out_ptr, in_ptr];

  crucible_return (crucible_term {{ `BLST_BAD_ENCODING: [32] }});
};

// We do not care about specific error codes, so...
let POINTonE1_Uncompress_BAD_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Uncompress_in" (llvm_array 48 (llvm_int 8));
  crucible_precond {{ ~ (inp@0)@1 }}; // not point-at-infinity
  crucible_precond {{    ~ (inp@0)@0
                      \/ uncompress_E1_x inp >= `p
                      \/ ~ is_square_fp (uncompress_E1_y2 inp) }}; // and is on the curve
  crucible_execute_func [out_ptr, in_ptr];
  ret <- crucible_fresh_var "ret_POINTonE1_Uncompress" (llvm_int 32);
  crucible_return (crucible_term {{ ret }});
  crucible_postcond {{ ret != `BLST_SUCCESS }};
  };

let POINTonE1_Uncompress_BAD1_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Uncompress_in" (llvm_array 48 (llvm_int 8));
  crucible_precond {{ ~ (inp@0)@0 }}; // not compressed
  crucible_execute_func [out_ptr, in_ptr];
  ret <- crucible_fresh_var "ret_POINTonE1_Uncompress" (llvm_int 32);
  crucible_return (crucible_term {{ ret }});
  crucible_postcond {{ ret == `BLST_BAD_ENCODING }};
  };

// ... Deserialize (out of scope; the BLS ciphersuites use compression)
// but some analysis is included here in case we want to include these functions later.

let POINTonE1_Deserialize_BE_BAD0_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Deserialize_in" (llvm_array 96 (llvm_int 8));
  // crucible_precond {{ deserialize_E1_x inp >= `p \/ deserialize_E1_y inp < `p }}; // given X or Y is too big
  crucible_precond {{ deserialize_E1_x inp >= `p }}; // given X is too big
  crucible_execute_func [out_ptr, in_ptr];
  crucible_return (crucible_term {{ `BLST_BAD_ENCODING: [32] }});
  };

let POINTonE1_Deserialize_BE_BAD0a_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Deserialize_in" (llvm_array 96 (llvm_int 8));
  // crucible_precond {{ deserialize_E1_x inp >= `p \/ deserialize_E1_y inp < `p }}; // given X or Y is too big
  crucible_precond {{ deserialize_E1_y inp >= `p }}; // given Y is too big
  crucible_execute_func [out_ptr, in_ptr];
  crucible_return (crucible_term {{ `BLST_BAD_ENCODING: [32] }});
  };

let POINTonE1_Deserialize_BE_BAD1_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Deserialize_in" (llvm_array 96 (llvm_int 8));
  crucible_precond {{ deserialize_E1_x inp < `p }}; // given X is not too big
  crucible_precond {{ deserialize_E1_y inp < `p }}; // given Y is not too big
  crucible_precond {{ ~ (is_point_affine E (deserialize_E1_x_fp inp, deserialize_E1_y_fp inp)) }}; // not on curve
  crucible_execute_func [out_ptr, in_ptr];
  crucible_return (crucible_term {{ `BLST_POINT_NOT_ON_CURVE: [32] }});
  };

let POINTonE1_Deserialize_BE_OK_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Deserialize_in" (llvm_array 96 (llvm_int 8));
  crucible_precond {{ deserialize_E1_x inp < `p }}; // given X is not too big
  crucible_precond {{ deserialize_E1_y inp < `p }}; // given Y is not too big
  crucible_precond {{ is_point_affine E (deserialize_E1_x_fp inp, deserialize_E1_y_fp inp) }}; // on the curve
  crucible_execute_func [out_ptr, in_ptr];
  crucible_points_to out_ptr (crucible_term {{
     (fp_rep (deserialize_E1_x_fp inp), fp_rep (deserialize_E1_y_fp inp)) }} );
  };

let POINTonE1_Deserialize_BE_OK_spec' = do { // For proof debugging
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  (inp, in_ptr) <- ptr_to_fresh_readonly "POINTonE1_Deserialize_in" (llvm_array 96 (llvm_int 8));
  crucible_precond {{ deserialize_E1_x inp < `p }}; // given X is not too big
  crucible_precond {{ deserialize_E1_y inp < `p }}; // given Y is not too big
  crucible_precond {{ is_point_affine E (deserialize_E1_x_fp inp, deserialize_E1_y_fp inp) }}; // on the curve
  crucible_execute_func [out_ptr, in_ptr];
  w <- crucible_fresh_var "w" (llvm_struct "struct.POINTonE1_affine");
  crucible_points_to out_ptr (crucible_term w);
  crucible_postcond {{ w.1 == fp_rep (deserialize_E1_y_fp inp) }};
  // {{ w.0 ==  fp_rep (deserialize_E1_x_fp inp) }} ?
  };

// just to try:
let blst_p1_deserialize_inf_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1_affine");
  inp <- crucible_fresh_var "p1_deserialize_in" (llvm_array 96 (llvm_int 8));
  in_ptr <- crucible_alloc_readonly (llvm_array 96 (llvm_int 8));
  crucible_points_to_untyped in_ptr (crucible_term inp);
  crucible_precond {{ inp@0 && 0x80 == zero }}; // not compressed
  crucible_precond {{ inp@0 && 0x40 != zero }}; // point at infinity

  crucible_execute_func [out_ptr, in_ptr];

  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE1_affine");
  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_conditional_points_to {{ ret == `BLST_SUCCESS }} out_ptr (crucible_term new_out);
  crucible_postcond {{ inp@0 && 0x40 != zero /\ ([inp@0 && 0x3F]#(tail inp)) == zero ==> ret == `BLST_SUCCESS /\ new_out.0 == vec384_rep (from_Fp (EC::point_O E).0) /\ new_out.1 == vec384_rep (from_Fp (EC::point_O E).1) }}; // TODO spec says 0x1F and not 0x3F
  crucible_return (crucible_term ret);
};

// ... other overrides used in the proofs:

// Not necessary, but useful when developing a proof, to keep the SAW
// formulas more readable.  This override also appears in keygen.saw: TODO refactor
let limbs_from_be_bytes_spec48 = do {
  ret_p <-crucible_alloc (llvm_array 6 limb_type);
  (inx, in_ptr) <- ptr_to_fresh_readonly "limbs_from_be_bytes_in"
                   (llvm_array 48 (llvm_int 8)); // "in" is a keyword
  crucible_execute_func [ret_p, in_ptr, crucible_term {{ 48:[64] }}];
  crucible_points_to ret_p (crucible_term {{ vec384_rep (join inx) }});
  };

let blst_p2_deserialize_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2_affine");
  (_, in_ptr) <- ptr_to_fresh_readonly "in" (llvm_array 192 (llvm_int 8));
  crucible_execute_func [out_ptr, in_ptr];
  new_out <- crucible_fresh_var "new_out" (llvm_struct "struct.POINTonE2_affine");
  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_conditional_points_to {{ ret == zero }} out_ptr (crucible_term new_out);
  crucible_return (crucible_term ret);
};

let {{
  add_rep a = if vec384_abs a < `p then a else vec384_rep ((vec384_abs a) - `p)
  }};

let add_fp_noabs_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  crucible_precond {{ b == zero }}; // make sure this override is applied only where we want it.

  crucible_execute_func [ret_ptr, a_ptr, b_ptr];
  crucible_points_to ret_ptr (crucible_term {{ add_rep a }});
  //  {{ if vec384_abs a < `p then a else vec384_rep ((vec384_abs a) - `p) }}) ;
};

let sgn0_pty_mont_384_spec = do {
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_precond {{ b == vec384_rep `p }};
  crucible_execute_func [a_ptr, b_ptr, crucible_term {{0x89f3fffcfffcfffd}}];
  return_value <- crucible_fresh_var "return_value" limb_type;
  // TODO: Not sure what the return value should be. From what follows in the C code, it seems that the sign bit is the second bit of the return value.
  crucible_return (crucible_term {{ (if (sign_F_p (fp_abs a)) then (zext 0b10) else zero):[64] }});
};

////////////////////////////////////////////////////////////////////////////////
// Proofs
////////////////////////////////////////////////////////////////////////////////

// Lemmas for mul_to_fp_thm proof

Vec384_less_thm <- prove_cryptol
  {{ \(x:[384]) y -> (x < y) == (toInteger x < toInteger y) }}
  [];
fp_invariant_thm <- custom_prove_cryptol
  {{ \x -> fp_invariant x == to_Fp (vec384_abs x) < `p }}
  do {
    unfolding ["fp_invariant"];
    simplify (addsimp Vec384_less_thm empty_ss);
    w4_unint_z3 [];
  };

// Starting with proofs that the as-implemented algorithm matches the reference specification
// as-implemented has an additional check

// We have a conditional property
//  {{ \x -> fp_invariant x ==> Fp.mul (fp_abs x,  montgomery_factor_p) == to_Fp (vec384_abs x) }}
// expressed as this conditional rewrite rule:
mul_to_fp_thm <- custom_prove_cryptol
  {{ \x -> Fp.mul (fp_abs x, montgomery_factor_p) ==
           if fp_invariant x
           then to_Fp (vec384_abs x)
           else apply Fp.mul (fp_abs x,  montgomery_factor_p) }}
  do {
    simplify (addsimp fp_invariant_thm empty_ss);
    w4_unint_z3 [];
  };

// "uncompress_OK" is the correct value in the non-infinity case

prove_cryptol
  {{ \ s ->    (s@0)@1 // infinity bit is set, or
            \/ maybe_cases (uncompress_E1_imp s)
                           True // the input is rejected
                           (\ p -> p == (uncompress_E1_OK s) ) }} // or accepted, giving the OK values
  (concat ["sqrt_fp", "sign_F_p", "is_square_fp"] fp_unints);

// The implementation must reject at least everything rejected by the spec
// (implied by the theorem that follows)
custom_prove_cryptol
  {{ \s -> uncompress_E1 s == nothing ==> uncompress_E1_imp s == nothing }}
  do { unfolding ["uncompress_E1", "uncompress_E1_imp", "uncompress_E1_x"
                 , "uncompress_E1_x_fp", "uncompress_E1_y2"];
       simplify (addsimp mul_to_fp_thm fp_simpset);
       simplify (addsimps fp_alg_thms empty_ss); // resolve mul(sq x, x) vs mul (x, sq x)
       unfolding ["fp_invariant"];
       w4_unint_z3 (concat ["sqrt_fp", "sign_F_p", "is_square_fp"] fp_unints);
       };

// The implementation may reject more strings, but otherwise agrees with the spec:
custom_prove_cryptol
  {{ \s -> maybe_cases (uncompress_E1_imp s)
                      True // may reject more
                      (\ P -> maybe_cases (uncompress_E1 s)
                                          False // may not reject less
                                          (\ Q -> P == Q)) }} ;  // spec and impl deliver the same result
  do { unfolding ["uncompress_E1", "uncompress_E1_imp", "uncompress_E1_x"
                 , "uncompress_E1_x_fp", "uncompress_E1_y2"];
       simplify (addsimp mul_to_fp_thm fp_simpset);
       simplify (addsimps fp_alg_thms empty_ss); // resolve mul(sq x, x) vs mul (x, sq x)
       unfolding ["fp_invariant"];
       w4_unint_z3 (concat ["sqrt_fp", "sign_F_p", "is_square_fp"] fp_unints);
       };

// Now the code proofs

add_fp_noabs_ov <- admit "add_fp" add_fp_noabs_spec;

sgn0_pty_mont_384_ov <- admit "sgn0x_pty_mont_384" sgn0_pty_mont_384_spec;

limbs_from_be_bytes_48_ov <- verify "limbs_from_be_bytes" [] limbs_from_be_bytes_spec48;

blst_p1_deserialize_inf_ov <- verify "blst_p1_deserialize" [] blst_p1_deserialize_inf_spec;

add_rep_invariant_thm <- prove_cryptol
 {{ \ x -> fp_invariant x == (x == add_rep x) }}
 [];

let overrides_for_POINTonE1_Uncompress_BE =
   foldr concat [sqrt_fp_ovs, fp_overrides]
         [sgn0_pty_mont_384_ov, add_fp_noabs_ov, limbs_from_be_bytes_48_ov, vec_is_equal_48_vec_ov];

POINTonE1_Uncompress_BE_BAD0_ov <- custom_verify "POINTonE1_Uncompress_BE"
  overrides_for_POINTonE1_Uncompress_BE
  POINTonE1_Uncompress_BE_BAD0_spec
  do { apply_fp_rewrites;
       unfolding ["fp_invariant", "vec384_abs", "vec_abs"]; // evaluate this for BLS12_381_RR
       w4_unint_z3 fp_unints;};


// Cryptol can evaluate:fp_rep (montgomery_factor_p)
// [0xf4df1f341c341746, 0x0a76e6a609d104f1, 0x8de5476c4c95b6d5,
//  0x67eb88a9939d83c0, 0x9a793e85b519952d, 0x11988fe592cae3aa]

fp_abs_RR_thm <- prove_cryptol
 (rewrite (cryptol_ss ())
  {{ fp_abs [ 0xf4df1f341c341746, 0x0a76e6a609d104f1, 0x8de5476c4c95b6d5
            , 0x67eb88a9939d83c0, 0x9a793e85b519952d, 0x11988fe592cae3aa]
      == montgomery_factor_p }})
  [] ;

fp_inv_RR_thm <- prove_cryptol
  (rewrite (cryptol_ss ())
   {{ fp_invariant [ 0xf4df1f341c341746, 0x0a76e6a609d104f1, 0x8de5476c4c95b6d5
                   , 0x67eb88a9939d83c0, 0x9a793e85b519952d, 0x11988fe592cae3aa]
       == True }})
  [] ;

// Cryptol also can produce the value of `B_E1`:
//implementation::Field> fp_rep (to_Fp 4)
//[0xaa270000000cfff3, 0x53cc0032fc34000a, 0x478fe97a6b0a807f,
// 0xb1d37ebee6ba24d7, 0x8ec9733bbf78ab2f, 0x09d645513d83de7e]

fp_abs_B_E1_thm <- prove_cryptol
  (rewrite (cryptol_ss ())
   {{ fp_abs [ 0xaa270000000cfff3, 0x53cc0032fc34000a, 0x478fe97a6b0a807f
             , 0xb1d37ebee6ba24d7, 0x8ec9733bbf78ab2f, 0x09d645513d83de7e]
      == to_Fp 0x4 }}) [];

fp_invariant_B_E1_thm <- prove_cryptol
  (rewrite (cryptol_ss ())
   {{ fp_invariant [ 0xaa270000000cfff3, 0x53cc0032fc34000a, 0x478fe97a6b0a807f
                   , 0xb1d37ebee6ba24d7, 0x8ec9733bbf78ab2f, 0x09d645513d83de7e]
      == True }}) [];

POINTonE1_Uncompress_BE_BAD1_ov <- custom_verify "POINTonE1_Uncompress_BE"
  overrides_for_POINTonE1_Uncompress_BE
  POINTonE1_Uncompress_BE_BAD1_spec
  do { apply_fp_rewrites;
       simplify (addsimps [fp_abs_RR_thm, fp_inv_RR_thm, fp_abs_B_E1_thm, fp_invariant_B_E1_thm] empty_ss);
       simplify (addsimp add_rep_invariant_thm empty_ss); // only after applying fp_inv_RR_thm!
       w4_unint_z3 fp_unints;};

// The OK case, proper compressed input
POINTonE1_Uncompress_BE_OK_ov <- custom_verify "POINTonE1_Uncompress_BE"
  overrides_for_POINTonE1_Uncompress_BE
  POINTonE1_Uncompress_BE_OK_spec
  do { apply_fp_rewrites;
       simplify (addsimps [fp_abs_RR_thm, fp_inv_RR_thm, fp_abs_B_E1_thm, fp_invariant_B_E1_thm] empty_ss);
       simplify (addsimp add_rep_invariant_thm empty_ss); // only after applying fp_inv_RR_thm!
       w4_unint_z3 fp_unints;};

let POINTonE1_Uncompress_BE_overrides =
  [POINTonE1_Uncompress_BE_OK_ov, POINTonE1_Uncompress_BE_BAD0_ov, POINTonE1_Uncompress_BE_BAD1_ov];

// Uncompress

POINTonE1_Uncompress_inf_BAD_ov <- verify_unint "POINTonE1_Uncompress" [] fp_unints
                                   POINTonE1_Uncompress_inf_BAD_spec;

POINTonE1_Uncompress_inf_OK_ov <- verify "POINTonE1_Uncompress" [] POINTonE1_Uncompress_inf_OK_spec ;

POINTonE1_Uncompress_OK_ov <- custom_verify
  "POINTonE1_Uncompress"
  (foldr concat [fp_overrides, vec_overrides] POINTonE1_Uncompress_BE_overrides)
  POINTonE1_Uncompress_OK_spec
  do {apply_fp_rewrites;
    w4_unint_z3 (concat ["sign_F_p", "uncompress_E1_y2", "uncompress_E1_x_fp"
                        , "is_square_fp", "uncompress_E1_x"]
                        fp_unints);};

POINTonE1_Uncompress_BAD_ov <- custom_verify
  "POINTonE1_Uncompress"
  (foldr concat [fp_overrides, vec_overrides] POINTonE1_Uncompress_BE_overrides)
  POINTonE1_Uncompress_BAD_spec
  do {apply_fp_rewrites;
    w4_unint_z3 (concat ["sign_F_p", "uncompress_E1_y2", "uncompress_E1_x_fp"
                        , "is_square_fp", "uncompress_E1_x"]
                        fp_unints);};

POINTonE1_Uncompress_BAD1_ov <- custom_verify
  "POINTonE1_Uncompress"
  (foldr concat [fp_overrides, vec_overrides] POINTonE1_Uncompress_BE_overrides)
  POINTonE1_Uncompress_BAD1_spec
  do {apply_fp_rewrites;
    w4_unint_z3 (concat ["sign_F_p", "uncompress_E1_y2", "uncompress_E1_x_fp"
                        , "sqrt_fp", "is_square_fp", "uncompress_E1_x"]
                        fp_unints);};


// Main result: blst_p1_uncompress

point_O_rep <- prove_cryptol
  {{ POINTonE1_affine_rep (point_O E) == zero }}
  [];

hoist_POINTonE1_affine_rep <- prove_cryptol
  (rewrite (cryptol_ss())
    {{ \c p1 p2 -> POINTonE1_affine_rep (if c then p1 else p2) ==
                   if c then POINTonE1_affine_rep p1 else POINTonE1_affine_rep p2 }})
  ["POINTonE1_affine_rep"];

blst_p1_uncompress_OK_ov <- custom_verify "blst_p1_uncompress"
  [ POINTonE1_Uncompress_OK_ov //, POINTonE1_Uncompress_BAD_ov, POINTonE1_Uncompress_BAD1_ov
  , POINTonE1_Uncompress_inf_OK_ov] // ,  POINTonE1_Uncompress_inf_BAD_ov]
  blst_p1_uncompress_OK_spec
  do {
    unfolding ["uncompress_E1_imp", "uncompress_E1_x"];
    simplify fp_simpset;
    simplify (addsimps [point_O_rep, hoist_POINTonE1_affine_rep]  empty_ss);
    w4_unint_z3 (concat ["sign_F_p", "sqrt_fp", "is_square_fp"] fp_unints);
    };

// Deserialize

POINTonE1_Deserialize_BE_BAD0_ov <- custom_verify
  "POINTonE1_Deserialize_BE"
  (foldr concat [fp_overrides, vec_overrides]
         [POINTonE1_affine_on_curve_ov, add_fp_noabs_ov, limbs_from_be_bytes_48_ov, vec_is_equal_48_vec_ov])
  POINTonE1_Deserialize_BE_BAD0_spec
  do {apply_fp_rewrites;
      simplify (addsimps [fp_abs_RR_thm, fp_inv_RR_thm] empty_ss);
      simplify (addsimp add_rep_invariant_thm empty_ss);
      unfolding ["POINTonE1_affine_invariant"];
      apply_fp_rewrites;
      (w4_unint_z3 fp_unints);};

POINTonE1_Deserialize_BE_BAD0a_ov <- custom_verify
  "POINTonE1_Deserialize_BE"
  (foldr concat [fp_overrides, vec_overrides]
         [POINTonE1_affine_on_curve_ov, add_fp_noabs_ov, limbs_from_be_bytes_48_ov, vec_is_equal_48_vec_ov])
  POINTonE1_Deserialize_BE_BAD0a_spec
  do {apply_fp_rewrites;
      simplify (addsimps [fp_abs_RR_thm, fp_inv_RR_thm] empty_ss);
      simplify (addsimp add_rep_invariant_thm empty_ss);
      unfolding ["POINTonE1_affine_invariant"];
      apply_fp_rewrites;
      (w4_unint_z3 fp_unints);};
