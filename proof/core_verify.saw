/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/
///////////////////////////////////////////////////////////////////////////////
// Imports
///////////////////////////////////////////////////////////////////////////////

include "helpers.saw";
include "list_utils.saw";
include "types.saw";

m <- llvm_load_module "../build/llvm/libblst.a.bc";
let do_prove = false;
include "proof-helpers.saw";

include "assembly_overrides.saw";
include "ec_opts.saw";
include "fp12_tower.saw";

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

let blst_core_verify_pk_in_g1_spec aug_len msg_len DST_len = do {
  (_, pk_ptr) <- ptr_to_fresh_readonly "pk" (llvm_struct "struct.POINTonE1_affine");
  (_, signature_ptr) <- ptr_to_fresh_readonly "signature" (llvm_struct "struct.POINTonE2_affine");
  hash_or_encode <- crucible_fresh_var "hash_or_encode" (llvm_int 32);
  (_, sk_ptr) <- ptr_to_fresh_readonly "SK" pow256_type;
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (_, dst_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  crucible_execute_func [pk_ptr, signature_ptr, crucible_term hash_or_encode, msg_ptr, crucible_term {{ `msg_len : [64] }}, dst_ptr, crucible_term {{ `DST_len : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}];
  ret <- crucible_fresh_var "ret" (llvm_int 32); // TODO: is that right?
  crucible_return (crucible_term ret);
};

let blst_core_verify_pk_in_g2_spec aug_len msg_len DST_len = do {
  (_, pk_ptr) <- ptr_to_fresh_readonly "pk" (llvm_struct "struct.POINTonE2_affine");
  (_, signature_ptr) <- ptr_to_fresh_readonly "signature" (llvm_struct "struct.POINTonE1_affine");
  hash_or_encode <- crucible_fresh_var "hash_or_encode" (llvm_int 32);
  (_, sk_ptr) <- ptr_to_fresh_readonly "SK" pow256_type;
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (_, dst_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  crucible_execute_func [pk_ptr, signature_ptr, crucible_term hash_or_encode, msg_ptr, crucible_term {{ `msg_len : [64] }}, dst_ptr, crucible_term {{ `DST_len : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}];
  ret <- crucible_fresh_var "ret" (llvm_int 32); // TODO: is that right?
  crucible_return (crucible_term ret);
};

let hash_to_field_spec nelems aug_len msg_len DST_len = do {
  elems_ptr <- crucible_alloc (llvm_array nelems vec384_type);
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (_, DST_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  crucible_execute_func [elems_ptr, crucible_term {{ `nelems : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}, msg_ptr, crucible_term {{ `msg_len : [64] }}, DST_ptr, crucible_term {{ `DST_len : [64] }}];
  new_hash_to_field_elems <- crucible_fresh_var "new_elems" (llvm_array nelems vec384_type);
  crucible_points_to elems_ptr (crucible_term new_hash_to_field_elems);
};

let map_to_g2_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, u_ptr) <- ptr_to_fresh_readonly "u" vec384x_type;
  (_, v_ptr) <- ptr_to_fresh_readonly "v" vec384x_type;
  crucible_execute_func [out_ptr, u_ptr, v_ptr];
  new_map_to_g2_out <- crucible_fresh_var "new_map_to_g2_out" (llvm_struct "struct.POINTonE2");
  crucible_points_to out_ptr (crucible_term new_map_to_g2_out);
};

let map_to_g2_v_null_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, u_ptr) <- ptr_to_fresh_readonly "u" vec384x_type;
  crucible_execute_func [out_ptr, u_ptr, crucible_null];
  new_map_to_g2_out <- crucible_fresh_var "new_map_to_g2_out" (llvm_struct "struct.POINTonE2");
  crucible_points_to out_ptr (crucible_term new_map_to_g2_out);
};

let miller_loop_n_spec n = do {
  ret_ptr <- crucible_alloc vec384fp12_type;
  (_, Q_ptr) <- ptr_to_fresh_readonly "Q" (llvm_array n (llvm_struct "struct.POINTonE2_affine"));
  (_, P_ptr) <- ptr_to_fresh_readonly "P" (llvm_array n (llvm_struct "struct.POINTonE1_affine"));
  crucible_execute_func [ret_ptr, Q_ptr, P_ptr, crucible_term {{ `n:[64] }}];
  new_miller_loop_n_ret <- crucible_fresh_var "new_miller_loop_n_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_miller_loop_n_ret);
};

let start_dbl_n_spec n = do {
  ret_ptr <- crucible_alloc vec384fp12_type;
  //(_, ret_ptr) <- ptr_to_fresh "ret" vec384fp12_type;
  //T_ptr <- crucible_alloc (llvm_array n (llvm_struct "struct.POINTonE2"));
  (_, T_ptr) <- ptr_to_fresh "T" (llvm_array n (llvm_struct "struct.POINTonE2"));
  (_, Px2_ptr) <- ptr_to_fresh_readonly "Px2" (llvm_array n (llvm_struct "struct.POINTonE1_affine"));
  crucible_execute_func [ret_ptr, T_ptr, Px2_ptr, crucible_term {{ `n:[64] }}];
  new_start_dbl_n_ret <- crucible_fresh_var "new_start_dbl_n_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_start_dbl_n_ret);
  new_start_dbl_n_T <- crucible_fresh_var "new_start_dbl_n_T" (llvm_array n (llvm_struct "struct.POINTonE2"));
  crucible_points_to T_ptr (crucible_term new_start_dbl_n_T);
};

let add_n_dbl_n_spec n k = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384fp12_type;
  //T_ptr <- crucible_alloc (llvm_array n (llvm_struct "struct.POINTonE2"));
  (_, T_ptr) <- ptr_to_fresh "T" (llvm_array n (llvm_struct "struct.POINTonE2"));
  (_, Q_ptr) <- ptr_to_fresh_readonly "Q" (llvm_array n (llvm_struct "struct.POINTonE2_affine"));
  (_, Px2_ptr) <- ptr_to_fresh_readonly "Px2" (llvm_array n (llvm_struct "struct.POINTonE1_affine"));
  crucible_execute_func [ret_ptr, T_ptr, Q_ptr, Px2_ptr, crucible_term {{ `n:[64] }}, crucible_term {{ `k:[64] }}];
  new_start_dbl_n_ret <- crucible_fresh_var "new_start_dbl_n_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_start_dbl_n_ret);
  new_start_dbl_n_T <- crucible_fresh_var "new_start_dbl_n_T" (llvm_array n (llvm_struct "struct.POINTonE2"));
  crucible_points_to T_ptr (crucible_term new_start_dbl_n_T);
};

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

let aug_len = 48;
let msg_len = 32;
let dst_len = 8;

// NOTE: the following 3 overrides are not necessary and were created while debugging; they could nevertheless be useful in the future.
let make_add_n_dbl_n_ov k = verify "add_n_dbl_n" (foldr concat [ec_ops_overrides, assembly_overrides, fp12_tower_ovs] []) (add_n_dbl_n_spec 1 k); // TODO: how to iterate on both n and k?
add_n_dbl_n_ovs <- for [2,3,9,32,16] make_add_n_dbl_n_ov; // sizes come from C source code

let make_start_dbl_n_ov n = verify "start_dbl_n" (foldr concat [ec_ops_overrides, assembly_overrides, fp12_tower_ovs] []) (start_dbl_n_spec n);
start_dbl_n_ovs <- for (from_to 1 1) make_start_dbl_n_ov; // TODO: what is a good range for n?

let make_miller_loop_n_ov n = verify "miller_loop_n" (foldr concat [add_n_dbl_n_ovs, start_dbl_n_ovs, ec_ops_overrides, assembly_overrides, fp12_tower_ovs] []) (miller_loop_n_spec n);
miller_loop_n_ovs <- for (from_to 1 1) make_miller_loop_n_ov; // TODO: what is a good range for n?

// NOTE: not needed if we override hash_to_field:
//include "sha_overrides.saw";
//block_data_order_ovs <- make_block_data_order_ovs [aug_len, msg_len, dst_len];
//let sha_assembly_overrides = concat [blst_sha256_emit_ov, blst_sha256_hcopy_ov] block_data_order_ovs;

let make_hash_to_field_ov n = verify "hash_to_field" [] (hash_to_field_spec n aug_len msg_len dst_len); // TODO: verify for real
hash_to_field_ovs <- for [1,2,4] make_hash_to_field_ov; // NOTE: how to do this with a lambda?

map_to_g2_ov <- verify "map_to_g2" (foldr concat [ec_ops_overrides, assembly_overrides, fp12_tower_ovs] []) map_to_g2_spec;
map_to_g2_v_null_ov <- verify "map_to_g2" (foldr concat [ec_ops_overrides, assembly_overrides, fp12_tower_ovs] []) map_to_g2_v_null_spec;

let overrides_pk_in_g1 = foldr concat [miller_loop_n_ovs, [map_to_g2_v_null_ov, map_to_g2_ov], hash_to_field_ovs, ec_ops_overrides, assembly_overrides, fp12_tower_ovs] [];
//let overrides = concat sha_assembly_overrides (concat ec_ops_overrides assembly_overrides);

blst_core_verify_pk_in_g1_ov <- verify "blst_core_verify_pk_in_g1" overrides_pk_in_g1 (blst_core_verify_pk_in_g1_spec aug_len msg_len dst_len); // NOTE: takes a long time

let overrides_pk_in_g2 = foldr concat [miller_loop_n_ovs, hash_to_field_ovs, ec_ops_overrides, assembly_overrides, fp12_tower_ovs] [];
//let overrides = concat sha_assembly_overrides (concat ec_ops_overrides assembly_overrides);

blst_core_verify_pk_in_g2_ov <- really_verify "blst_core_verify_pk_in_g2" overrides_pk_in_g2 (blst_core_verify_pk_in_g2_spec aug_len msg_len dst_len); // NOTE: takes a long time
