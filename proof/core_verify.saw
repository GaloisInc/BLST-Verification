/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

// TODO: overlap with aggregate.saw

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

let map_to_g2_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, u_ptr) <- ptr_to_fresh_readonly "u" vec384x_type;
  (_, v_ptr) <- ptr_to_fresh_readonly "v" vec384x_type;
  crucible_execute_func [out_ptr, u_ptr, v_ptr];
  new_map_to_g2_out <- crucible_fresh_var "new_map_to_g2_out" (llvm_struct "struct.POINTonE2");
  crucible_points_to out_ptr (crucible_term new_map_to_g2_out);
};

let map_to_g2_v_null_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE2");
  (_, u_ptr) <- ptr_to_fresh_readonly "u" vec384x_type;
  crucible_execute_func [out_ptr, u_ptr, crucible_null];
  new_map_to_g2_out <- crucible_fresh_var "new_map_to_g2_out" (llvm_struct "struct.POINTonE2");
  crucible_points_to out_ptr (crucible_term new_map_to_g2_out);
};

let map_to_g1_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1");
  (_, u_ptr) <- ptr_to_fresh_readonly "u" vec384_type;
  (_, v_ptr) <- ptr_to_fresh_readonly "v" vec384_type;
  crucible_execute_func [out_ptr, u_ptr, v_ptr];
  new_map_to_g1_out <- crucible_fresh_var "new_map_to_g1_out" (llvm_struct "struct.POINTonE1");
  crucible_points_to out_ptr (crucible_term new_map_to_g1_out);
};

let map_to_g1_v_null_spec = do {
  out_ptr <- crucible_alloc (llvm_struct "struct.POINTonE1");
  (_, u_ptr) <- ptr_to_fresh_readonly "u" vec384_type;
  crucible_execute_func [out_ptr, u_ptr, crucible_null];
  new_map_to_g1_out <- crucible_fresh_var "new_map_to_g1_out" (llvm_struct "struct.POINTonE1");
  crucible_points_to out_ptr (crucible_term new_map_to_g1_out);
};

let miller_loop_n_spec n = do {
  ret_ptr <- crucible_alloc vec384fp12_type;
  (_, Q_ptr) <- ptr_to_fresh_readonly "Q" (llvm_array n (llvm_struct "struct.POINTonE2_affine"));
  (_, P_ptr) <- ptr_to_fresh_readonly "P" (llvm_array n (llvm_struct "struct.POINTonE1_affine"));
  crucible_execute_func [ret_ptr, Q_ptr, P_ptr, crucible_term {{ `n:[64] }}];
  new_miller_loop_n_ret <- crucible_fresh_var "new_miller_loop_n_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_miller_loop_n_ret);
};

let miller_loop_n_alias_spec n = do {
  ret_ptr <- crucible_alloc vec384fp12_type;
  (_, Q_ptr) <- ptr_to_fresh_readonly "Q" (llvm_array n (llvm_struct "struct.POINTonE2_affine"));
  (_, P_ptr) <- ptr_to_fresh_readonly "P" (llvm_array n (llvm_struct "struct.POINTonE1_affine"));
  crucible_execute_func [ret_ptr, Q_ptr, P_ptr, crucible_term {{ `n:[64] }}];
  new_miller_loop_n_ret <- crucible_fresh_var "new_miller_loop_n_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_miller_loop_n_ret);
};


let start_dbl_n_spec n = do {
  ret_ptr <- crucible_alloc vec384fp12_type;
  //(_, ret_ptr) <- ptr_to_fresh "ret" vec384fp12_type;
  //T_ptr <- crucible_alloc (llvm_array n (llvm_struct "struct.POINTonE2"));
  (_, T_ptr) <- ptr_to_fresh "T" (llvm_array n (llvm_struct "struct.POINTonE2"));
  (_, Px2_ptr) <- ptr_to_fresh_readonly "Px2" (llvm_array n (llvm_struct "struct.POINTonE1_affine"));
  crucible_execute_func [ret_ptr, T_ptr, Px2_ptr, crucible_term {{ `n:[64] }}];
  new_start_dbl_n_ret <- crucible_fresh_var "new_start_dbl_n_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_start_dbl_n_ret);
  new_start_dbl_n_T <- crucible_fresh_var "new_start_dbl_n_T" (llvm_array n (llvm_struct "struct.POINTonE2"));
  crucible_points_to T_ptr (crucible_term new_start_dbl_n_T);
};

let add_n_dbl_n_spec n k = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384fp12_type;
  //T_ptr <- crucible_alloc (llvm_array n (llvm_struct "struct.POINTonE2"));
  (_, T_ptr) <- ptr_to_fresh "T" (llvm_array n (llvm_struct "struct.POINTonE2"));
  (_, Q_ptr) <- ptr_to_fresh_readonly "Q" (llvm_array n (llvm_struct "struct.POINTonE2_affine"));
  (_, Px2_ptr) <- ptr_to_fresh_readonly "Px2" (llvm_array n (llvm_struct "struct.POINTonE1_affine"));
  crucible_execute_func [ret_ptr, T_ptr, Q_ptr, Px2_ptr, crucible_term {{ `n:[64] }}, crucible_term {{ `k:[64] }}];
  new_add_n_dbl_n_ret <- crucible_fresh_var "new_add_n_dbl_n_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_add_n_dbl_n_ret);
  new_add_n_dbl_n_T <- crucible_fresh_var "new_add_n_dbl_n_T" (llvm_array n (llvm_struct "struct.POINTonE2"));
  crucible_points_to T_ptr (crucible_term new_add_n_dbl_n_T);
};

let final_exp_spec = do {
  ret_ptr <- crucible_alloc vec384fp12_type;
  (_, f_ptr) <- ptr_to_fresh_readonly "f" vec384fp12_type;
  crucible_execute_func [ret_ptr, f_ptr];
  new_ret <- crucible_fresh_var "new_final_exp_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let final_exp_alias_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "f" vec384fp12_type;
  crucible_execute_func [ret_ptr, ret_ptr];
  new_ret <- crucible_fresh_var "new_final_exp_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let mul_n_sqr_spec n = do {
  //ret_ptr <- crucible_alloc vec384fp12_type;
  // must be initialized (see the C code):
  (_, ret_ptr) <- ptr_to_fresh "ret" vec384fp12_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec384fp12_type;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term {{`n:[64]}}];
  new_ret <- crucible_fresh_var "new_mul_n_sqr_ret" vec384fp12_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

let blst_core_verify_pk_in_g1_spec aug_len msg_len DST_len = do {
  (_, pk_ptr) <- ptr_to_fresh_readonly "pk" (llvm_struct "struct.POINTonE1_affine");
  (_, signature_ptr) <- ptr_to_fresh_readonly "signature" (llvm_struct "struct.POINTonE2_affine");
  hash_or_encode <- crucible_fresh_var "hash_or_encode" (llvm_int 32);
  (_, sk_ptr) <- ptr_to_fresh_readonly "SK" pow256_type;
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (_, dst_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  crucible_execute_func [pk_ptr, signature_ptr, crucible_term hash_or_encode, msg_ptr, crucible_term {{ `msg_len : [64] }}, dst_ptr, crucible_term {{ `DST_len : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}];
  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_return (crucible_term ret);
};

let blst_core_verify_pk_in_g2_spec aug_len msg_len DST_len = do {
  (_, pk_ptr) <- ptr_to_fresh_readonly "pk" (llvm_struct "struct.POINTonE2_affine");
  (_, signature_ptr) <- ptr_to_fresh_readonly "signature" (llvm_struct "struct.POINTonE1_affine");
  hash_or_encode <- crucible_fresh_var "hash_or_encode" (llvm_int 32);
  (_, sk_ptr) <- ptr_to_fresh_readonly "SK" pow256_type;
  (_, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  (_, dst_ptr) <- ptr_to_fresh_readonly "DST" (llvm_array DST_len (llvm_int 8));
  (_, aug_ptr) <- ptr_to_fresh_readonly "aug" (llvm_array aug_len (llvm_int 8));
  crucible_execute_func [pk_ptr, signature_ptr, crucible_term hash_or_encode, msg_ptr, crucible_term {{ `msg_len : [64] }}, dst_ptr, crucible_term {{ `DST_len : [64] }}, aug_ptr, crucible_term {{ `aug_len : [64] }}];
  ret <- crucible_fresh_var "ret" (llvm_int 32);
  crucible_return (crucible_term ret);
};

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

let overrides = (foldr concat [ec_ops_overrides, assembly_overrides, fp12_tower_ovs] []);

let miller_loop_N_MAX = 3; // NOTE: must match C code

let make_add_n_dbl_n_ov n k = verify "add_n_dbl_n" overrides (add_n_dbl_n_spec n k);
let make_add_n_dbl_n_ovs_n n = for [2,3,9,32,16] (make_add_n_dbl_n_ov n);
add_n_dbl_n_ovs_ <- for (from_to 1 miller_loop_N_MAX) make_add_n_dbl_n_ovs_n;
// TODO: speed this up by overriding the line_* functions? (see add_n_dbl_n in pairing.c)
let add_n_dbl_n_ovs = foldr concat add_n_dbl_n_ovs_ [];

let make_start_dbl_n_ov n = verify "start_dbl_n" overrides (start_dbl_n_spec n);
start_dbl_n_ovs <- for (from_to 1 miller_loop_N_MAX) make_start_dbl_n_ov;

let make_miller_loop_n_ov n = verify "miller_loop_n" (foldr concat [add_n_dbl_n_ovs, start_dbl_n_ovs, ec_ops_overrides, assembly_overrides, fp12_tower_ovs] []) (miller_loop_n_spec n);
miller_loop_n_ovs <- for (from_to 1 miller_loop_N_MAX) make_miller_loop_n_ov;

let make_mul_n_sqr_ov n = verify "mul_n_sqr" overrides (mul_n_sqr_spec n);
mul_n_sqr_ovs <- for [2,3,9,32,15] make_mul_n_sqr_ov;

final_exp_ov <- verify "final_exp" (concat mul_n_sqr_ovs overrides) final_exp_spec;
final_exp_alias_ov <- verify "final_exp" overrides final_exp_alias_spec;

map_to_g2_ov <- verify "map_to_g2" overrides map_to_g2_spec;
map_to_g2_v_null_ov <- verify "map_to_g2" overrides map_to_g2_v_null_spec;

let overrides_pk_in_g1 = foldr concat [miller_loop_n_ovs, hash_to_field_ovs, overrides] [final_exp_alias_ov, final_exp_ov, map_to_g2_v_null_ov, map_to_g2_ov];
blst_core_verify_pk_in_g1_ov <- verify "blst_core_verify_pk_in_g1" overrides_pk_in_g1 (blst_core_verify_pk_in_g1_spec aug_len msg_len DST_len);

map_to_g1_ov <- verify "map_to_g1" overrides map_to_g1_spec;
map_to_g1_v_null_ov <- verify "map_to_g1" overrides map_to_g1_v_null_spec;

let overrides_pk_in_g2 = foldr concat [miller_loop_n_ovs, hash_to_field_ovs, overrides] [final_exp_alias_ov, final_exp_ov, map_to_g1_v_null_ov, map_to_g1_ov];
blst_core_verify_pk_in_g2_ov <- verify "blst_core_verify_pk_in_g2" overrides_pk_in_g2 (blst_core_verify_pk_in_g2_spec aug_len msg_len DST_len);
