/*
 * Copyright (c) 2021 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

let {{
  same_point_affine_E  = same_point_affine E

  /*
   * Point O is in a "bad" form iff it is in the form (0, 0, _) or (_, _, 0),
   * rather than (0, 0, 0):
   */
  is_bad_O_form_E: POINTonE1_t -> Bool
  is_bad_O_form_E P = ((is_point_O E (fp_abs P.0, fp_abs P.1)) /\
                       (fp_abs (P.2) != Fp.field_zero)) \/
                      ((~(is_point_O E (fp_abs P.0, fp_abs P.1))) /\
                       fp_abs (P.2) == Fp.field_zero)
}};

same_point_affine_E_thm <- prove_cryptol
  {{ \P1 P2 -> same_point_affine E P1 P2 == same_point_affine_E P1 P2 }} [];

let vecEq48 = parse_core "vecEq 48 (Vec 8 Bool) (bvEq 8)";
serialize_e1_eq_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P1 P2 -> (vecEq48 (serialize_E1 P1) (serialize_E1 P2)) ==
               if same_point_affine E P1 P2
               then True
               else apply vecEq48 (serialize_E1 P1) (serialize_E1 P2) }})
  ["serialize_E1"];

hoist_if_vecEq48_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \b v1 v2 v3 -> (vecEq48 (if b then v1 else v2) v3) ==
                    (if b then (vecEq48 v1 v3) else (vecEq48 v2 v3)) }}) [];

Fp_div_unit_unit_thm <- prove_cryptol
  {{ Fp.div (Fp.field_unit, Fp.field_unit) == Fp.field_unit }} [];

Fp_normalize_abs_thm <- custom_prove_cryptol
  {{ \x -> Fp.normalize (fp_abs x) == fp_abs x }}
  do {
    simplify (addsimps [fp_abs_normalize_thm, fp_abstract_invariant_thm] empty_ss);
    w4_unint_z3 [];
  };

// The proof of eliminate_normalized_args_affinify_E_thm is a bit intricate:
div_0_fp_lemma_1 <- prove_cryptol {{ \x -> Fp.div(x, Fp.field_zero) == Fp.field_zero }} [];

div_0_fp_lemma_2 <- custom_prove_cryptol
  {{ \x y -> Fp.div(x,y) == if is_zero Fp y then apply Fp.div(x, Fp.field_zero) else apply Fp.div(x,y)}}
  do { unfolding ["is_zero", "apply"]; rw_with_1 fp_is_equal_elim_thm; w4_unint_z3 ["Fp"]; };


div_0_fp_lemma <- custom_prove_cryptol
  {{ \x y -> Fp.div(x,y) == if is_zero Fp y then Fp.field_zero else apply Fp.div(x,y)}}
  do { rw_with_1 div_0_fp_lemma_2;
       unfolding ["apply"];
       rw_with_1 div_0_fp_lemma_1;
       w4_unint_z3 ["Fp"]; };

hoist_fp_mul_arg_thms <- for
  [ {{ \ c x y z -> Fp.mul (if c then x else y, z) == if c then Fp.mul(x,z) else Fp.mul(y,z) }}
  , {{ \ c x y z -> Fp.mul (x, if c then y else z) == if c then Fp.mul(x,y) else Fp.mul(x,z) }}
  ] (\ t -> prove_cryptol (rewrite (cryptol_ss()) t) ["Fp"]);



affinify_E_needs_no_special_case_thm <- custom_prove_cryptol
  {{ \ p -> (affinify E p == (Fp.mul(lambda2, x), Fp.mul(lambda3, y))
    where
        (x,y,z) = p
        lambda = Fp.div (Fp.field_unit, z)
        lambda2 = Fp.sq lambda
        lambda3 = Fp.mul(lambda, lambda2)) }}
  do { unfolding ["affinify", "E", "is_point_O", "same_point_affine", "point_O"];
      rw_with_1 div_0_fp_lemma;
      unfolding ["apply"];
      simplify (addsimps hoist_fp_mul_arg_thms  (addsimps fp_alg_thms fp_simpset));
      w4_unint_z3 fp_unints; };

eliminate_normalized_args_affinify_E_thm <- custom_prove_cryptol
  {{ \ p -> affinify E (normalize_point Fp p) == affinify E p }}
  do {
    rw_with_1 affinify_E_needs_no_special_case_thm;
    unfolding ["E", "normalize_point"];
    simplify fp_simpset;
    w4_unint_z3 fp_unints;
  };

affinify_concrete_z_unit_thm <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> affinify E (POINTonE1_abs P) ==
           if (POINTonE1_invariant P) /\ ((fp_abs P.2) == Fp.field_unit)
           then affinify E (fp_abs P.0, fp_abs P.1, Fp.field_unit)
           else apply affinify E (POINTonE1_abs P) }})
  do {
    unfolding ["apply"];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps remove_ho_rules empty_ss);
    w4_unint_z3 (concat ["fp_abs", "Fp"] ec_mult_unints);
  };


affinify_z_1_thm <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> affinify E (POINTonE1_abs P) ==
           if (POINTonE1_invariant P) /\ ((fp_abs P.2) == Fp.field_unit)
           then (fp_abs P.0, fp_abs P.1)
           else apply affinify E (POINTonE1_abs P) }})
  do {
    simplify (addsimp affinify_concrete_z_unit_thm empty_ss);
    simplify (addsimps [affinify_E_needs_no_special_case_thm] empty_ss);
    unfolding ["apply"];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimp Fp_div_unit_unit_thm empty_ss);
    simplify (addsimps fp_laws empty_ss);
    unfolding ["POINTonE1_invariant"];
    simplify (addsimp Fp_normalize_abs_thm empty_ss);
    simplify (addsimps remove_ho_rules empty_ss);
    w4_unint_z3 (concat ["Fp", "fp_invariant", "fp_abs"] ec_mult_unints);
  };


serialize_e1_affine_thm <- custom_prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> serialize_E1 (fp_abs P.0, fp_abs P.1) ==
           if (POINTonE1_invariant P) /\ (fp_abs (P.2) == Fp.field_unit)
           then serialize_E1 (affinify E (POINTonE1_abs P))
           else apply serialize_E1 (fp_abs P.0, fp_abs P.1) }})
  do {
    simplify (addsimps [affinify_z_1_thm] empty_ss);
    simplify basic_ss;
    simplify (cryptol_ss());
    unfolding ["apply"];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps remove_ho_rules empty_ss);
    w4_unint_z3 ["fp_abs", "serialize_E1", "affinify_E", "POINTonE1_abs"];
  };

// mult and e1_scalar_mult are interchangeable
mult_e1_scalar_mult_thm <- admit_cryptol
  {{ \b P -> mult E b P == e1_scalar_mult (toInt b) P }};

hash_to_curve_arg_expand_thm <- prove_cryptol
  {{ \(x:([32][8],[43][8])) ->
       hash_to_curve_opt_impl x ==
       apply hash_to_curve_opt_impl (([]:[0][8])#x.0, x.1) }} ["hash_to_curve_opt_impl"];


hash_to_curve_e1_impl_thm <- custom_prove_cryptol
  {{ \(x:([32][8],[43][8])) -> HE1::hash_to_curve_opt x == affinify E (hash_to_curve_opt_impl x) }}
  do {
    simplify (addsimp hash_to_curve_arg_expand_thm empty_ss);
    unfolding ["apply"];
    simplify (addsimp hash_to_curve_E1_opt_impl_equiv_ov empty_ss);
    simplify basic_ss;
    w4_unint_z3 ["HashToCurveE1::hash_to_curve_opt"];
  };

O_O_unit_implies_bad_O_form_E <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P -> (is_bad_O_form_E P) ==
           if (is_point_O E (fp_abs P.0, fp_abs P.1)) /\
              (fp_abs (P.2) == Fp.field_unit)
           then True
           else apply is_bad_O_form_E P }}) [];

let boolEq_core = parse_core "boolEq";
and_true_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \b1 b2 -> boolEq_core (and_core b1 b2) (b1 /\ (b2 /\ True)) == True }}) [];

affine_inv_affine_rep_e1_thm <- custom_prove_cryptol
  {{ \P -> POINTonE1_affine_invariant (POINTonE1_affine_rep P) == True }}
  do {
    unfolding [ "POINTonE1_affine_rep" , "POINTonE1_affine_invariant" ];
    rw_with fp_rep_thms;
    w4_unint_z3 [];
  };

// hash_to_curve_opt produces points on the curve
hash_to_g1_opt_on_curve_thm <- admit_cryptol
  {{ \x -> is_point_affine E (HE1::hash_to_curve_opt x) == True }};

hash_to_g1_on_curve_thm <- custom_prove_cryptol
  {{ \(msg:[32][8]) (dst:[43][8]) -> is_point_affine E (affinify E (hash_to_curve_opt_impl (msg,dst))) == True }}
  do {
    rw_with [ hash_to_curve_E1_opt_impl_equiv_ov
            , hash_to_g1_opt_on_curve_thm ];
    w4_unint_z3 [];
  };

// If P is on the curve, then sk * P is on the curve.
e1_scalar_mult_on_curve_thm <- admit_cryptol
  {{ \sk P -> is_point_affine E (e1_scalar_mult sk P) ==
              if is_point_affine E P
              then True
              else apply is_point_affine E (e1_scalar_mult sk P) }};

// This theorem states that if (affinify P1) == P2 and P1 is on the curve
// (is_point_projective E P1), then P2 is on the curve
// (is_point_affine E P2), so long as:
// 1. P1 is not point O in the "bad" form, and
// 2. P1 satisifies the POINTonE1 invariant
// For more info on why this "bad point O" check is necessary, see the
// POINTonE1_in_G1 note in proof/subgroup_check_g1.saw
affine_inv_thm <- test_cryptol
  {{ \P1 P2 ->
     (and_core (same_point_affine E (affinify E (POINTonE1_abs P1)) P2)
               (and_core (POINTonE1_invariant P1)
                         (and_core (not_core (is_bad_O_form_E P1))
                                   (is_point_projective E (POINTonE1_abs P1))))) ==
               (same_point_affine E (affinify E (POINTonE1_abs P1)) P2 /\
                ~(is_bad_O_form_E P1) /\
                is_point_affine E P2) }};

// e1_scalar_mult does not produce point O in the bad forms of (0, 0, _) or
// (_, _, 0)
e1_scalar_mult_not_bad_O_thm <- admit_cryptol (rewrite (cryptol_ss())
  // Can't use normal conditional rewrite rule formulation because "sk" is a
  // fresh var that exists only on the right hand side of the substitution, so
  // the override would never applies.  That is, a rewrite of the form:
  //   is_bad_O_form_E P ==
  //   if (same_point_affine E (affinify ...) (e1_scalar_mult ...))
  //   then False
  //   else apply ...
  // will never apply due to unused variables in the right hand side of the
  // equality.
  {{ \P sk (x:([32][8],[43][8])) ->
                (same_point_affine
                  E
                  (affinify E (POINTonE1_abs P))
                  (e1_scalar_mult (scalar_value`{255,32} sk)
                                  (affinify E (hash_to_curve_opt_impl x)))) ==
                ((apply same_point_affine
                        E
                        (affinify E (POINTonE1_abs P))
                        (e1_scalar_mult (scalar_value`{255,32} sk)
                                        (affinify E (hash_to_curve_opt_impl x)))) &&
                  ~(is_bad_O_form_E P)) }});


// P = sk * (hash_to_curve x) has the following properties:
// 1.  P satisfies the POINTonE1_invariant
// 2.  P is not in the bad O forms of (0, 0, _) or (_, _, 0)
// 3.  P is on the curve
e1_scalar_mult_htc_props <- custom_prove_cryptol (rewrite (cryptol_ss())
  //{{ \P sk (x:([32][8],[43][8])) ->
  {{ \P sk (msg:[32][8]) (dst:[43][8]) ->
                (same_point_affine
                  E
                  (affinify E (POINTonE1_abs P))
                  (e1_scalar_mult (scalar_value`{255,32} sk)
                                  (affinify E (hash_to_curve_opt_impl (msg,dst))))) ==
                ((apply same_point_affine
                        E
                        (affinify E (POINTonE1_abs P))
                        (e1_scalar_mult (scalar_value`{255,32} sk)
                                        (affinify E (hash_to_curve_opt_impl (msg,dst))))) &&
                  POINTonE1_invariant P &&
                  ~(is_bad_O_form_E P) &&
                  is_point_projective E (POINTonE1_abs P)) }})
  do {
    rw_with_1 e1_scalar_mult_not_bad_O_thm;
    unfolding ["apply"];
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with POINTonE1_base_thms;
    simplify (addsimps [ affine_inv_thm
                       , e1_scalar_mult_on_curve_thm
                       , hash_to_g1_on_curve_thm
                       , affine_inv_affine_rep_e1_thm ]
                       empty_ss);
    simplify basic_ss;
    rw_with remove_ho_rules;
    rw_with_1 same_point_affine_E_thm;
    rw_with_1 and_true_thm;
    w4_unint_z3 (concat [ "same_point_affine_E"
                        , "hash_to_curve_opt_impl"
                        , "scalar_value"
                        , "is_bad_O_form_E" ]
                        ec_mult_unints);
  };

point_e1_eq <- parse_core "pairEq Integer Integer intEq intEq";
eq_to_same_point_affine_E_thm <- prove_cryptol (rewrite (cryptol_ss())
  {{ \P1 P2 -> (point_e1_eq P1 P2) == same_point_affine E P1 P2 }}) [];


let demo_BasicSign_A_spec = do {
  global_alloc_init "demo_DST_A" {{ DST }};
  let msg_len = 32;
  out_ptr <- llvm_alloc (llvm_array 48 (llvm_int 8));

  // SK must be aligned
  SK_ptr <- llvm_alloc_readonly_aligned 8 pow256_type;
  SK <- llvm_fresh_var "SK" pow256_type;
  llvm_points_to SK_ptr (llvm_term SK);
  llvm_precond {{ SK != zero }};

  (msg, msg_ptr) <- ptr_to_fresh_readonly "msg" (llvm_array msg_len (llvm_int 8));
  llvm_precond {{ e1_order (affinify E (hash_to_curve_opt_impl (msg,DST))) >
                  scalar_value`{255,32} SK + shift }};

  llvm_execute_func [ out_ptr
                    , SK_ptr
                    , msg_ptr
                    , llvm_term {{ `msg_len : [64] }} ];

  llvm_points_to
    out_ptr
    (llvm_term {{ split`{each=8} (CoreSign ((drop_join_reverse`{255, 32} SK), msg)) }});
};

demo_BasicSign_A_ov <- custom_verify "demo_BasicSign_A"
  [ hash_to_g1_impl_ov
  , POINTonE1_mult_w5_sk_ov
  , blst_p1_compress_affine_ov
  , blst_p1_compress_projective_ov ]
  demo_BasicSign_A_spec
  do {
    simplify (addsimp eq_to_same_point_affine_E_thm (cryptol_ss()));
    rw_with POINTonE1_base_thms;
    simplify (addsimps POINTonE1_thms (cryptol_ss()));
    simplify (addsimp eliminate_normalized_args_affinify_E_thm empty_ss);
    simplify basic_ss;
    simplify (addsimps [e1_scalar_mult_htc_props] empty_ss);
    simplify basic_ss;
    simplify (cryptol_ss());
    rw_with_1 O_O_unit_implies_bad_O_form_E;
    unfolding ["apply", "BLSMinimalSignatureSize::DST", "is_bad_O_form_E"];
    simplify basic_ss;
    simplify (cryptol_ss());
    // final goal proof
    unfolding [ "CoreSign"
              , "module parameter point_to_signature"
              , "module parameter main_curve"
              , "main_curve"
              , "module parameter hash_to_point"
              , "hash_to_point"
              , "point_to_signature"
              , "BLSMinimalSignatureSize::DST" ];
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps (concat split_join_thms
                               [ hash_to_curve_e1_impl_thm
                               , fold_scalar_value_thm
                               , serialize_e1_eq_thm
                               , mult_e1_scalar_mult_thm ])
                       empty_ss);
    simplify basic_ss;
    simplify (addsimps [hoist_unrip_48_thm] empty_ss);
    simplify (addsimps [hoist_if_vecEq48_thm] empty_ss);
    simplify (addsimps [serialize_e1_affine_thm] empty_ss);
    simplify (addsimps [serialize_e1_eq_thm] empty_ss);
    simplify (addsimps [hoist_if_vecEq48_thm] empty_ss);
    simplify (addsimps [serialize_e1_eq_thm] empty_ss);
    simplify basic_ss;
    simplify (cryptol_ss());
    simplify (addsimps remove_ho_rules empty_ss);
    simplify (addsimps [same_point_affine_E_thm] empty_ss);
    w4_unint_z3 (concat [ "e1_order"
                        , "e1_scalar_mult"
                        , "fp_abs"
                        , "Fp"
                        , "is_point_projective_E"
                        , "hash_to_curve_opt_impl"
                        , "scalar_value"
                        , "same_point_affine_E"
                        , "hash_to_curve_opt_impl" ]
                        ec_mult_unints);
  };

