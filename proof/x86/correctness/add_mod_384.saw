/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

// add_mod_384
let add_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  lt_modulus b;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  let new_ret = {{ vec384_rep ((vec384_abs a + vec384_abs b) % vec384_abs modulus) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let add_mod_384_alias_ret_a_spec = do {
  (a, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  lt_modulus b;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr];
  let new_ret = {{ vec384_rep ((vec384_abs a + vec384_abs b) % vec384_abs modulus) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let add_mod_384_alias_ret_b_spec = do {
  (b, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  lt_modulus b;
  crucible_execute_func [ret_ptr, a_ptr, ret_ptr, p_ptr];
  let new_ret = {{ vec384_rep ((vec384_abs a + vec384_abs b) % vec384_abs modulus) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let add_mod_384_alias_a_b_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (ab, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus ab;
  crucible_execute_func [ret_ptr, a_ptr, a_ptr, p_ptr];
  let new_ret = {{ vec384_rep ((vec384_abs ab + vec384_abs ab) % vec384_abs modulus) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let add_mod_384_alias_ret_a_b_spec = do {
  (ab, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus ab;
  crucible_execute_func [ret_ptr, ret_ptr, ret_ptr, p_ptr];
  let new_ret = {{ vec384_rep ((vec384_abs ab + vec384_abs ab) % vec384_abs modulus) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};

// add_mod_384x
let add_mod_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (a_r, a_i, a_ptr) <- ptr_to_fresh_vec384x_readonly "a";
  (b_r, b_i, b_ptr) <- ptr_to_fresh_vec384x_readonly "b";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  lt_modulus b_r;
  lt_modulus b_i;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep ((vec384_abs a_r + vec384_abs b_r) % vec384_abs modulus) : Vec384}};
  let new_ret_i = {{ vec384_rep ((vec384_abs a_i + vec384_abs b_i) % vec384_abs modulus) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};
let add_mod_384x_alias_ret_a_spec = do {
  (a_r, a_i, ret_ptr) <- ptr_to_fresh_vec384x "a";
  (b_r, b_i, b_ptr) <- ptr_to_fresh_vec384x_readonly "b";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  lt_modulus b_r;
  lt_modulus b_i;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep ((vec384_abs a_r + vec384_abs b_r) % vec384_abs modulus) : Vec384}};
  let new_ret_i = {{ vec384_rep ((vec384_abs a_i + vec384_abs b_i) % vec384_abs modulus) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};
let add_mod_384x_alias_ret_b_spec = do {
  (b_r, b_i, ret_ptr) <- ptr_to_fresh_vec384x "b";
  (a_r, a_i, a_ptr) <- ptr_to_fresh_vec384x_readonly "a";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  lt_modulus b_r;
  lt_modulus b_i;
  crucible_execute_func [ret_ptr, a_ptr, ret_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep ((vec384_abs a_r + vec384_abs b_r) % vec384_abs modulus) : Vec384}};
  let new_ret_i = {{ vec384_rep ((vec384_abs a_i + vec384_abs b_i) % vec384_abs modulus) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};

let add_mod_384x_alias_ret_a_b_spec = do {
  (ab_r, ab_i, ret_ptr) <- ptr_to_fresh_vec384x "ab";
  p_ptr <- ptr_to_modulus;
  lt_modulus ab_r;
  lt_modulus ab_i;
  crucible_execute_func [ret_ptr, ret_ptr, ret_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep ((vec384_abs ab_r + vec384_abs ab_r) % vec384_abs modulus) : Vec384}};
  let new_ret_i = {{ vec384_rep ((vec384_abs ab_i + vec384_abs ab_i) % vec384_abs modulus) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};

let {{
  double_mod x = (x + x) % vec384_abs modulus
  repeat_double_mod n x = if n <= 0 then x else repeat_double_mod (n - 1) (double_mod x)
}};

// lshift_mod_384
let lshift_mod_384_spec count = do {
  ret_ptr <- crucible_alloc vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term count, p_ptr];
  let new_ret = {{ vec384_rep (repeat_double_mod count (vec384_abs a)) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let lshift_mod_384_alias_ret_a_spec count = do {
  (a, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  crucible_execute_func [ret_ptr, ret_ptr, crucible_term count, p_ptr];
  let new_ret = {{ vec384_rep (repeat_double_mod count (vec384_abs a)) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};

// mul_by_3_mod_384
let mul_by_3_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  let new_ret = {{ vec384_rep ((((vec384_abs a + vec384_abs a) % vec384_abs modulus) + vec384_abs a) % vec384_abs modulus) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let mul_by_3_mod_384_alias_ret_a_spec = do {
  (a, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr];
  let new_ret = {{ vec384_rep ((((vec384_abs a + vec384_abs a) % vec384_abs modulus) + vec384_abs a) % vec384_abs modulus) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};

// mul_by_8_mod_384
let mul_by_8_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  let new_ret = {{ vec384_rep (repeat_double_mod 3 (vec384_abs a)) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let mul_by_8_mod_384_alias_ret_a_spec = do {
  (a, ret_ptr) <- ptr_to_fresh "ret" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr];
  let new_ret = {{ vec384_rep (repeat_double_mod 3 (vec384_abs a)) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};

// mul_by_b_onE1
let mul_by_b_onE1_spec = do {
  crucible_alloc_global "BLS12_381_P";
  crucible_points_to
    (crucible_global "BLS12_381_P")
    (crucible_term modulus);

  out_ptr <- crucible_alloc vec384_type;
  (in_, in_ptr) <- ptr_to_fresh_readonly "in" vec384_type;
  lt_modulus in_;
  crucible_execute_func [out_ptr, in_ptr];
  let new_out = {{ vec384_rep (repeat_double_mod 2 (vec384_abs in_)) : Vec384}};
  crucible_points_to out_ptr (crucible_term new_out);
};
let mul_by_b_onE1_alias_out_in_spec = do {
  crucible_alloc_global "BLS12_381_P";
  crucible_points_to
    (crucible_global "BLS12_381_P")
    (crucible_term modulus);

  (in_, out_ptr) <- ptr_to_fresh "out" vec384_type;
  lt_modulus in_;
  crucible_execute_func [out_ptr, out_ptr];
  let new_out = {{ vec384_rep (repeat_double_mod 2 (vec384_abs in_)) : Vec384}};
  crucible_points_to out_ptr (crucible_term new_out);
};

// mul_by_3_mod_384x
let mul_by_3_mod_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (a_r, a_i, a_ptr) <- ptr_to_fresh_vec384x_readonly "a";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep ((((vec384_abs a_r + vec384_abs a_r) % vec384_abs modulus) + vec384_abs a_r) % vec384_abs modulus) : Vec384}};
  let new_ret_i = {{ vec384_rep ((((vec384_abs a_i + vec384_abs a_i) % vec384_abs modulus) + vec384_abs a_i) % vec384_abs modulus) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};
let mul_by_3_mod_384x_alias_ret_a_spec = do {
  (a_r, a_i, ret_ptr) <- ptr_to_fresh_vec384x "a";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep ((((vec384_abs a_r + vec384_abs a_r) % vec384_abs modulus) + vec384_abs a_r) % vec384_abs modulus) : Vec384}};
  let new_ret_i = {{ vec384_rep ((((vec384_abs a_i + vec384_abs a_i) % vec384_abs modulus) + vec384_abs a_i) % vec384_abs modulus) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};

// mul_by_8_mod_384x
let mul_by_8_mod_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (a_r, a_i, a_ptr) <- ptr_to_fresh_vec384x_readonly "a";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep (repeat_double_mod 3 (vec384_abs a_r)) : Vec384}};
  let new_ret_i = {{ vec384_rep (repeat_double_mod 3 (vec384_abs a_i)) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};
let mul_by_8_mod_384x_alias_ret_a_spec = do {
  (a_r, a_i, ret_ptr) <- ptr_to_fresh_vec384x "a";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep (repeat_double_mod 3 (vec384_abs a_r)) : Vec384}};
  let new_ret_i = {{ vec384_rep (repeat_double_mod 3 (vec384_abs a_i)) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};

let {{
  sub_mod a b = if diff @ 0 then diff + vec384_abs modulus else diff
    where diff = vec384_abs a - vec384_abs b
}};

// mul_by_b_onE2
let mul_by_b_onE2_spec = do {
  crucible_alloc_global "BLS12_381_P";
  crucible_points_to
    (crucible_global "BLS12_381_P")
    (crucible_term modulus);

  out_ptr <- crucible_alloc vec384x_type;

  // in_ptr <- crucible_alloc vec384x_type;
  // let in_r = counterc;
  // let in_i = counterc;
  // points_to_vec384x in_ptr in_r in_i;

  (in_r, in_i, in_ptr) <- ptr_to_fresh_vec384x_readonly "in";
  lt_modulus in_r;
  lt_modulus in_i;
  crucible_execute_func [out_ptr, in_ptr];
  let new_out_r = {{ vec384_rep (repeat_double_mod 2 (sub_mod in_r in_i)) : Vec384}};
  let new_out_i = {{ vec384_rep (repeat_double_mod 2 ((vec384_abs in_r + vec384_abs in_i) % vec384_abs modulus)) : Vec384}};
  points_to_vec384x out_ptr new_out_r new_out_i;
};
let mul_by_b_onE2_alias_out_in_spec = do {
  crucible_alloc_global "BLS12_381_P";
  crucible_points_to
    (crucible_global "BLS12_381_P")
    (crucible_term modulus);

  (in_r, in_i, out_ptr) <- ptr_to_fresh_vec384x "in";
  lt_modulus in_r;
  lt_modulus in_i;
  crucible_execute_func [out_ptr, out_ptr];
  let new_out_r = {{ vec384_rep (repeat_double_mod 2 (sub_mod in_r in_i)) : Vec384}};
  let new_out_i = {{ vec384_rep (repeat_double_mod 2 ((vec384_abs in_r + vec384_abs in_i) % vec384_abs modulus)) : Vec384}};
  points_to_vec384x out_ptr new_out_r new_out_i;
};

// cneg_mod_384
let cneg_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  flag <- crucible_fresh_var "flag" limb_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  crucible_execute_func [ret_ptr, a_ptr, crucible_term flag, p_ptr];
  let new_ret = {{ if (vec_abs a != 0) && (flag != 0) then vec384_rep (vec_abs modulus - vec_abs a) else a : Vec384 }};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let cneg_mod_384_alias_ret_a_spec = do {
  (a, ret_ptr) <- ptr_to_fresh "a" vec384_type;
  flag <- crucible_fresh_var "flag" limb_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  crucible_execute_func [ret_ptr, ret_ptr, crucible_term flag, p_ptr];
  let new_ret = {{ if (vec_abs a != 0) && (flag != 0) then vec384_rep (vec_abs modulus - vec_abs a) else a : Vec384 }};
  crucible_points_to ret_ptr (crucible_term new_ret);
};

// sub_mod_384
let sub_mod_384_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  lt_modulus b;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  let new_ret = {{ vec384_rep (sub_mod a b) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let sub_mod_384_alias_ret_a_spec = do {
  (a, ret_ptr) <- ptr_to_fresh "a" vec384_type;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  lt_modulus b;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr];
  let new_ret = {{ vec384_rep (sub_mod a b) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let sub_mod_384_alias_ret_b_spec = do {
  (b, ret_ptr) <- ptr_to_fresh "b" vec384_type;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  lt_modulus b;
  crucible_execute_func [ret_ptr, a_ptr, ret_ptr, p_ptr];
  let new_ret = {{ vec384_rep (sub_mod a b) : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let sub_mod_384_alias_a_b_spec = do {
  ret_ptr <- crucible_alloc vec384_type;
  (ab, a_ptr) <- ptr_to_fresh_readonly "ab" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus ab;
  crucible_execute_func [ret_ptr, a_ptr, a_ptr, p_ptr];
  let new_ret = {{ vec384_rep 0 : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let sub_mod_384_alias_ret_a_b_spec = do {
  (ab, ret_ptr) <- ptr_to_fresh "ab" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus ab;
  crucible_execute_func [ret_ptr, ret_ptr, ret_ptr, p_ptr];
  let new_ret = {{ vec384_rep 0 : Vec384}};
  crucible_points_to ret_ptr (crucible_term new_ret);
};

// sub_mod_384x
let sub_mod_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (a_r, a_i, a_ptr) <- ptr_to_fresh_vec384x_readonly "a";
  (b_r, b_i, b_ptr) <- ptr_to_fresh_vec384x_readonly "b";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  lt_modulus b_r;
  lt_modulus b_i;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep (sub_mod a_r b_r) : Vec384}};
  let new_ret_i = {{ vec384_rep (sub_mod a_i b_i) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};
let sub_mod_384x_alias_ret_a_spec = do {
  (a_r, a_i, ret_ptr) <- ptr_to_fresh_vec384x "a";
  (b_r, b_i, b_ptr) <- ptr_to_fresh_vec384x_readonly "b";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  lt_modulus b_r;
  lt_modulus b_i;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  let new_ret_r = {{ vec384_rep (sub_mod a_r b_r) : Vec384}};
  let new_ret_i = {{ vec384_rep (sub_mod a_i b_i) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};
let sub_mod_384x_alias_ret_b_spec = do {
  (b_r, b_i, ret_ptr) <- ptr_to_fresh_vec384x "b";
  (a_r, a_i, a_ptr) <- ptr_to_fresh_vec384x_readonly "a";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  lt_modulus b_r;
  lt_modulus b_i;
  crucible_execute_func [ret_ptr, a_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec384x_type;
  let new_ret_r = {{ vec384_rep (sub_mod a_r b_r) : Vec384}};
  let new_ret_i = {{ vec384_rep (sub_mod a_i b_i) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};
let sub_mod_384x_alias_a_b_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (ab_r, ab_i, a_ptr) <- ptr_to_fresh_vec384x_readonly "ab";
  p_ptr <- ptr_to_modulus;
  lt_modulus ab_r;
  lt_modulus ab_i;
  crucible_execute_func [ret_ptr, a_ptr, a_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep 0 : Vec384}};
  let new_ret_i = {{ vec384_rep 0 : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};
let sub_mod_384x_alias_ret_a_b_spec = do {
  (ab_r, ab_i, ret_ptr) <- ptr_to_fresh_vec384x "ab";
  p_ptr <- ptr_to_modulus;
  lt_modulus ab_r;
  lt_modulus ab_i;
  crucible_execute_func [ret_ptr, ret_ptr, ret_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep 0 : Vec384}};
  let new_ret_i = {{ vec384_rep 0 : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};

// mul_by_1_plus_i_mod_384x
let mul_by_1_plus_i_mod_384x_spec = do {
  ret_ptr <- crucible_alloc vec384x_type;
  (a_r, a_i, a_ptr) <- ptr_to_fresh_vec384x_readonly "a";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep (sub_mod a_r a_i) : Vec384}};
  let new_ret_i = {{ vec384_rep ((vec384_abs a_r + vec384_abs a_i) % vec384_abs modulus) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};
let mul_by_1_plus_i_mod_384x_alias_ret_a_spec = do {
  (a_r, a_i, ret_ptr) <- ptr_to_fresh_vec384x "a";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  crucible_execute_func [ret_ptr, ret_ptr, p_ptr];
  let new_ret_r = {{ vec384_rep (sub_mod a_r a_i) : Vec384}};
  let new_ret_i = {{ vec384_rep ((vec384_abs a_r + vec384_abs a_i) % vec384_abs modulus) : Vec384}};
  points_to_vec384x ret_ptr new_ret_r new_ret_i;
};

let {{
  pty_mod a = a ! 0
  sgn_mod a = a > ((vec384_abs modulus - 1) / 2)
}};

// sgn0_pty_mod_384
let sgn0_pty_mod_384_spec = do {
  (a, a_ptr) <- ptr_to_fresh_readonly "a" vec384_type;
  p_ptr <- ptr_to_modulus;
  lt_modulus a;
  crucible_execute_func [a_ptr, p_ptr];
  let return_value = {{ zero # [sgn_mod (vec384_abs a), pty_mod (vec384_abs a)] : [64] }};
  crucible_return (crucible_term return_value);
};

// sgn0_pty_mod_384x
let sgn0_pty_mod_384x_spec = do {
  (a_r, a_i, a_ptr) <- ptr_to_fresh_vec384x_readonly "a";
  p_ptr <- ptr_to_modulus;
  lt_modulus a_r;
  lt_modulus a_i;
  crucible_execute_func [a_ptr, p_ptr];
  let return_value = {{
    zero #
    [ if vec384_abs a_i == 0 then sgn_mod (vec384_abs a_r) else sgn_mod (vec384_abs a_i)
    , if vec384_abs a_r == 0 then pty_mod (vec384_abs a_i) else pty_mod (vec384_abs a_r)
    , 0
    ] : [64]
  }};
  crucible_return (crucible_term return_value);
};

// vec_select
let vec_select_spec (bytes:Int) = do {
  ret_ptr <- crucible_alloc (llvm_array bytes (llvm_int 8));
  (a, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_array bytes (llvm_int 8));
  (b, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_array bytes (llvm_int 8));
  sel_a <- crucible_fresh_var "sel_a" limb_type;
  crucible_precond {{ sel_a == 0 \/ sel_a == 1 }};
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, crucible_term sel_a];
  let ret = {{ if sel_a == 1 then a else b : [bytes][8] }};
  crucible_points_to ret_ptr (crucible_term ret);
};

let vec_select_alias_1_3_spec bytes = do {
  (b, ret_ptr) <- ptr_to_fresh "b" (llvm_array bytes (llvm_int 8));
  (a, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_array bytes (llvm_int 8));
  sel_a <- crucible_fresh_var "sel_a" limb_type;
  crucible_precond {{ sel_a == 0 \/ sel_a == 1 }};
  crucible_execute_func [ret_ptr, a_ptr, ret_ptr, crucible_term sel_a];
  let ret = {{ if sel_a == 1 then a else b : [bytes][8] }};
  crucible_points_to ret_ptr (crucible_term ret);
};

let vec_select_alias_1_2_spec bytes = do {
  (a, ret_ptr) <- ptr_to_fresh "a" (llvm_array bytes (llvm_int 8));
  (b, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_array bytes (llvm_int 8));
  sel_a <- crucible_fresh_var "sel_a" limb_type;
  crucible_precond {{ sel_a == 0 \/ sel_a == 1 }};
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, crucible_term sel_a];
  let ret = {{ if sel_a == 1 then a else b : [bytes][8] }};
  crucible_points_to ret_ptr (crucible_term ret);
};

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

// add_mod_384
add_mod_384_ov <- verify_x86 "add_mod_384" add_mod_384_spec w4;
add_mod_384_alias_ret_a_ov <- verify_x86 "add_mod_384" add_mod_384_alias_ret_a_spec w4;
add_mod_384_alias_ret_b_ov <- verify_x86 "add_mod_384" add_mod_384_alias_ret_b_spec w4;
add_mod_384_alias_a_b_ov <- verify_x86 "add_mod_384" add_mod_384_alias_a_b_spec w4;
add_mod_384_alias_ret_a_b_ov <- verify_x86 "add_mod_384" add_mod_384_alias_ret_a_b_spec w4;

// add_mod_384x
add_mod_384x_ov <- verify_x86 "add_mod_384x" add_mod_384x_spec w4;
add_mod_384x_alias_ret_a_ov <- verify_x86 "add_mod_384x" add_mod_384x_alias_ret_a_spec w4;
add_mod_384x_alias_ret_b_ov <- verify_x86 "add_mod_384x" add_mod_384x_alias_ret_b_spec w4;
add_mod_384x_alias_ret_a_b_ov <- verify_x86 "add_mod_384x" add_mod_384x_alias_ret_a_b_spec w4;

// lshift_mod_384
verify_x86 "lshift_mod_384" (lshift_mod_384_spec {{ 2 : [64] }}) w4;
lshift_mod_384_5_ov <- verify_x86 "lshift_mod_384" (lshift_mod_384_spec {{ 5 : [64] }}) w4;
lshift_mod_384_alias_ret_a_5_ov <- verify_x86 "lshift_mod_384" (lshift_mod_384_alias_ret_a_spec {{ 5 : [64] }}) w4;
lshift_mod_384_alias_ret_a_2_ov <- verify_x86 "lshift_mod_384" (lshift_mod_384_alias_ret_a_spec {{ 2 : [64] }}) w4;

// mul_by_3_mod_384
mul_by_3_mod_384_ov <- verify_x86 "mul_by_3_mod_384" mul_by_3_mod_384_spec w4;
mul_by_3_mod_384_alias_ret_a_ov <- verify_x86 "mul_by_3_mod_384" mul_by_3_mod_384_alias_ret_a_spec w4;

// mul_by_8_mod_384
mul_by_8_mod_384_ov <- verify_x86 "mul_by_8_mod_384" mul_by_8_mod_384_spec w4;
mul_by_8_mod_384_alias_ret_a_ov <- verify_x86 "mul_by_8_mod_384" mul_by_8_mod_384_alias_ret_a_spec w4;

// mul_by_b_onE1
mul_by_b_onE1_ov <- verify_x86 "mul_by_b_onE1" mul_by_b_onE1_spec w4;
mul_by_b_onE1_alias_out_in_ov <- verify_x86 "mul_by_b_onE1" mul_by_b_onE1_alias_out_in_spec w4;

// mul_by_3_mod_384x - these take ~30minutes each
mul_by_3_mod_384x_ov <- verify_x86 "mul_by_3_mod_384x" mul_by_3_mod_384x_spec w4;
mul_by_3_mod_384x_alias_ret_a_ov <- verify_x86 "mul_by_3_mod_384x" mul_by_3_mod_384x_alias_ret_a_spec w4;

// mul_by_8_mod_384x
mul_by_8_mod_384x_ov <- verify_x86 "mul_by_8_mod_384x" mul_by_8_mod_384x_spec w4;
mul_by_8_mod_384x_alias_ret_a_ov <- verify_x86 "mul_by_8_mod_384x" mul_by_8_mod_384x_alias_ret_a_spec w4;

// mul_by_b_onE2 - TODO
// mul_by_b_onE2_ov <- verify_x86 "mul_by_b_onE2" mul_by_b_onE2_spec do {
//   w4;
// };
// mul_by_b_onE2_alias_out_in_ov <- verify_x86 "mul_by_b_onE2" mul_by_b_onE2_alias_out_in_spec w4;

// cneg_mod_384
cneg_mod_384_ov <- verify_x86 "cneg_mod_384" cneg_mod_384_spec w4;
cneg_mod_384_alias_ret_a_ov <- verify_x86 "cneg_mod_384" cneg_mod_384_alias_ret_a_spec w4;

// sub_mod_384
sub_mod_384_ov <- verify_x86 "sub_mod_384" sub_mod_384_spec w4;
sub_mod_384_alias_ret_a_ov <- verify_x86 "sub_mod_384" sub_mod_384_alias_ret_a_spec w4;
sub_mod_384_alias_ret_b_ov <- verify_x86 "sub_mod_384" sub_mod_384_alias_ret_b_spec w4;
sub_mod_384_alias_a_b_ov <- verify_x86 "sub_mod_384" sub_mod_384_alias_a_b_spec w4;
sub_mod_384_alias_ret_a_b_ov <- verify_x86 "sub_mod_384" sub_mod_384_alias_ret_a_b_spec w4;

// sub_mod_384x
sub_mod_384x_ov <- verify_x86 "sub_mod_384x" sub_mod_384x_spec w4;
sub_mod_384x_alias_ret_a_ov <- verify_x86 "sub_mod_384x" sub_mod_384x_alias_ret_a_spec w4;
sub_mod_384x_alias_ret_b_ov <- verify_x86 "sub_mod_384x" sub_mod_384x_alias_ret_b_spec w4;
sub_mod_384x_alias_a_b_ov <- verify_x86 "sub_mod_384x" sub_mod_384x_alias_a_b_spec w4;
sub_mod_384x_alias_ret_a_b_ov <- verify_x86 "sub_mod_384x" sub_mod_384x_alias_ret_a_b_spec w4;

// mul_by_1_plus_i_mod_384x
mul_by_1_plus_i_mod_384x_ov <- verify_x86 "mul_by_1_plus_i_mod_384x" mul_by_1_plus_i_mod_384x_spec w4;
mul_by_1_plus_i_mod_384x_alias_ret_a_ov <- verify_x86 "mul_by_1_plus_i_mod_384x" mul_by_1_plus_i_mod_384x_alias_ret_a_spec w4;

// sgn0_pty_mod_384
sgn0_pty_mod_384_ov <- verify_x86 "sgn0_pty_mod_384" sgn0_pty_mod_384_spec w4;

// doesn't match no_asm implementation - this is fixed in blst commit 668f17b664e285b02b8158ecb37adc36a8d553ff
// sgn0_pty_mod_384x
let do_prove_x86 = false;
sgn0_pty_mod_384x_ov <- verify_x86 "sgn0_pty_mod_384x" sgn0_pty_mod_384x_spec w4;
let do_prove_x86 = true;

// vec_select
let mk_vec_select_ov bytes = verify_x86 (str_concat "vec_select_" (show bytes)) (vec_select_spec bytes) w4;
let mk_vec_select_alias_1_2_ov bytes = verify_x86 (str_concat "vec_select_" (show bytes)) (vec_select_alias_1_2_spec bytes) w4;
let mk_vec_select_alias_1_3_ov bytes = verify_x86 (str_concat "vec_select_" (show bytes)) (vec_select_alias_1_3_spec bytes) w4;
let vec_select_sizes = [48, 96, 144, 192, 288];
vec_select_ovs <- do {
  ovs <- (for vec_select_sizes mk_vec_select_ov);
  ovs_1_2  <- (for vec_select_sizes mk_vec_select_alias_1_2_ov);
  ovs_1_3  <- (for vec_select_sizes mk_vec_select_alias_1_3_ov);
  return (foldr concat [ovs, ovs_1_2] ovs_1_3);
};