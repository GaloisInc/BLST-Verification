/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

// add_mod_384x384
let add_mod_384x384_spec = do {
  ret_ptr <- crucible_alloc vec768_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec768_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let add_mod_384x384_alias_ret_a_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec768_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let add_mod_384x384_alias_ret_b_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec768_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let add_mod_384x384_alias_a_b_spec = do {
  ret_ptr <- crucible_alloc vec768_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, a_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let add_mod_384x384_alias_ret_a_b_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

// sub_mod_384x384
let sub_mod_384x384_spec = do {
  ret_ptr <- crucible_alloc vec768_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec768_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let sub_mod_384x384_alias_ret_a_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec768_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let sub_mod_384x384_alias_ret_b_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec768_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let sub_mod_384x384_alias_a_b_spec = do {
  ret_ptr <- crucible_alloc vec768_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, a_ptr, a_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};
let sub_mod_384x384_alias_ret_a_b_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec768_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec384_type;
  crucible_execute_func [ret_ptr, ret_ptr, ret_ptr, p_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

// add_mod_384x384
add_mod_384x384_ov <- verify_x86 "add_mod_384x384" add_mod_384x384_spec;
add_mod_384x384_alias_ret_a_ov <- verify_x86 "add_mod_384x384" add_mod_384x384_alias_ret_a_spec;
add_mod_384x384_alias_ret_b_ov <- verify_x86 "add_mod_384x384" add_mod_384x384_alias_ret_b_spec;
add_mod_384x384_alias_a_b_ov <- verify_x86 "add_mod_384x384" add_mod_384x384_alias_a_b_spec;
add_mod_384x384_alias_ret_a_b_ov <- verify_x86 "add_mod_384x384" add_mod_384x384_alias_ret_a_b_spec;

// sub_mod_384x
sub_mod_384x384_ov <- verify_x86 "sub_mod_384x384" sub_mod_384x384_spec;
sub_mod_384x384_alias_ret_a_ov <- verify_x86 "sub_mod_384x384" sub_mod_384x384_alias_ret_a_spec;
sub_mod_384x384_alias_ret_b_ov <- verify_x86 "sub_mod_384x384" sub_mod_384x384_alias_ret_b_spec;
sub_mod_384x384_alias_a_b_ov <- verify_x86 "sub_mod_384x384" sub_mod_384x384_alias_a_b_spec;
sub_mod_384x384_alias_ret_a_b_ov <- verify_x86 "sub_mod_384x384" sub_mod_384x384_alias_ret_a_b_spec;

let add_mod_384x384_overrides =
  [ add_mod_384x384_ov
  , add_mod_384x384_alias_ret_a_ov
  , add_mod_384x384_alias_ret_b_ov
  , add_mod_384x384_alias_a_b_ov
  , add_mod_384x384_alias_ret_a_b_ov

  , sub_mod_384x384_ov
  , sub_mod_384x384_alias_ret_a_ov
  , sub_mod_384x384_alias_ret_b_ov
  , sub_mod_384x384_alias_a_b_ov
  , sub_mod_384x384_alias_ret_a_b_ov
  ];