/*
 * Copyright (c) 2021 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

// ct_inverse_mod_383
let ct_inverse_mod_383_spec = do {
  ret_ptr <- crucible_alloc vec768_type;
  (_, inp_ptr) <- ptr_to_fresh_readonly "inp" vec384_type;
  (_, mod_ptr) <- ptr_to_fresh_readonly "mod" vec384_type;
  crucible_execute_func [ret_ptr, inp_ptr, mod_ptr];
  new_ret <- crucible_fresh_var "new_ret" vec768_type;
  crucible_points_to ret_ptr (crucible_term new_ret);
};

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

// Some elements of ctx_inverse_mod_383 present some performance problems for the
// simulator. We enable some options here in order to make things easier:
// - enable_x86_what4_hash_consing improves term sharing during simulation in
//   some cases.
// - set_x86_stack_base_align sets the alignment of the base of the stack
//   allocation to 512 bytes. In the simulator's memory model, addresses are
//   represented as an abstract base plus an offset bitvector. Since the base is
//   abstract, we know little about the actual value of the address, making it
//   difficult to perform bitwise operations on addresses. However, if the base
//   is known to have a certain alignment, we know that a certain number of low
//   bits of the address are determined entirely by the offset. This makes it
//   possible to apply bitwise operations that only influence those bits
//   directly to the offset.

enable_x86_what4_hash_consing;
set_x86_stack_base_align 512;

// ctx_inverse_mod_383
verify_x86_patched "ctx_inverse_mod_383" ct_inverse_mod_383_spec;

disable_x86_what4_hash_consing;
default_x86_stack_base_align;