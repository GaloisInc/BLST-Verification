/*
 * Copyright (c) 2020 Galois, Inc.
 * SPDX-License-Identifier: Apache-2.0 OR MIT
*/

///////////////////////////////////////////////////////////////////////////////
// Specifications
///////////////////////////////////////////////////////////////////////////////

// mulx_mont_sparse_256
let mulx_mont_sparse_256_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, p_ptr, crucible_term n0];
  new_mul_mont_sparse_256_ret <- crucible_fresh_var "new_mul_mont_sparse_256_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_mul_mont_sparse_256_ret);
};

let mulx_mont_sparse_256_alias_ret_a_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, ret_ptr, b_ptr, p_ptr, crucible_term n0];
  new_mul_mont_sparse_256_alias_ret <- crucible_fresh_var "new_mul_mont_sparse_256_alias_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_mul_mont_sparse_256_alias_ret);
};

// sqrx_mont_sparse_256
let sqrx_mont_sparse_256_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr, crucible_term n0];
  new_sqr_mont_sparse_256_ret <- crucible_fresh_var "new_sqr_mont_sparse_256_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_sqr_mont_sparse_256_ret);
};

// fromx_mont_256
let fromx_mont_256_spec = do {
  (_, ret_ptr) <- ptr_to_fresh "ret" vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec256_type;
  (_, p_ptr) <- ptr_to_fresh_readonly "p" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, p_ptr, crucible_term n0];
  new_from_mont_256_ret <- crucible_fresh_var "new_from_mont_256_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_from_mont_256_ret);
};

// redcx_mont_256
let redcx_mont_256_spec = do {
  ret_ptr <- crucible_alloc vec256_type;
  (_, a_ptr) <- ptr_to_fresh_readonly "a" vec512_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [ret_ptr, a_ptr, b_ptr, crucible_term n0];
  new_redc_mont_256_ret <- crucible_fresh_var "new_redc_mont_256_ret" vec256_type;
  crucible_points_to ret_ptr (crucible_term new_redc_mont_256_ret);
};

let redcx_mont_256_alias_ret_a_spec = do {
  (_, a_ptr) <- ptr_to_fresh "a" vec512_type;
  (_, b_ptr) <- ptr_to_fresh_readonly "b" vec256_type;
  n0 <- crucible_fresh_var "n0" limb_type;
  crucible_execute_func [a_ptr, a_ptr, b_ptr, crucible_term n0];
  new_redc_mont_256_alias_1_2_a <- crucible_fresh_var "new_redc_mont_256_alias_1_2_a" vec512_type;
  crucible_points_to a_ptr (crucible_term new_redc_mont_256_alias_1_2_a);
};

///////////////////////////////////////////////////////////////////////////////
// Proofs
///////////////////////////////////////////////////////////////////////////////

// mulx_mont_sparse_256
mulx_mont_sparse_256_ov <- verify_x86 "mulx_mont_sparse_256" mulx_mont_sparse_256_spec;
mulx_mont_sparse_256_alias_ret_a_ov <- verify_x86 "mulx_mont_sparse_256" mulx_mont_sparse_256_alias_ret_a_spec;

// sqrx_mont_sparse_256
sqrx_mont_sparse_256_ov <- verify_x86 "sqrx_mont_sparse_256" sqrx_mont_sparse_256_spec;

// fromx_mont_256
from_mont_256_ov <- verify_x86 "fromx_mont_256" fromx_mont_256_spec;

// redcx_mont_256
redcx_mont_256_ov <- verify_x86 "redcx_mont_256" redcx_mont_256_spec;
redcx_mont_256_alias_ret_a_ov <- verify_x86 "redcx_mont_256" redcx_mont_256_alias_ret_a_spec;

let mulx_mont_256_overrides =
  [ mulx_mont_sparse_256_ov
  , mulx_mont_sparse_256_alias_ret_a_ov

  , sqrx_mont_sparse_256_ov

  , from_mont_256_ov

  , redcx_mont_256_ov
  , redcx_mont_256_alias_ret_a_ov
  ];